                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.2 #13350 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _hasValidNonCaptureMoves
                                     13 	.globl _hasValidCaptureMoves
                                     14 	.globl _checkCollision
                                     15 	.globl _isValidMove
                                     16 	.globl _getCaptureIndex
                                     17 	.globl _isMoveWithinBoard
                                     18 	.globl _printWhite
                                     19 	.globl _printBlack
                                     20 	.globl _printSquare
                                     21 	.globl _printbkg
                                     22 	.globl _printTurn
                                     23 	.globl _font
                                     24 	.globl _dpad
                                     25 	.globl _promoteToKing
                                     26 	.globl _moveSquare
                                     27 	.globl _font_set
                                     28 	.globl _font_load
                                     29 	.globl _font_init
                                     30 	.globl _abs
                                     31 	.globl _set_sprite_data
                                     32 	.globl _set_win_tiles
                                     33 	.globl _set_bkg_tiles
                                     34 	.globl _set_bkg_data
                                     35 	.globl _joypad
                                     36 	.globl _delay
                                     37 	.globl _whitePieces
                                     38 	.globl _blackPieces
                                     39 	.globl _whiteKing
                                     40 	.globl _blackKing
                                     41 	.globl _currentPlayerWhiteText
                                     42 	.globl _currentPlayerBlackText
                                     43 	.globl _white_piece
                                     44 	.globl _black_piece
                                     45 	.globl _squareBR
                                     46 	.globl _squareBL
                                     47 	.globl _squareTR
                                     48 	.globl _squareTL
                                     49 	.globl _map
                                     50 	.globl _tile3
                                     51 	.globl _tile2
                                     52 	.globl _tile1
                                     53 	.globl _pieceSelected
                                     54 	.globl _selectedCoords
                                     55 	.globl _currentPlayer
                                     56 	.globl _cursory
                                     57 	.globl _cursorx
                                     58 	.globl _selectedPieceIndex
                                     59 	.globl _debounceTimer
                                     60 	.globl _lastButtonState
                                     61 	.globl _joypad_input
                                     62 ;--------------------------------------------------------
                                     63 ; special function registers
                                     64 ;--------------------------------------------------------
                                     65 ;--------------------------------------------------------
                                     66 ; ram data
                                     67 ;--------------------------------------------------------
                                     68 	.area _DATA
                           000000    69 G$joypad_input$0_0$0==.
      000000                         70 _joypad_input::
      000000                         71 	.ds 1
                                     72 ;--------------------------------------------------------
                                     73 ; ram data
                                     74 ;--------------------------------------------------------
                                     75 	.area _INITIALIZED
                           000000    76 G$lastButtonState$0_0$0==.
      000000                         77 _lastButtonState::
      000000                         78 	.ds 1
                           000001    79 G$debounceTimer$0_0$0==.
      000001                         80 _debounceTimer::
      000001                         81 	.ds 2
                           000003    82 G$selectedPieceIndex$0_0$0==.
      000003                         83 _selectedPieceIndex::
      000003                         84 	.ds 2
                           000005    85 G$cursorx$0_0$0==.
      000005                         86 _cursorx::
      000005                         87 	.ds 1
                           000006    88 G$cursory$0_0$0==.
      000006                         89 _cursory::
      000006                         90 	.ds 1
                           000007    91 G$currentPlayer$0_0$0==.
      000007                         92 _currentPlayer::
      000007                         93 	.ds 1
                           000008    94 G$selectedCoords$0_0$0==.
      000008                         95 _selectedCoords::
      000008                         96 	.ds 2
                           00000A    97 G$pieceSelected$0_0$0==.
      00000A                         98 _pieceSelected::
      00000A                         99 	.ds 1
                           00000B   100 G$tile1$0_0$0==.
      00000B                        101 _tile1::
      00000B                        102 	.ds 16
                           00001B   103 G$tile2$0_0$0==.
      00001B                        104 _tile2::
      00001B                        105 	.ds 16
                           00002B   106 G$tile3$0_0$0==.
      00002B                        107 _tile3::
      00002B                        108 	.ds 16
                           00003B   109 G$map$0_0$0==.
      00003B                        110 _map::
      00003B                        111 	.ds 360
                           0001A3   112 G$squareTL$0_0$0==.
      0001A3                        113 _squareTL::
      0001A3                        114 	.ds 16
                           0001B3   115 G$squareTR$0_0$0==.
      0001B3                        116 _squareTR::
      0001B3                        117 	.ds 16
                           0001C3   118 G$squareBL$0_0$0==.
      0001C3                        119 _squareBL::
      0001C3                        120 	.ds 16
                           0001D3   121 G$squareBR$0_0$0==.
      0001D3                        122 _squareBR::
      0001D3                        123 	.ds 16
                           0001E3   124 G$black_piece$0_0$0==.
      0001E3                        125 _black_piece::
      0001E3                        126 	.ds 16
                           0001F3   127 G$white_piece$0_0$0==.
      0001F3                        128 _white_piece::
      0001F3                        129 	.ds 16
                           000203   130 G$currentPlayerBlackText$0_0$0==.
      000203                        131 _currentPlayerBlackText::
      000203                        132 	.ds 16
                           000213   133 G$currentPlayerWhiteText$0_0$0==.
      000213                        134 _currentPlayerWhiteText::
      000213                        135 	.ds 16
                           000223   136 G$blackKing$0_0$0==.
      000223                        137 _blackKing::
      000223                        138 	.ds 16
                           000233   139 G$whiteKing$0_0$0==.
      000233                        140 _whiteKing::
      000233                        141 	.ds 16
                           000243   142 G$blackPieces$0_0$0==.
      000243                        143 _blackPieces::
      000243                        144 	.ds 36
                           000267   145 G$whitePieces$0_0$0==.
      000267                        146 _whitePieces::
      000267                        147 	.ds 36
                                    148 ;--------------------------------------------------------
                                    149 ; absolute external ram data
                                    150 ;--------------------------------------------------------
                                    151 	.area _DABS (ABS)
                                    152 ;--------------------------------------------------------
                                    153 ; global & static initialisations
                                    154 ;--------------------------------------------------------
                                    155 	.area _HOME
                                    156 	.area _GSINIT
                                    157 	.area _GSFINAL
                                    158 	.area _GSINIT
                                    159 ;--------------------------------------------------------
                                    160 ; Home
                                    161 ;--------------------------------------------------------
                                    162 	.area _HOME
                                    163 	.area _HOME
                                    164 ;--------------------------------------------------------
                                    165 ; code
                                    166 ;--------------------------------------------------------
                                    167 	.area _CODE
                           000000   168 	G$moveSquare$0$0	= .
                                    169 	.globl	G$moveSquare$0$0
                           000000   170 	C$main.c$96$0_0$125	= .
                                    171 	.globl	C$main.c$96$0_0$125
                                    172 ;main.c:96: void moveSquare() {
                                    173 ;	---------------------------------
                                    174 ; Function moveSquare
                                    175 ; ---------------------------------
      000000                        176 _moveSquare::
                                    177 ;main.c:97: move_sprite(0, cursorx - 8, cursory - 8);
      000000 FAr06r00         [16]  178 	ld	a, (#_cursory)
      000003 C6 F8            [ 8]  179 	add	a, #0xf8
      000005 47               [ 4]  180 	ld	b, a
      000006 FAr05r00         [16]  181 	ld	a, (#_cursorx)
      000009 C6 F8            [ 8]  182 	add	a, #0xf8
      00000B 4F               [ 4]  183 	ld	c, a
                                    184 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      00000C 21r00r00         [12]  185 	ld	hl, #_shadow_OAM
                                    186 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      00000F 78               [ 4]  187 	ld	a, b
      000010 22               [ 8]  188 	ld	(hl+), a
      000011 71               [ 8]  189 	ld	(hl), c
                                    190 ;main.c:98: move_sprite(1, cursorx + 0, cursory - 8);
      000012 FAr06r00         [16]  191 	ld	a, (#_cursory)
      000015 C6 F8            [ 8]  192 	add	a, #0xf8
      000017 47               [ 4]  193 	ld	b, a
      000018 21r05r00         [12]  194 	ld	hl, #_cursorx
      00001B 4E               [ 8]  195 	ld	c, (hl)
                                    196 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      00001C 21r04r00         [12]  197 	ld	hl, #(_shadow_OAM + 4)
                                    198 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      00001F 78               [ 4]  199 	ld	a, b
      000020 22               [ 8]  200 	ld	(hl+), a
      000021 71               [ 8]  201 	ld	(hl), c
                                    202 ;main.c:99: move_sprite(2, cursorx - 8, cursory + 0);
      000022 21r06r00         [12]  203 	ld	hl, #_cursory
      000025 46               [ 8]  204 	ld	b, (hl)
      000026 FAr05r00         [16]  205 	ld	a, (#_cursorx)
      000029 C6 F8            [ 8]  206 	add	a, #0xf8
      00002B 4F               [ 4]  207 	ld	c, a
                                    208 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      00002C 21r08r00         [12]  209 	ld	hl, #(_shadow_OAM + 8)
                                    210 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      00002F 78               [ 4]  211 	ld	a, b
      000030 22               [ 8]  212 	ld	(hl+), a
      000031 71               [ 8]  213 	ld	(hl), c
                                    214 ;main.c:100: move_sprite(3, cursorx + 0, cursory + 0);
      000032 21r06r00         [12]  215 	ld	hl, #_cursory
      000035 46               [ 8]  216 	ld	b, (hl)
      000036 21r05r00         [12]  217 	ld	hl, #_cursorx
      000039 4E               [ 8]  218 	ld	c, (hl)
                                    219 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      00003A 21r0Cr00         [12]  220 	ld	hl, #(_shadow_OAM + 12)
                                    221 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      00003D 78               [ 4]  222 	ld	a, b
      00003E 22               [ 8]  223 	ld	(hl+), a
      00003F 71               [ 8]  224 	ld	(hl), c
                           000040   225 	C$main.c$100$3_0$125	= .
                                    226 	.globl	C$main.c$100$3_0$125
                                    227 ;main.c:100: move_sprite(3, cursorx + 0, cursory + 0);
                           000040   228 	C$main.c$101$3_0$125	= .
                                    229 	.globl	C$main.c$101$3_0$125
                                    230 ;main.c:101: }
                           000040   231 	C$main.c$101$3_0$125	= .
                                    232 	.globl	C$main.c$101$3_0$125
                           000040   233 	XG$moveSquare$0$0	= .
                                    234 	.globl	XG$moveSquare$0$0
      000040 C9               [16]  235 	ret
                           000041   236 	G$promoteToKing$0$0	= .
                                    237 	.globl	G$promoteToKing$0$0
                           000041   238 	C$main.c$117$3_0$140	= .
                                    239 	.globl	C$main.c$117$3_0$140
                                    240 ;main.c:117: void promoteToKing(Piece* pieces, int numPieces, UINT8 player) {
                                    241 ;	---------------------------------
                                    242 ; Function promoteToKing
                                    243 ; ---------------------------------
      000041                        244 _promoteToKing::
      000041 E8 F8            [16]  245 	add	sp, #-8
      000043 F8 06            [12]  246 	ldhl	sp,	#6
      000045 7B               [ 4]  247 	ld	a, e
      000046 22               [ 8]  248 	ld	(hl+), a
      000047 72               [ 8]  249 	ld	(hl), d
      000048 F8 04            [12]  250 	ldhl	sp,	#4
      00004A 79               [ 4]  251 	ld	a, c
      00004B 22               [ 8]  252 	ld	(hl+), a
      00004C 70               [ 8]  253 	ld	(hl), b
                           00004D   254 	C$main.c$118$3_0$141	= .
                                    255 	.globl	C$main.c$118$3_0$141
                                    256 ;main.c:118: for (int i = 0; i < numPieces; i++) {
      00004D F8 0A            [12]  257 	ldhl	sp,	#10
      00004F 7E               [ 8]  258 	ld	a, (hl)
      000050 3D               [ 4]  259 	dec	a
      000051 3E 01            [ 8]  260 	ld	a, #0x01
      000053 28 01            [12]  261 	jr	Z, 00146$
      000055 AF               [ 4]  262 	xor	a, a
      000056                        263 00146$:
      000056 F8 02            [12]  264 	ldhl	sp,	#2
      000058 77               [ 8]  265 	ld	(hl), a
      000059 01 00 00         [12]  266 	ld	bc, #0x0000
      00005C                        267 00110$:
      00005C F8 04            [12]  268 	ldhl	sp,	#4
      00005E 79               [ 4]  269 	ld	a, c
      00005F 96               [ 8]  270 	sub	a, (hl)
      000060 23               [ 8]  271 	inc	hl
      000061 78               [ 4]  272 	ld	a, b
      000062 9E               [ 8]  273 	sbc	a, (hl)
      000063 78               [ 4]  274 	ld	a, b
      000064 57               [ 4]  275 	ld	d, a
      000065 5E               [ 8]  276 	ld	e, (hl)
      000066 CB 7B            [ 8]  277 	bit	7, e
      000068 28 07            [12]  278 	jr	Z, 00147$
      00006A CB 7A            [ 8]  279 	bit	7, d
      00006C 20 08            [12]  280 	jr	NZ, 00148$
      00006E BF               [ 4]  281 	cp	a, a
      00006F 18 05            [12]  282 	jr	00148$
      000071                        283 00147$:
      000071 CB 7A            [ 8]  284 	bit	7, d
      000073 28 01            [12]  285 	jr	Z, 00148$
      000075 37               [ 4]  286 	scf
      000076                        287 00148$:
      000076 30 3D            [12]  288 	jr	NC, 00112$
                           000078   289 	C$main.c$119$2_0$140	= .
                                    290 	.globl	C$main.c$119$2_0$140
                                    291 ;main.c:119: if (pieces[i].y == 28 && player == WHITE_PLAYER) {
      000078 69               [ 4]  292 	ld	l, c
      000079 60               [ 4]  293 	ld	h, b
      00007A 29               [ 8]  294 	add	hl, hl
      00007B 09               [ 8]  295 	add	hl, bc
      00007C 33               [ 8]  296 	inc	sp
      00007D 33               [ 8]  297 	inc	sp
      00007E 5D               [ 4]  298 	ld	e, l
      00007F 54               [ 4]  299 	ld	d, h
      000080 D5               [16]  300 	push	de
      000081 F8 06            [12]  301 	ldhl	sp,	#6
      000083 2A               [ 8]  302 	ld	a,	(hl+)
      000084 66               [ 8]  303 	ld	h, (hl)
      000085 6F               [ 4]  304 	ld	l, a
      000086 19               [ 8]  305 	add	hl, de
                                    306 ;	spillPairReg hl
                                    307 ;	spillPairReg hl
      000087 5D               [ 4]  308 	ld	e,l
      000088 54               [ 4]  309 	ld	d,h
                                    310 ;	spillPairReg hl
                                    311 ;	spillPairReg hl
      000089 23               [ 8]  312 	inc	hl
      00008A 7E               [ 8]  313 	ld	a, (hl)
      00008B F8 03            [12]  314 	ldhl	sp,	#3
      00008D 77               [ 8]  315 	ld	(hl), a
                           00008E   316 	C$main.c$120$2_0$140	= .
                                    317 	.globl	C$main.c$120$2_0$140
                                    318 ;main.c:120: pieces[i].isKing = true;
      00008E 13               [ 8]  319 	inc	de
      00008F 13               [ 8]  320 	inc	de
                           000090   321 	C$main.c$119$3_0$141	= .
                                    322 	.globl	C$main.c$119$3_0$141
                                    323 ;main.c:119: if (pieces[i].y == 28 && player == WHITE_PLAYER) {
      000090 F8 03            [12]  324 	ldhl	sp,	#3
      000092 7E               [ 8]  325 	ld	a, (hl)
      000093 D6 1C            [ 8]  326 	sub	a, #0x1c
      000095 20 0B            [12]  327 	jr	NZ, 00105$
      000097 F8 02            [12]  328 	ldhl	sp,	#2
      000099 7E               [ 8]  329 	ld	a, (hl)
      00009A B7               [ 4]  330 	or	a, a
      00009B 28 05            [12]  331 	jr	Z, 00105$
                           00009D   332 	C$main.c$120$4_0$142	= .
                                    333 	.globl	C$main.c$120$4_0$142
                                    334 ;main.c:120: pieces[i].isKing = true;
      00009D 3E 01            [ 8]  335 	ld	a, #0x01
      00009F 12               [ 8]  336 	ld	(de), a
      0000A0 18 10            [12]  337 	jr	00111$
      0000A2                        338 00105$:
                           0000A2   339 	C$main.c$121$3_0$141	= .
                                    340 	.globl	C$main.c$121$3_0$141
                                    341 ;main.c:121: } else if (pieces[i].y == 140 && player == BLACK_PLAYER) {
      0000A2 F8 03            [12]  342 	ldhl	sp,	#3
      0000A4 7E               [ 8]  343 	ld	a, (hl)
      0000A5 D6 8C            [ 8]  344 	sub	a, #0x8c
      0000A7 20 09            [12]  345 	jr	NZ, 00111$
      0000A9 F8 0A            [12]  346 	ldhl	sp,	#10
      0000AB 7E               [ 8]  347 	ld	a, (hl)
      0000AC B7               [ 4]  348 	or	a, a
      0000AD 20 03            [12]  349 	jr	NZ, 00111$
                           0000AF   350 	C$main.c$122$4_0$143	= .
                                    351 	.globl	C$main.c$122$4_0$143
                                    352 ;main.c:122: pieces[i].isKing = true;
      0000AF 3E 01            [ 8]  353 	ld	a, #0x01
      0000B1 12               [ 8]  354 	ld	(de), a
      0000B2                        355 00111$:
                           0000B2   356 	C$main.c$118$2_0$140	= .
                                    357 	.globl	C$main.c$118$2_0$140
                                    358 ;main.c:118: for (int i = 0; i < numPieces; i++) {
      0000B2 03               [ 8]  359 	inc	bc
      0000B3 18 A7            [12]  360 	jr	00110$
      0000B5                        361 00112$:
                           0000B5   362 	C$main.c$125$2_0$140	= .
                                    363 	.globl	C$main.c$125$2_0$140
                                    364 ;main.c:125: }
      0000B5 E8 08            [16]  365 	add	sp, #8
      0000B7 E1               [12]  366 	pop	hl
      0000B8 33               [ 8]  367 	inc	sp
      0000B9 E9               [ 4]  368 	jp	(hl)
                           0000BA   369 	G$dpad$0$0	= .
                                    370 	.globl	G$dpad$0$0
                           0000BA   371 	C$main.c$126$2_0$144	= .
                                    372 	.globl	C$main.c$126$2_0$144
                                    373 ;main.c:126: void dpad() {
                                    374 ;	---------------------------------
                                    375 ; Function dpad
                                    376 ; ---------------------------------
      0000BA                        377 _dpad::
                           0000BA   378 	C$main.c$127$1_0$144	= .
                                    379 	.globl	C$main.c$127$1_0$144
                                    380 ;main.c:127: if (joypad_input & J_RIGHT) {
      0000BA 21r00r00         [12]  381 	ld	hl, #_joypad_input
      0000BD 4E               [ 8]  382 	ld	c, (hl)
      0000BE CB 41            [ 8]  383 	bit	0, c
      0000C0 28 07            [12]  384 	jr	Z, 00102$
                           0000C2   385 	C$main.c$128$2_0$145	= .
                                    386 	.globl	C$main.c$128$2_0$145
                                    387 ;main.c:128: cursorx = cursorx + SQUARE_SIZE;
      0000C2 21r05r00         [12]  388 	ld	hl, #_cursorx
      0000C5 7E               [ 8]  389 	ld	a, (hl)
      0000C6 C6 10            [ 8]  390 	add	a, #0x10
      0000C8 77               [ 8]  391 	ld	(hl), a
      0000C9                        392 00102$:
                           0000C9   393 	C$main.c$130$1_0$144	= .
                                    394 	.globl	C$main.c$130$1_0$144
                                    395 ;main.c:130: if (joypad_input & J_LEFT) {
      0000C9 CB 49            [ 8]  396 	bit	1, c
      0000CB 28 07            [12]  397 	jr	Z, 00104$
                           0000CD   398 	C$main.c$131$2_0$146	= .
                                    399 	.globl	C$main.c$131$2_0$146
                                    400 ;main.c:131: cursorx = cursorx - SQUARE_SIZE;
      0000CD 21r05r00         [12]  401 	ld	hl, #_cursorx
      0000D0 7E               [ 8]  402 	ld	a, (hl)
      0000D1 C6 F0            [ 8]  403 	add	a, #0xf0
      0000D3 77               [ 8]  404 	ld	(hl), a
      0000D4                        405 00104$:
                           0000D4   406 	C$main.c$133$1_0$144	= .
                                    407 	.globl	C$main.c$133$1_0$144
                                    408 ;main.c:133: if (joypad_input & J_UP) {
      0000D4 CB 51            [ 8]  409 	bit	2, c
      0000D6 28 07            [12]  410 	jr	Z, 00106$
                           0000D8   411 	C$main.c$134$2_0$147	= .
                                    412 	.globl	C$main.c$134$2_0$147
                                    413 ;main.c:134: cursory = cursory - SQUARE_SIZE;
      0000D8 21r06r00         [12]  414 	ld	hl, #_cursory
      0000DB 7E               [ 8]  415 	ld	a, (hl)
      0000DC C6 F0            [ 8]  416 	add	a, #0xf0
      0000DE 77               [ 8]  417 	ld	(hl), a
      0000DF                        418 00106$:
                           0000DF   419 	C$main.c$136$1_0$144	= .
                                    420 	.globl	C$main.c$136$1_0$144
                                    421 ;main.c:136: if (joypad_input & J_DOWN) {
      0000DF CB 59            [ 8]  422 	bit	3, c
      0000E1 CAr00r00         [16]  423 	jp	Z,_moveSquare
                           0000E4   424 	C$main.c$137$2_0$148	= .
                                    425 	.globl	C$main.c$137$2_0$148
                                    426 ;main.c:137: cursory = cursory + SQUARE_SIZE;
      0000E4 21r06r00         [12]  427 	ld	hl, #_cursory
      0000E7 7E               [ 8]  428 	ld	a, (hl)
      0000E8 C6 10            [ 8]  429 	add	a, #0x10
      0000EA 77               [ 8]  430 	ld	(hl), a
                           0000EB   431 	C$main.c$139$1_0$144	= .
                                    432 	.globl	C$main.c$139$1_0$144
                                    433 ;main.c:139: moveSquare();
                           0000EB   434 	C$main.c$140$1_0$144	= .
                                    435 	.globl	C$main.c$140$1_0$144
                                    436 ;main.c:140: }
                           0000EB   437 	C$main.c$140$1_0$144	= .
                                    438 	.globl	C$main.c$140$1_0$144
                           0000EB   439 	XG$dpad$0$0	= .
                                    440 	.globl	XG$dpad$0$0
      0000EB C3r00r00         [16]  441 	jp	_moveSquare
                           0000EE   442 	G$font$0$0	= .
                                    443 	.globl	G$font$0$0
                           0000EE   444 	C$main.c$141$1_0$149	= .
                                    445 	.globl	C$main.c$141$1_0$149
                                    446 ;main.c:141: void font() {
                                    447 ;	---------------------------------
                                    448 ; Function font
                                    449 ; ---------------------------------
      0000EE                        450 _font::
                           0000EE   451 	C$main.c$143$1_0$149	= .
                                    452 	.globl	C$main.c$143$1_0$149
                                    453 ;main.c:143: font_init();
      0000EE CDr00r00         [24]  454 	call	_font_init
                           0000F1   455 	C$main.c$144$1_0$149	= .
                                    456 	.globl	C$main.c$144$1_0$149
                                    457 ;main.c:144: min_font = font_load(font_ibm_fixed);
      0000F1 11r00r00         [12]  458 	ld	de, #_font_ibm_fixed
      0000F4 D5               [16]  459 	push	de
      0000F5 CDr00r00         [24]  460 	call	_font_load
      0000F8 E1               [12]  461 	pop	hl
                           0000F9   462 	C$main.c$145$1_0$149	= .
                                    463 	.globl	C$main.c$145$1_0$149
                                    464 ;main.c:145: font_set(min_font);
      0000F9 D5               [16]  465 	push	de
      0000FA CDr00r00         [24]  466 	call	_font_set
      0000FD E1               [12]  467 	pop	hl
                           0000FE   468 	C$main.c$146$1_0$149	= .
                                    469 	.globl	C$main.c$146$1_0$149
                                    470 ;main.c:146: }
                           0000FE   471 	C$main.c$146$1_0$149	= .
                                    472 	.globl	C$main.c$146$1_0$149
                           0000FE   473 	XG$font$0$0	= .
                                    474 	.globl	XG$font$0$0
      0000FE C9               [16]  475 	ret
                           0000FF   476 	G$printTurn$0$0	= .
                                    477 	.globl	G$printTurn$0$0
                           0000FF   478 	C$main.c$147$1_0$150	= .
                                    479 	.globl	C$main.c$147$1_0$150
                                    480 ;main.c:147: void printTurn() {
                                    481 ;	---------------------------------
                                    482 ; Function printTurn
                                    483 ; ---------------------------------
      0000FF                        484 _printTurn::
                           0000FF   485 	C$main.c$148$1_0$150	= .
                                    486 	.globl	C$main.c$148$1_0$150
                                    487 ;main.c:148: if (currentPlayer == BLACK_PLAYER){
      0000FF FAr07r00         [16]  488 	ld	a, (#_currentPlayer)
      000102 B7               [ 4]  489 	or	a, a
      000103 20 13            [12]  490 	jr	NZ, 00102$
                           000105   491 	C$main.c$149$2_0$151	= .
                                    492 	.globl	C$main.c$149$2_0$151
                                    493 ;main.c:149: set_win_tiles(2, 0, 16, 1, currentPlayerBlackText);
      000105 11r03r02         [12]  494 	ld	de, #_currentPlayerBlackText
      000108 D5               [16]  495 	push	de
      000109 21 10 01         [12]  496 	ld	hl, #0x110
      00010C E5               [16]  497 	push	hl
      00010D 21 02 00         [12]  498 	ld	hl, #0x02
      000110 E5               [16]  499 	push	hl
      000111 CDr00r00         [24]  500 	call	_set_win_tiles
      000114 E8 06            [16]  501 	add	sp, #6
      000116 18 11            [12]  502 	jr	00103$
      000118                        503 00102$:
                           000118   504 	C$main.c$151$2_0$152	= .
                                    505 	.globl	C$main.c$151$2_0$152
                                    506 ;main.c:151: set_win_tiles(2, 0, 16, 1, currentPlayerWhiteText);
      000118 11r13r02         [12]  507 	ld	de, #_currentPlayerWhiteText
      00011B D5               [16]  508 	push	de
      00011C 21 10 01         [12]  509 	ld	hl, #0x110
      00011F E5               [16]  510 	push	hl
      000120 21 02 00         [12]  511 	ld	hl, #0x02
      000123 E5               [16]  512 	push	hl
      000124 CDr00r00         [24]  513 	call	_set_win_tiles
      000127 E8 06            [16]  514 	add	sp, #6
      000129                        515 00103$:
                                    516 ;c:/gbdk/include/gb/gb.h:1468: WX_REG=x, WY_REG=y;
      000129 3E 07            [ 8]  517 	ld	a, #0x07
      00012B E0r00            [12]  518 	ldh	(_WX_REG + 0), a
      00012D 3E 88            [ 8]  519 	ld	a, #0x88
      00012F E0r00            [12]  520 	ldh	(_WY_REG + 0), a
                           000131   521 	C$main.c$153$3_0$150	= .
                                    522 	.globl	C$main.c$153$3_0$150
                                    523 ;main.c:153: move_win(7, 136);
                           000131   524 	C$main.c$154$3_0$150	= .
                                    525 	.globl	C$main.c$154$3_0$150
                                    526 ;main.c:154: }
                           000131   527 	C$main.c$154$3_0$150	= .
                                    528 	.globl	C$main.c$154$3_0$150
                           000131   529 	XG$printTurn$0$0	= .
                                    530 	.globl	XG$printTurn$0$0
      000131 C9               [16]  531 	ret
                           000132   532 	G$printbkg$0$0	= .
                                    533 	.globl	G$printbkg$0$0
                           000132   534 	C$main.c$155$3_0$156	= .
                                    535 	.globl	C$main.c$155$3_0$156
                                    536 ;main.c:155: void printbkg() {
                                    537 ;	---------------------------------
                                    538 ; Function printbkg
                                    539 ; ---------------------------------
      000132                        540 _printbkg::
                           000132   541 	C$main.c$156$1_0$156	= .
                                    542 	.globl	C$main.c$156$1_0$156
                                    543 ;main.c:156: set_bkg_data(1, 1, tile1);
      000132 11r0Br00         [12]  544 	ld	de, #_tile1
      000135 D5               [16]  545 	push	de
      000136 21 01 01         [12]  546 	ld	hl, #0x101
      000139 E5               [16]  547 	push	hl
      00013A CDr00r00         [24]  548 	call	_set_bkg_data
      00013D E8 04            [16]  549 	add	sp, #4
                           00013F   550 	C$main.c$157$1_0$156	= .
                                    551 	.globl	C$main.c$157$1_0$156
                                    552 ;main.c:157: set_bkg_data(2, 1, tile2);
      00013F 11r1Br00         [12]  553 	ld	de, #_tile2
      000142 D5               [16]  554 	push	de
      000143 21 02 01         [12]  555 	ld	hl, #0x102
      000146 E5               [16]  556 	push	hl
      000147 CDr00r00         [24]  557 	call	_set_bkg_data
      00014A E8 04            [16]  558 	add	sp, #4
                           00014C   559 	C$main.c$158$1_0$156	= .
                                    560 	.globl	C$main.c$158$1_0$156
                                    561 ;main.c:158: set_bkg_data(3, 1, tile3);
      00014C 11r2Br00         [12]  562 	ld	de, #_tile3
      00014F D5               [16]  563 	push	de
      000150 21 03 01         [12]  564 	ld	hl, #0x103
      000153 E5               [16]  565 	push	hl
      000154 CDr00r00         [24]  566 	call	_set_bkg_data
      000157 E8 04            [16]  567 	add	sp, #4
                           000159   568 	C$main.c$159$1_0$156	= .
                                    569 	.globl	C$main.c$159$1_0$156
                                    570 ;main.c:159: set_bkg_tiles(0, 0, 20, 18, map);
      000159 11r3Br00         [12]  571 	ld	de, #_map
      00015C D5               [16]  572 	push	de
      00015D 21 14 12         [12]  573 	ld	hl, #0x1214
      000160 E5               [16]  574 	push	hl
      000161 AF               [ 4]  575 	xor	a, a
      000162 0F               [ 4]  576 	rrca
      000163 F5               [16]  577 	push	af
      000164 CDr00r00         [24]  578 	call	_set_bkg_tiles
      000167 E8 06            [16]  579 	add	sp, #6
                           000169   580 	C$main.c$160$1_0$156	= .
                                    581 	.globl	C$main.c$160$1_0$156
                                    582 ;main.c:160: }
                           000169   583 	C$main.c$160$1_0$156	= .
                                    584 	.globl	C$main.c$160$1_0$156
                           000169   585 	XG$printbkg$0$0	= .
                                    586 	.globl	XG$printbkg$0$0
      000169 C9               [16]  587 	ret
                           00016A   588 	G$printSquare$0$0	= .
                                    589 	.globl	G$printSquare$0$0
                           00016A   590 	C$main.c$161$1_0$157	= .
                                    591 	.globl	C$main.c$161$1_0$157
                                    592 ;main.c:161: void printSquare() {
                                    593 ;	---------------------------------
                                    594 ; Function printSquare
                                    595 ; ---------------------------------
      00016A                        596 _printSquare::
                           00016A   597 	C$main.c$162$1_0$157	= .
                                    598 	.globl	C$main.c$162$1_0$157
                                    599 ;main.c:162: set_sprite_data(0, 1, squareTL);
      00016A 11rA3r01         [12]  600 	ld	de, #_squareTL
      00016D D5               [16]  601 	push	de
      00016E AF               [ 4]  602 	xor	a, a
      00016F 3C               [ 4]  603 	inc	a
      000170 F5               [16]  604 	push	af
      000171 CDr00r00         [24]  605 	call	_set_sprite_data
      000174 E8 04            [16]  606 	add	sp, #4
                           000176   607 	C$main.c$163$1_0$157	= .
                                    608 	.globl	C$main.c$163$1_0$157
                                    609 ;main.c:163: set_sprite_data(1, 1, squareTR);
      000176 11rB3r01         [12]  610 	ld	de, #_squareTR
      000179 D5               [16]  611 	push	de
      00017A 21 01 01         [12]  612 	ld	hl, #0x101
      00017D E5               [16]  613 	push	hl
      00017E CDr00r00         [24]  614 	call	_set_sprite_data
      000181 E8 04            [16]  615 	add	sp, #4
                           000183   616 	C$main.c$164$1_0$157	= .
                                    617 	.globl	C$main.c$164$1_0$157
                                    618 ;main.c:164: set_sprite_data(2, 1, squareBL);
      000183 11rC3r01         [12]  619 	ld	de, #_squareBL
      000186 D5               [16]  620 	push	de
      000187 21 02 01         [12]  621 	ld	hl, #0x102
      00018A E5               [16]  622 	push	hl
      00018B CDr00r00         [24]  623 	call	_set_sprite_data
      00018E E8 04            [16]  624 	add	sp, #4
                           000190   625 	C$main.c$165$1_0$157	= .
                                    626 	.globl	C$main.c$165$1_0$157
                                    627 ;main.c:165: set_sprite_data(3, 1, squareBR);
      000190 11rD3r01         [12]  628 	ld	de, #_squareBR
      000193 D5               [16]  629 	push	de
      000194 3E 01            [ 8]  630 	ld	a, #0x01
      000196 F5               [16]  631 	push	af
      000197 33               [ 8]  632 	inc	sp
      000198 3E 03            [ 8]  633 	ld	a, #0x03
      00019A F5               [16]  634 	push	af
      00019B 33               [ 8]  635 	inc	sp
      00019C CDr00r00         [24]  636 	call	_set_sprite_data
      00019F E8 04            [16]  637 	add	sp, #4
                                    638 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      0001A1 21r02r00         [12]  639 	ld	hl, #(_shadow_OAM + 2)
      0001A4 36 00            [12]  640 	ld	(hl), #0x00
      0001A6 21r06r00         [12]  641 	ld	hl, #(_shadow_OAM + 6)
      0001A9 36 01            [12]  642 	ld	(hl), #0x01
      0001AB 21r0Ar00         [12]  643 	ld	hl, #(_shadow_OAM + 10)
      0001AE 36 02            [12]  644 	ld	(hl), #0x02
      0001B0 21r0Er00         [12]  645 	ld	hl, #(_shadow_OAM + 14)
      0001B3 36 03            [12]  646 	ld	(hl), #0x03
                           0001B5   647 	C$main.c$170$1_0$157	= .
                                    648 	.globl	C$main.c$170$1_0$157
                                    649 ;main.c:170: moveSquare();
                           0001B5   650 	C$main.c$171$1_0$157	= .
                                    651 	.globl	C$main.c$171$1_0$157
                                    652 ;main.c:171: }
                           0001B5   653 	C$main.c$171$1_0$157	= .
                                    654 	.globl	C$main.c$171$1_0$157
                           0001B5   655 	XG$printSquare$0$0	= .
                                    656 	.globl	XG$printSquare$0$0
      0001B5 C3r00r00         [16]  657 	jp	_moveSquare
                           0001B8   658 	G$printBlack$0$0	= .
                                    659 	.globl	G$printBlack$0$0
                           0001B8   660 	C$main.c$172$1_0$170	= .
                                    661 	.globl	C$main.c$172$1_0$170
                                    662 ;main.c:172: void printBlack() {
                                    663 ;	---------------------------------
                                    664 ; Function printBlack
                                    665 ; ---------------------------------
      0001B8                        666 _printBlack::
      0001B8 E8 FA            [16]  667 	add	sp, #-6
                           0001BA   668 	C$main.c$173$1_0$170	= .
                                    669 	.globl	C$main.c$173$1_0$170
                                    670 ;main.c:173: set_sprite_data(4, 12, black_piece);
      0001BA 11rE3r01         [12]  671 	ld	de, #_black_piece
      0001BD D5               [16]  672 	push	de
      0001BE 21 04 0C         [12]  673 	ld	hl, #0xc04
      0001C1 E5               [16]  674 	push	hl
      0001C2 CDr00r00         [24]  675 	call	_set_sprite_data
      0001C5 E8 04            [16]  676 	add	sp, #4
                           0001C7   677 	C$main.c$174$1_0$170	= .
                                    678 	.globl	C$main.c$174$1_0$170
                                    679 ;main.c:174: set_sprite_data(8, 12, blackKing);
      0001C7 11r23r02         [12]  680 	ld	de, #_blackKing
      0001CA D5               [16]  681 	push	de
      0001CB 21 08 0C         [12]  682 	ld	hl, #0xc08
      0001CE E5               [16]  683 	push	hl
      0001CF CDr00r00         [24]  684 	call	_set_sprite_data
      0001D2 E8 04            [16]  685 	add	sp, #4
                           0001D4   686 	C$main.c$176$3_0$172	= .
                                    687 	.globl	C$main.c$176$3_0$172
                                    688 ;main.c:176: for (int i = 0; i < 12; i++){
      0001D4 AF               [ 4]  689 	xor	a, a
      0001D5 F8 04            [12]  690 	ldhl	sp,	#4
      0001D7 22               [ 8]  691 	ld	(hl+), a
      0001D8 77               [ 8]  692 	ld	(hl), a
      0001D9                        693 00109$:
      0001D9 F8 04            [12]  694 	ldhl	sp,	#4
      0001DB 2A               [ 8]  695 	ld	a, (hl+)
      0001DC D6 0C            [ 8]  696 	sub	a, #0x0c
      0001DE 7E               [ 8]  697 	ld	a, (hl)
      0001DF DE 00            [ 8]  698 	sbc	a, #0x00
      0001E1 56               [ 8]  699 	ld	d, (hl)
      0001E2 3E 00            [ 8]  700 	ld	a, #0x00
      0001E4 CB 7F            [ 8]  701 	bit	7,a
      0001E6 28 07            [12]  702 	jr	Z, 00129$
      0001E8 CB 7A            [ 8]  703 	bit	7, d
      0001EA 20 08            [12]  704 	jr	NZ, 00130$
      0001EC BF               [ 4]  705 	cp	a, a
      0001ED 18 05            [12]  706 	jr	00130$
      0001EF                        707 00129$:
      0001EF CB 7A            [ 8]  708 	bit	7, d
      0001F1 28 01            [12]  709 	jr	Z, 00130$
      0001F3 37               [ 4]  710 	scf
      0001F4                        711 00130$:
      0001F4 D2rAAr02         [16]  712 	jp	NC, 00111$
                           0001F7   713 	C$main.c$177$3_0$172	= .
                                    714 	.globl	C$main.c$177$3_0$172
                                    715 ;main.c:177: if (blackPieces[i].isKing) {
      0001F7 F8 04            [12]  716 	ldhl	sp,#4
      0001F9 2A               [ 8]  717 	ld	a, (hl+)
      0001FA 4F               [ 4]  718 	ld	c, a
      0001FB 46               [ 8]  719 	ld	b, (hl)
      0001FC 69               [ 4]  720 	ld	l, c
      0001FD 60               [ 4]  721 	ld	h, b
      0001FE 29               [ 8]  722 	add	hl, hl
      0001FF 09               [ 8]  723 	add	hl, bc
      000200 11r43r02         [12]  724 	ld	de, #_blackPieces
      000203 19               [ 8]  725 	add	hl, de
      000204 23               [ 8]  726 	inc	hl
      000205 23               [ 8]  727 	inc	hl
      000206 7E               [ 8]  728 	ld	a, (hl)
      000207 F8 02            [12]  729 	ldhl	sp,	#2
      000209 77               [ 8]  730 	ld	(hl), a
                           00020A   731 	C$main.c$178$2_0$170	= .
                                    732 	.globl	C$main.c$178$2_0$170
                                    733 ;main.c:178: set_sprite_tile(i + 4, 8); // Use the black king sprite tile
      00020A F8 04            [12]  734 	ldhl	sp,	#4
      00020C 3A               [ 8]  735 	ld	a, (hl-)
      00020D C6 04            [ 8]  736 	add	a, #0x04
                           00020F   737 	C$main.c$177$3_0$172	= .
                                    738 	.globl	C$main.c$177$3_0$172
                                    739 ;main.c:177: if (blackPieces[i].isKing) {
      00020F 32               [ 8]  740 	ld	(hl-), a
      000210 CB 46            [12]  741 	bit	0, (hl)
      000212 28 33            [12]  742 	jr	Z, 00102$
                                    743 ;main.c:178: set_sprite_tile(i + 4, 8); // Use the black king sprite tile
                                    744 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      000214 23               [ 8]  745 	inc	hl
      000215 3A               [ 8]  746 	ld	a, (hl-)
      000216 22               [ 8]  747 	ld	(hl+), a
      000217 36 00            [12]  748 	ld	(hl), #0x00
      000219 3E 02            [ 8]  749 	ld	a, #0x02
      00021B                        750 00131$:
      00021B F8 02            [12]  751 	ldhl	sp,	#2
      00021D CB 26            [16]  752 	sla	(hl)
      00021F 23               [ 8]  753 	inc	hl
      000220 CB 16            [16]  754 	rl	(hl)
      000222 3D               [ 4]  755 	dec	a
      000223 20 F6            [12]  756 	jr	NZ, 00131$
      000225 2B               [ 8]  757 	dec	hl
      000226 2A               [ 8]  758 	ld	a, (hl+)
      000227 5F               [ 4]  759 	ld	e, a
      000228 56               [ 8]  760 	ld	d, (hl)
      000229 21r00r00         [12]  761 	ld	hl, #_shadow_OAM
      00022C 19               [ 8]  762 	add	hl, de
      00022D 33               [ 8]  763 	inc	sp
      00022E 33               [ 8]  764 	inc	sp
      00022F 5D               [ 4]  765 	ld	e, l
      000230 54               [ 4]  766 	ld	d, h
      000231 D5               [16]  767 	push	de
      000232 21 02 00         [12]  768 	ld	hl, #0x0002
      000235 19               [ 8]  769 	add	hl, de
      000236 E5               [16]  770 	push	hl
      000237 7D               [ 4]  771 	ld	a, l
      000238 F8 04            [12]  772 	ldhl	sp,	#4
      00023A 77               [ 8]  773 	ld	(hl), a
      00023B E1               [12]  774 	pop	hl
      00023C 7C               [ 4]  775 	ld	a, h
      00023D F8 03            [12]  776 	ldhl	sp,	#3
      00023F 32               [ 8]  777 	ld	(hl-), a
      000240 2A               [ 8]  778 	ld	a,	(hl+)
      000241 66               [ 8]  779 	ld	h, (hl)
      000242 6F               [ 4]  780 	ld	l, a
      000243 36 08            [12]  781 	ld	(hl), #0x08
                           000245   782 	C$main.c$178$3_0$172	= .
                                    783 	.globl	C$main.c$178$3_0$172
                                    784 ;main.c:178: set_sprite_tile(i + 4, 8); // Use the black king sprite tile
      000245 18 32            [12]  785 	jr	00103$
      000247                        786 00102$:
                                    787 ;main.c:180: set_sprite_tile(i + 4, 4); // Use the black regular piece sprite tile
                                    788 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      000247 F8 03            [12]  789 	ldhl	sp,	#3
      000249 3A               [ 8]  790 	ld	a, (hl-)
      00024A 22               [ 8]  791 	ld	(hl+), a
      00024B 36 00            [12]  792 	ld	(hl), #0x00
      00024D 3E 02            [ 8]  793 	ld	a, #0x02
      00024F                        794 00132$:
      00024F F8 02            [12]  795 	ldhl	sp,	#2
      000251 CB 26            [16]  796 	sla	(hl)
      000253 23               [ 8]  797 	inc	hl
      000254 CB 16            [16]  798 	rl	(hl)
      000256 3D               [ 4]  799 	dec	a
      000257 20 F6            [12]  800 	jr	NZ, 00132$
      000259 2B               [ 8]  801 	dec	hl
      00025A 2A               [ 8]  802 	ld	a, (hl+)
      00025B 5F               [ 4]  803 	ld	e, a
      00025C 56               [ 8]  804 	ld	d, (hl)
      00025D 21r00r00         [12]  805 	ld	hl, #_shadow_OAM
      000260 19               [ 8]  806 	add	hl, de
      000261 33               [ 8]  807 	inc	sp
      000262 33               [ 8]  808 	inc	sp
      000263 5D               [ 4]  809 	ld	e, l
      000264 54               [ 4]  810 	ld	d, h
      000265 D5               [16]  811 	push	de
      000266 21 02 00         [12]  812 	ld	hl, #0x0002
      000269 19               [ 8]  813 	add	hl, de
      00026A E5               [16]  814 	push	hl
      00026B 7D               [ 4]  815 	ld	a, l
      00026C F8 04            [12]  816 	ldhl	sp,	#4
      00026E 77               [ 8]  817 	ld	(hl), a
      00026F E1               [12]  818 	pop	hl
      000270 7C               [ 4]  819 	ld	a, h
      000271 F8 03            [12]  820 	ldhl	sp,	#3
      000273 32               [ 8]  821 	ld	(hl-), a
      000274 2A               [ 8]  822 	ld	a,	(hl+)
      000275 66               [ 8]  823 	ld	h, (hl)
      000276 6F               [ 4]  824 	ld	l, a
      000277 36 04            [12]  825 	ld	(hl), #0x04
                           000279   826 	C$main.c$180$3_0$172	= .
                                    827 	.globl	C$main.c$180$3_0$172
                                    828 ;main.c:180: set_sprite_tile(i + 4, 4); // Use the black regular piece sprite tile
      000279                        829 00103$:
                                    830 ;main.c:182: move_sprite(i + 4, blackPieces[i].x, blackPieces[i].y);
      000279 F8 04            [12]  831 	ldhl	sp,#4
      00027B 2A               [ 8]  832 	ld	a, (hl+)
      00027C 4F               [ 4]  833 	ld	c, a
      00027D 46               [ 8]  834 	ld	b, (hl)
      00027E 69               [ 4]  835 	ld	l, c
      00027F 60               [ 4]  836 	ld	h, b
      000280 29               [ 8]  837 	add	hl, hl
      000281 09               [ 8]  838 	add	hl, bc
      000282 11r43r02         [12]  839 	ld	de, #_blackPieces
      000285 19               [ 8]  840 	add	hl, de
      000286 4D               [ 4]  841 	ld	c, l
      000287 44               [ 4]  842 	ld	b, h
      000288 03               [ 8]  843 	inc	bc
      000289 0A               [ 8]  844 	ld	a, (bc)
      00028A 5F               [ 4]  845 	ld	e, a
      00028B 4E               [ 8]  846 	ld	c, (hl)
      00028C F8 04            [12]  847 	ldhl	sp,	#4
      00028E 7E               [ 8]  848 	ld	a, (hl)
      00028F C6 04            [ 8]  849 	add	a, #0x04
                                    850 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      000291 6F               [ 4]  851 	ld	l, a
                                    852 ;	spillPairReg hl
                                    853 ;	spillPairReg hl
      000292 26 00            [ 8]  854 	ld	h, #0x00
                                    855 ;	spillPairReg hl
                                    856 ;	spillPairReg hl
      000294 29               [ 8]  857 	add	hl, hl
      000295 29               [ 8]  858 	add	hl, hl
      000296 D5               [16]  859 	push	de
      000297 11r00r00         [12]  860 	ld	de, #_shadow_OAM
      00029A 19               [ 8]  861 	add	hl, de
      00029B D1               [12]  862 	pop	de
                                    863 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      00029C 7B               [ 4]  864 	ld	a, e
      00029D 22               [ 8]  865 	ld	(hl+), a
      00029E 71               [ 8]  866 	ld	(hl), c
                           00029F   867 	C$main.c$176$2_0$171	= .
                                    868 	.globl	C$main.c$176$2_0$171
                                    869 ;main.c:176: for (int i = 0; i < 12; i++){
      00029F F8 04            [12]  870 	ldhl	sp,	#4
      0002A1 34               [12]  871 	inc	(hl)
      0002A2 C2rD9r01         [16]  872 	jp	NZ,00109$
      0002A5 23               [ 8]  873 	inc	hl
      0002A6 34               [12]  874 	inc	(hl)
      0002A7 C3rD9r01         [16]  875 	jp	00109$
      0002AA                        876 00111$:
                           0002AA   877 	C$main.c$184$2_0$170	= .
                                    878 	.globl	C$main.c$184$2_0$170
                                    879 ;main.c:184: }
      0002AA E8 06            [16]  880 	add	sp, #6
                           0002AC   881 	C$main.c$184$2_0$170	= .
                                    882 	.globl	C$main.c$184$2_0$170
                           0002AC   883 	XG$printBlack$0$0	= .
                                    884 	.globl	XG$printBlack$0$0
      0002AC C9               [16]  885 	ret
                           0002AD   886 	G$printWhite$0$0	= .
                                    887 	.globl	G$printWhite$0$0
                           0002AD   888 	C$main.c$185$2_0$184	= .
                                    889 	.globl	C$main.c$185$2_0$184
                                    890 ;main.c:185: void printWhite() {
                                    891 ;	---------------------------------
                                    892 ; Function printWhite
                                    893 ; ---------------------------------
      0002AD                        894 _printWhite::
      0002AD E8 FA            [16]  895 	add	sp, #-6
                           0002AF   896 	C$main.c$186$1_0$184	= .
                                    897 	.globl	C$main.c$186$1_0$184
                                    898 ;main.c:186: set_sprite_data(5, 12, white_piece);
      0002AF 11rF3r01         [12]  899 	ld	de, #_white_piece
      0002B2 D5               [16]  900 	push	de
      0002B3 21 05 0C         [12]  901 	ld	hl, #0xc05
      0002B6 E5               [16]  902 	push	hl
      0002B7 CDr00r00         [24]  903 	call	_set_sprite_data
      0002BA E8 04            [16]  904 	add	sp, #4
                           0002BC   905 	C$main.c$187$1_0$184	= .
                                    906 	.globl	C$main.c$187$1_0$184
                                    907 ;main.c:187: set_sprite_data(20, 12, whiteKing);
      0002BC 11r33r02         [12]  908 	ld	de, #_whiteKing
      0002BF D5               [16]  909 	push	de
      0002C0 21 14 0C         [12]  910 	ld	hl, #0xc14
      0002C3 E5               [16]  911 	push	hl
      0002C4 CDr00r00         [24]  912 	call	_set_sprite_data
      0002C7 E8 04            [16]  913 	add	sp, #4
                           0002C9   914 	C$main.c$189$3_0$186	= .
                                    915 	.globl	C$main.c$189$3_0$186
                                    916 ;main.c:189: for (int i = 0; i < 12; i++){
      0002C9 AF               [ 4]  917 	xor	a, a
      0002CA F8 04            [12]  918 	ldhl	sp,	#4
      0002CC 22               [ 8]  919 	ld	(hl+), a
      0002CD 77               [ 8]  920 	ld	(hl), a
      0002CE                        921 00109$:
      0002CE F8 04            [12]  922 	ldhl	sp,	#4
      0002D0 2A               [ 8]  923 	ld	a, (hl+)
      0002D1 D6 0C            [ 8]  924 	sub	a, #0x0c
      0002D3 7E               [ 8]  925 	ld	a, (hl)
      0002D4 DE 00            [ 8]  926 	sbc	a, #0x00
      0002D6 56               [ 8]  927 	ld	d, (hl)
      0002D7 3E 00            [ 8]  928 	ld	a, #0x00
      0002D9 CB 7F            [ 8]  929 	bit	7,a
      0002DB 28 07            [12]  930 	jr	Z, 00129$
      0002DD CB 7A            [ 8]  931 	bit	7, d
      0002DF 20 08            [12]  932 	jr	NZ, 00130$
      0002E1 BF               [ 4]  933 	cp	a, a
      0002E2 18 05            [12]  934 	jr	00130$
      0002E4                        935 00129$:
      0002E4 CB 7A            [ 8]  936 	bit	7, d
      0002E6 28 01            [12]  937 	jr	Z, 00130$
      0002E8 37               [ 4]  938 	scf
      0002E9                        939 00130$:
      0002E9 D2r9Fr03         [16]  940 	jp	NC, 00111$
                           0002EC   941 	C$main.c$190$3_0$186	= .
                                    942 	.globl	C$main.c$190$3_0$186
                                    943 ;main.c:190: if (whitePieces[i].isKing) {
      0002EC F8 04            [12]  944 	ldhl	sp,#4
      0002EE 2A               [ 8]  945 	ld	a, (hl+)
      0002EF 4F               [ 4]  946 	ld	c, a
      0002F0 46               [ 8]  947 	ld	b, (hl)
      0002F1 69               [ 4]  948 	ld	l, c
      0002F2 60               [ 4]  949 	ld	h, b
      0002F3 29               [ 8]  950 	add	hl, hl
      0002F4 09               [ 8]  951 	add	hl, bc
      0002F5 11r67r02         [12]  952 	ld	de, #_whitePieces
      0002F8 19               [ 8]  953 	add	hl, de
      0002F9 23               [ 8]  954 	inc	hl
      0002FA 23               [ 8]  955 	inc	hl
      0002FB 7E               [ 8]  956 	ld	a, (hl)
      0002FC F8 02            [12]  957 	ldhl	sp,	#2
      0002FE 77               [ 8]  958 	ld	(hl), a
                           0002FF   959 	C$main.c$191$2_0$184	= .
                                    960 	.globl	C$main.c$191$2_0$184
                                    961 ;main.c:191: set_sprite_tile(i + 16, 20); // Use the white king sprite tile
      0002FF F8 04            [12]  962 	ldhl	sp,	#4
      000301 3A               [ 8]  963 	ld	a, (hl-)
      000302 C6 10            [ 8]  964 	add	a, #0x10
                           000304   965 	C$main.c$190$3_0$186	= .
                                    966 	.globl	C$main.c$190$3_0$186
                                    967 ;main.c:190: if (whitePieces[i].isKing) {
      000304 32               [ 8]  968 	ld	(hl-), a
      000305 CB 46            [12]  969 	bit	0, (hl)
      000307 28 33            [12]  970 	jr	Z, 00102$
                                    971 ;main.c:191: set_sprite_tile(i + 16, 20); // Use the white king sprite tile
                                    972 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      000309 23               [ 8]  973 	inc	hl
      00030A 3A               [ 8]  974 	ld	a, (hl-)
      00030B 22               [ 8]  975 	ld	(hl+), a
      00030C 36 00            [12]  976 	ld	(hl), #0x00
      00030E 3E 02            [ 8]  977 	ld	a, #0x02
      000310                        978 00131$:
      000310 F8 02            [12]  979 	ldhl	sp,	#2
      000312 CB 26            [16]  980 	sla	(hl)
      000314 23               [ 8]  981 	inc	hl
      000315 CB 16            [16]  982 	rl	(hl)
      000317 3D               [ 4]  983 	dec	a
      000318 20 F6            [12]  984 	jr	NZ, 00131$
      00031A 2B               [ 8]  985 	dec	hl
      00031B 2A               [ 8]  986 	ld	a, (hl+)
      00031C 5F               [ 4]  987 	ld	e, a
      00031D 56               [ 8]  988 	ld	d, (hl)
      00031E 21r00r00         [12]  989 	ld	hl, #_shadow_OAM
      000321 19               [ 8]  990 	add	hl, de
      000322 33               [ 8]  991 	inc	sp
      000323 33               [ 8]  992 	inc	sp
      000324 5D               [ 4]  993 	ld	e, l
      000325 54               [ 4]  994 	ld	d, h
      000326 D5               [16]  995 	push	de
      000327 21 02 00         [12]  996 	ld	hl, #0x0002
      00032A 19               [ 8]  997 	add	hl, de
      00032B E5               [16]  998 	push	hl
      00032C 7D               [ 4]  999 	ld	a, l
      00032D F8 04            [12] 1000 	ldhl	sp,	#4
      00032F 77               [ 8] 1001 	ld	(hl), a
      000330 E1               [12] 1002 	pop	hl
      000331 7C               [ 4] 1003 	ld	a, h
      000332 F8 03            [12] 1004 	ldhl	sp,	#3
      000334 32               [ 8] 1005 	ld	(hl-), a
      000335 2A               [ 8] 1006 	ld	a,	(hl+)
      000336 66               [ 8] 1007 	ld	h, (hl)
      000337 6F               [ 4] 1008 	ld	l, a
      000338 36 14            [12] 1009 	ld	(hl), #0x14
                           00033A  1010 	C$main.c$191$3_0$186	= .
                                   1011 	.globl	C$main.c$191$3_0$186
                                   1012 ;main.c:191: set_sprite_tile(i + 16, 20); // Use the white king sprite tile
      00033A 18 32            [12] 1013 	jr	00103$
      00033C                       1014 00102$:
                                   1015 ;main.c:193: set_sprite_tile(i + 16, 5); // Use the white regular piece sprite tile
                                   1016 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      00033C F8 03            [12] 1017 	ldhl	sp,	#3
      00033E 3A               [ 8] 1018 	ld	a, (hl-)
      00033F 22               [ 8] 1019 	ld	(hl+), a
      000340 36 00            [12] 1020 	ld	(hl), #0x00
      000342 3E 02            [ 8] 1021 	ld	a, #0x02
      000344                       1022 00132$:
      000344 F8 02            [12] 1023 	ldhl	sp,	#2
      000346 CB 26            [16] 1024 	sla	(hl)
      000348 23               [ 8] 1025 	inc	hl
      000349 CB 16            [16] 1026 	rl	(hl)
      00034B 3D               [ 4] 1027 	dec	a
      00034C 20 F6            [12] 1028 	jr	NZ, 00132$
      00034E 2B               [ 8] 1029 	dec	hl
      00034F 2A               [ 8] 1030 	ld	a, (hl+)
      000350 5F               [ 4] 1031 	ld	e, a
      000351 56               [ 8] 1032 	ld	d, (hl)
      000352 21r00r00         [12] 1033 	ld	hl, #_shadow_OAM
      000355 19               [ 8] 1034 	add	hl, de
      000356 33               [ 8] 1035 	inc	sp
      000357 33               [ 8] 1036 	inc	sp
      000358 5D               [ 4] 1037 	ld	e, l
      000359 54               [ 4] 1038 	ld	d, h
      00035A D5               [16] 1039 	push	de
      00035B 21 02 00         [12] 1040 	ld	hl, #0x0002
      00035E 19               [ 8] 1041 	add	hl, de
      00035F E5               [16] 1042 	push	hl
      000360 7D               [ 4] 1043 	ld	a, l
      000361 F8 04            [12] 1044 	ldhl	sp,	#4
      000363 77               [ 8] 1045 	ld	(hl), a
      000364 E1               [12] 1046 	pop	hl
      000365 7C               [ 4] 1047 	ld	a, h
      000366 F8 03            [12] 1048 	ldhl	sp,	#3
      000368 32               [ 8] 1049 	ld	(hl-), a
      000369 2A               [ 8] 1050 	ld	a,	(hl+)
      00036A 66               [ 8] 1051 	ld	h, (hl)
      00036B 6F               [ 4] 1052 	ld	l, a
      00036C 36 05            [12] 1053 	ld	(hl), #0x05
                           00036E  1054 	C$main.c$193$3_0$186	= .
                                   1055 	.globl	C$main.c$193$3_0$186
                                   1056 ;main.c:193: set_sprite_tile(i + 16, 5); // Use the white regular piece sprite tile
      00036E                       1057 00103$:
                                   1058 ;main.c:195: move_sprite(i + 16, whitePieces[i].x, whitePieces[i].y);
      00036E F8 04            [12] 1059 	ldhl	sp,#4
      000370 2A               [ 8] 1060 	ld	a, (hl+)
      000371 4F               [ 4] 1061 	ld	c, a
      000372 46               [ 8] 1062 	ld	b, (hl)
      000373 69               [ 4] 1063 	ld	l, c
      000374 60               [ 4] 1064 	ld	h, b
      000375 29               [ 8] 1065 	add	hl, hl
      000376 09               [ 8] 1066 	add	hl, bc
      000377 11r67r02         [12] 1067 	ld	de, #_whitePieces
      00037A 19               [ 8] 1068 	add	hl, de
      00037B 4D               [ 4] 1069 	ld	c, l
      00037C 44               [ 4] 1070 	ld	b, h
      00037D 03               [ 8] 1071 	inc	bc
      00037E 0A               [ 8] 1072 	ld	a, (bc)
      00037F 5F               [ 4] 1073 	ld	e, a
      000380 4E               [ 8] 1074 	ld	c, (hl)
      000381 F8 04            [12] 1075 	ldhl	sp,	#4
      000383 7E               [ 8] 1076 	ld	a, (hl)
      000384 C6 10            [ 8] 1077 	add	a, #0x10
                                   1078 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      000386 6F               [ 4] 1079 	ld	l, a
                                   1080 ;	spillPairReg hl
                                   1081 ;	spillPairReg hl
      000387 26 00            [ 8] 1082 	ld	h, #0x00
                                   1083 ;	spillPairReg hl
                                   1084 ;	spillPairReg hl
      000389 29               [ 8] 1085 	add	hl, hl
      00038A 29               [ 8] 1086 	add	hl, hl
      00038B D5               [16] 1087 	push	de
      00038C 11r00r00         [12] 1088 	ld	de, #_shadow_OAM
      00038F 19               [ 8] 1089 	add	hl, de
      000390 D1               [12] 1090 	pop	de
                                   1091 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      000391 7B               [ 4] 1092 	ld	a, e
      000392 22               [ 8] 1093 	ld	(hl+), a
      000393 71               [ 8] 1094 	ld	(hl), c
                           000394  1095 	C$main.c$189$2_0$185	= .
                                   1096 	.globl	C$main.c$189$2_0$185
                                   1097 ;main.c:189: for (int i = 0; i < 12; i++){
      000394 F8 04            [12] 1098 	ldhl	sp,	#4
      000396 34               [12] 1099 	inc	(hl)
      000397 C2rCEr02         [16] 1100 	jp	NZ,00109$
      00039A 23               [ 8] 1101 	inc	hl
      00039B 34               [12] 1102 	inc	(hl)
      00039C C3rCEr02         [16] 1103 	jp	00109$
      00039F                       1104 00111$:
                           00039F  1105 	C$main.c$197$2_0$184	= .
                                   1106 	.globl	C$main.c$197$2_0$184
                                   1107 ;main.c:197: }
      00039F E8 06            [16] 1108 	add	sp, #6
                           0003A1  1109 	C$main.c$197$2_0$184	= .
                                   1110 	.globl	C$main.c$197$2_0$184
                           0003A1  1111 	XG$printWhite$0$0	= .
                                   1112 	.globl	XG$printWhite$0$0
      0003A1 C9               [16] 1113 	ret
                           0003A2  1114 	G$isMoveWithinBoard$0$0	= .
                                   1115 	.globl	G$isMoveWithinBoard$0$0
                           0003A2  1116 	C$main.c$198$2_0$199	= .
                                   1117 	.globl	C$main.c$198$2_0$199
                                   1118 ;main.c:198: bool isMoveWithinBoard(UINT8 x, UINT8 y) {
                                   1119 ;	---------------------------------
                                   1120 ; Function isMoveWithinBoard
                                   1121 ; ---------------------------------
      0003A2                       1122 _isMoveWithinBoard::
                           0003A2  1123 	C$main.c$199$1_0$199	= .
                                   1124 	.globl	C$main.c$199$1_0$199
                                   1125 ;main.c:199: return (x >= 20 && x <=148 && y >= 20 && y <= 148);
      0003A2 4F               [ 4] 1126 	ld	c, a
      0003A3 D6 14            [ 8] 1127 	sub	a, #0x14
      0003A5 38 0F            [12] 1128 	jr	C, 00103$
      0003A7 3E 94            [ 8] 1129 	ld	a, #0x94
      0003A9 91               [ 4] 1130 	sub	a, c
      0003AA 38 0A            [12] 1131 	jr	C, 00103$
      0003AC 7B               [ 4] 1132 	ld	a, e
      0003AD D6 14            [ 8] 1133 	sub	a, #0x14
      0003AF 38 05            [12] 1134 	jr	C, 00103$
      0003B1 3E 94            [ 8] 1135 	ld	a, #0x94
      0003B3 93               [ 4] 1136 	sub	a, e
      0003B4 30 02            [12] 1137 	jr	NC, 00104$
      0003B6                       1138 00103$:
      0003B6 AF               [ 4] 1139 	xor	a, a
      0003B7 C9               [16] 1140 	ret
      0003B8                       1141 00104$:
      0003B8 3E 01            [ 8] 1142 	ld	a, #0x01
                           0003BA  1143 	C$main.c$200$1_0$199	= .
                                   1144 	.globl	C$main.c$200$1_0$199
                                   1145 ;main.c:200: }
                           0003BA  1146 	C$main.c$200$1_0$199	= .
                                   1147 	.globl	C$main.c$200$1_0$199
                           0003BA  1148 	XG$isMoveWithinBoard$0$0	= .
                                   1149 	.globl	XG$isMoveWithinBoard$0$0
      0003BA C9               [16] 1150 	ret
                           0003BB  1151 	G$getCaptureIndex$0$0	= .
                                   1152 	.globl	G$getCaptureIndex$0$0
                           0003BB  1153 	C$main.c$201$1_0$201	= .
                                   1154 	.globl	C$main.c$201$1_0$201
                                   1155 ;main.c:201: int getCaptureIndex(UINT8 capturedX, UINT8 capturedY, Piece* opponentPieces, int numOpponentPieces) {
                                   1156 ;	---------------------------------
                                   1157 ; Function getCaptureIndex
                                   1158 ; ---------------------------------
      0003BB                       1159 _getCaptureIndex::
      0003BB E8 F9            [16] 1160 	add	sp, #-7
      0003BD F8 06            [12] 1161 	ldhl	sp,	#6
      0003BF 32               [ 8] 1162 	ld	(hl-), a
      0003C0 73               [ 8] 1163 	ld	(hl), e
                           0003C1  1164 	C$main.c$203$3_0$202	= .
                                   1165 	.globl	C$main.c$203$3_0$202
                                   1166 ;main.c:203: for (int i = 0; i < numOpponentPieces; i++) {
      0003C1 AF               [ 4] 1167 	xor	a, a
      0003C2 F8 02            [12] 1168 	ldhl	sp,	#2
      0003C4 22               [ 8] 1169 	ld	(hl+), a
      0003C5 77               [ 8] 1170 	ld	(hl), a
      0003C6 01 00 00         [12] 1171 	ld	bc, #0x0000
      0003C9                       1172 00106$:
      0003C9 F8 0B            [12] 1173 	ldhl	sp,	#11
      0003CB 79               [ 4] 1174 	ld	a, c
      0003CC 96               [ 8] 1175 	sub	a, (hl)
      0003CD 23               [ 8] 1176 	inc	hl
      0003CE 78               [ 4] 1177 	ld	a, b
      0003CF 9E               [ 8] 1178 	sbc	a, (hl)
      0003D0 78               [ 4] 1179 	ld	a, b
      0003D1 57               [ 4] 1180 	ld	d, a
      0003D2 5E               [ 8] 1181 	ld	e, (hl)
      0003D3 CB 7B            [ 8] 1182 	bit	7, e
      0003D5 28 07            [12] 1183 	jr	Z, 00130$
      0003D7 CB 7A            [ 8] 1184 	bit	7, d
      0003D9 20 08            [12] 1185 	jr	NZ, 00131$
      0003DB BF               [ 4] 1186 	cp	a, a
      0003DC 18 05            [12] 1187 	jr	00131$
      0003DE                       1188 00130$:
      0003DE CB 7A            [ 8] 1189 	bit	7, d
      0003E0 28 01            [12] 1190 	jr	Z, 00131$
      0003E2 37               [ 4] 1191 	scf
      0003E3                       1192 00131$:
      0003E3 30 33            [12] 1193 	jr	NC, 00104$
                           0003E5  1194 	C$main.c$204$3_0$203	= .
                                   1195 	.globl	C$main.c$204$3_0$203
                                   1196 ;main.c:204: UINT8 pieceX = opponentPieces[i].x;
      0003E5 69               [ 4] 1197 	ld	l, c
      0003E6 60               [ 4] 1198 	ld	h, b
      0003E7 29               [ 8] 1199 	add	hl, hl
      0003E8 09               [ 8] 1200 	add	hl, bc
      0003E9 33               [ 8] 1201 	inc	sp
      0003EA 33               [ 8] 1202 	inc	sp
      0003EB 5D               [ 4] 1203 	ld	e, l
      0003EC 54               [ 4] 1204 	ld	d, h
      0003ED D5               [16] 1205 	push	de
      0003EE F8 09            [12] 1206 	ldhl	sp,	#9
      0003F0 2A               [ 8] 1207 	ld	a,	(hl+)
      0003F1 66               [ 8] 1208 	ld	h, (hl)
      0003F2 6F               [ 4] 1209 	ld	l, a
      0003F3 19               [ 8] 1210 	add	hl, de
      0003F4 5D               [ 4] 1211 	ld	e, l
      0003F5 54               [ 4] 1212 	ld	d, h
      0003F6 1A               [ 8] 1213 	ld	a, (de)
      0003F7 F8 04            [12] 1214 	ldhl	sp,	#4
                           0003F9  1215 	C$main.c$205$3_0$203	= .
                                   1216 	.globl	C$main.c$205$3_0$203
                                   1217 ;main.c:205: UINT8 pieceY = opponentPieces[i].y;
                           0003F9  1218 	C$main.c$206$3_0$203	= .
                                   1219 	.globl	C$main.c$206$3_0$203
                                   1220 ;main.c:206: if (capturedX == pieceX && capturedY == pieceY) {
      0003F9 22               [ 8] 1221 	ld	(hl+), a
      0003FA 23               [ 8] 1222 	inc	hl
      0003FB 13               [ 8] 1223 	inc	de
      0003FC 1A               [ 8] 1224 	ld	a, (de)
      0003FD 5F               [ 4] 1225 	ld	e, a
      0003FE 3A               [ 8] 1226 	ld	a, (hl-)
      0003FF 2B               [ 8] 1227 	dec	hl
      000400 96               [ 8] 1228 	sub	a, (hl)
      000401 20 0D            [12] 1229 	jr	NZ, 00107$
      000403 F8 05            [12] 1230 	ldhl	sp,	#5
      000405 7E               [ 8] 1231 	ld	a, (hl)
      000406 93               [ 4] 1232 	sub	a, e
      000407 20 07            [12] 1233 	jr	NZ, 00107$
                           000409  1234 	C$main.c$208$4_0$204	= .
                                   1235 	.globl	C$main.c$208$4_0$204
                                   1236 ;main.c:208: return i;
      000409 F8 02            [12] 1237 	ldhl	sp,	#2
      00040B 4E               [ 8] 1238 	ld	c, (hl)
      00040C 23               [ 8] 1239 	inc	hl
      00040D 46               [ 8] 1240 	ld	b, (hl)
      00040E 18 0B            [12] 1241 	jr	00108$
      000410                       1242 00107$:
                           000410  1243 	C$main.c$203$2_0$202	= .
                                   1244 	.globl	C$main.c$203$2_0$202
                                   1245 ;main.c:203: for (int i = 0; i < numOpponentPieces; i++) {
      000410 03               [ 8] 1246 	inc	bc
      000411 F8 02            [12] 1247 	ldhl	sp,	#2
      000413 79               [ 4] 1248 	ld	a, c
      000414 22               [ 8] 1249 	ld	(hl+), a
      000415 70               [ 8] 1250 	ld	(hl), b
      000416 18 B1            [12] 1251 	jr	00106$
      000418                       1252 00104$:
                           000418  1253 	C$main.c$212$1_0$201	= .
                                   1254 	.globl	C$main.c$212$1_0$201
                                   1255 ;main.c:212: return -1;
      000418 01 FF FF         [12] 1256 	ld	bc, #0xffff
      00041B                       1257 00108$:
                           00041B  1258 	C$main.c$213$1_0$201	= .
                                   1259 	.globl	C$main.c$213$1_0$201
                                   1260 ;main.c:213: }
      00041B E8 07            [16] 1261 	add	sp, #7
      00041D E1               [12] 1262 	pop	hl
      00041E E8 04            [16] 1263 	add	sp, #4
      000420 E9               [ 4] 1264 	jp	(hl)
                           000421  1265 	G$isValidMove$0$0	= .
                                   1266 	.globl	G$isValidMove$0$0
                           000421  1267 	C$main.c$215$1_0$206	= .
                                   1268 	.globl	C$main.c$215$1_0$206
                                   1269 ;main.c:215: bool isValidMove(UINT8 cursorx, UINT8 cursory, UINT8 currentPlayer, int selectedCoords) {
                                   1270 ;	---------------------------------
                                   1271 ; Function isValidMove
                                   1272 ; ---------------------------------
      000421                       1273 _isValidMove::
      000421 E8 F5            [16] 1274 	add	sp, #-11
      000423 F8 0A            [12] 1275 	ldhl	sp,	#10
      000425 32               [ 8] 1276 	ld	(hl-), a
      000426 73               [ 8] 1277 	ld	(hl), e
                           000427  1278 	C$main.c$221$1_0$206	= .
                                   1279 	.globl	C$main.c$221$1_0$206
                                   1280 ;main.c:221: if (currentPlayer == BLACK_PLAYER) {
      000427 F8 0D            [12] 1281 	ldhl	sp,	#13
      000429 7E               [ 8] 1282 	ld	a, (hl)
      00042A B7               [ 4] 1283 	or	a, a
      00042B 20 0C            [12] 1284 	jr	NZ, 00102$
                           00042D  1285 	C$main.c$222$2_0$207	= .
                                   1286 	.globl	C$main.c$222$2_0$207
                                   1287 ;main.c:222: pieces = blackPieces;
      00042D 01r43r02         [12] 1288 	ld	bc, #_blackPieces+0
                           000430  1289 	C$main.c$224$2_0$207	= .
                                   1290 	.globl	C$main.c$224$2_0$207
                                   1291 ;main.c:224: numPieces = MAX_BLACK_PIECES;
      000430 F8 00            [12] 1292 	ldhl	sp,	#0
      000432 3E 0C            [ 8] 1293 	ld	a, #0x0c
      000434 22               [ 8] 1294 	ld	(hl+), a
      000435 AF               [ 4] 1295 	xor	a, a
      000436 77               [ 8] 1296 	ld	(hl), a
                           000437  1297 	C$main.c$225$1_0$206	= .
                                   1298 	.globl	C$main.c$225$1_0$206
                                   1299 ;main.c:225: numOpponentPieces = MAX_WHITE_PIECES;
      000437 18 0A            [12] 1300 	jr	00103$
      000439                       1301 00102$:
                           000439  1302 	C$main.c$227$2_0$208	= .
                                   1303 	.globl	C$main.c$227$2_0$208
                                   1304 ;main.c:227: pieces = whitePieces;
      000439 01r67r02         [12] 1305 	ld	bc, #_whitePieces
                           00043C  1306 	C$main.c$229$2_0$208	= .
                                   1307 	.globl	C$main.c$229$2_0$208
                                   1308 ;main.c:229: numPieces = MAX_WHITE_PIECES;
      00043C F8 00            [12] 1309 	ldhl	sp,	#0
      00043E 3E 0C            [ 8] 1310 	ld	a, #0x0c
      000440 22               [ 8] 1311 	ld	(hl+), a
      000441 AF               [ 4] 1312 	xor	a, a
      000442 77               [ 8] 1313 	ld	(hl), a
                           000443  1314 	C$main.c$230$1_0$206	= .
                                   1315 	.globl	C$main.c$230$1_0$206
                                   1316 ;main.c:230: numOpponentPieces = MAX_BLACK_PIECES;
      000443                       1317 00103$:
                           000443  1318 	C$main.c$233$1_1$209	= .
                                   1319 	.globl	C$main.c$233$1_1$209
                                   1320 ;main.c:233: int dx = cursorx - pieces[selectedCoords].x;
      000443 F8 0A            [12] 1321 	ldhl	sp,	#10
      000445 7E               [ 8] 1322 	ld	a, (hl)
      000446 F8 03            [12] 1323 	ldhl	sp,	#3
      000448 22               [ 8] 1324 	ld	(hl+), a
      000449 36 00            [12] 1325 	ld	(hl), #0x00
      00044B F8 0E            [12] 1326 	ldhl	sp,#14
      00044D 2A               [ 8] 1327 	ld	a, (hl+)
      00044E 5F               [ 4] 1328 	ld	e, a
      00044F 56               [ 8] 1329 	ld	d, (hl)
      000450 6B               [ 4] 1330 	ld	l, e
      000451 62               [ 4] 1331 	ld	h, d
      000452 29               [ 8] 1332 	add	hl, hl
      000453 19               [ 8] 1333 	add	hl, de
      000454 E5               [16] 1334 	push	hl
      000455 7D               [ 4] 1335 	ld	a, l
      000456 F8 07            [12] 1336 	ldhl	sp,	#7
      000458 77               [ 8] 1337 	ld	(hl), a
      000459 E1               [12] 1338 	pop	hl
      00045A 7C               [ 4] 1339 	ld	a, h
      00045B F8 06            [12] 1340 	ldhl	sp,	#6
      00045D 32               [ 8] 1341 	ld	(hl-), a
      00045E 2A               [ 8] 1342 	ld	a,	(hl+)
      00045F 66               [ 8] 1343 	ld	h, (hl)
      000460 6F               [ 4] 1344 	ld	l, a
      000461 09               [ 8] 1345 	add	hl, bc
      000462 E5               [16] 1346 	push	hl
      000463 7D               [ 4] 1347 	ld	a, l
      000464 F8 09            [12] 1348 	ldhl	sp,	#9
      000466 77               [ 8] 1349 	ld	(hl), a
      000467 E1               [12] 1350 	pop	hl
      000468 7C               [ 4] 1351 	ld	a, h
      000469 F8 08            [12] 1352 	ldhl	sp,	#8
      00046B 32               [ 8] 1353 	ld	(hl-), a
      00046C 2A               [ 8] 1354 	ld	a, (hl+)
      00046D 5F               [ 4] 1355 	ld	e, a
      00046E 56               [ 8] 1356 	ld	d, (hl)
      00046F 1A               [ 8] 1357 	ld	a, (de)
      000470 4F               [ 4] 1358 	ld	c, a
      000471 06 00            [ 8] 1359 	ld	b, #0x00
      000473 F8 03            [12] 1360 	ldhl	sp,#3
      000475 2A               [ 8] 1361 	ld	a, (hl+)
      000476 5F               [ 4] 1362 	ld	e, a
      000477 3A               [ 8] 1363 	ld	a, (hl-)
      000478 2B               [ 8] 1364 	dec	hl
      000479 57               [ 4] 1365 	ld	d, a
      00047A 7B               [ 4] 1366 	ld	a, e
      00047B 91               [ 4] 1367 	sub	a, c
      00047C 5F               [ 4] 1368 	ld	e, a
      00047D 7A               [ 4] 1369 	ld	a, d
      00047E 98               [ 4] 1370 	sbc	a, b
      00047F 73               [ 8] 1371 	ld	(hl), e
      000480 23               [ 8] 1372 	inc	hl
      000481 77               [ 8] 1373 	ld	(hl), a
                           000482  1374 	C$main.c$234$1_1$209	= .
                                   1375 	.globl	C$main.c$234$1_1$209
                                   1376 ;main.c:234: int dy = cursory - pieces[selectedCoords].y;
      000482 F8 09            [12] 1377 	ldhl	sp,	#9
      000484 3A               [ 8] 1378 	ld	a, (hl-)
      000485 2B               [ 8] 1379 	dec	hl
      000486 4F               [ 4] 1380 	ld	c, a
      000487 06 00            [ 8] 1381 	ld	b, #0x00
      000489 2A               [ 8] 1382 	ld	a, (hl+)
      00048A 5F               [ 4] 1383 	ld	e, a
      00048B 56               [ 8] 1384 	ld	d, (hl)
      00048C 13               [ 8] 1385 	inc	de
      00048D 1A               [ 8] 1386 	ld	a, (de)
      00048E 5F               [ 4] 1387 	ld	e, a
      00048F 16 00            [ 8] 1388 	ld	d, #0x00
      000491 79               [ 4] 1389 	ld	a, c
      000492 93               [ 4] 1390 	sub	a, e
      000493 4F               [ 4] 1391 	ld	c, a
      000494 78               [ 4] 1392 	ld	a, b
      000495 9A               [ 4] 1393 	sbc	a, d
      000496 F8 04            [12] 1394 	ldhl	sp,	#4
      000498 71               [ 8] 1395 	ld	(hl), c
      000499 23               [ 8] 1396 	inc	hl
      00049A 77               [ 8] 1397 	ld	(hl), a
                           00049B  1398 	C$main.c$236$1_1$209	= .
                                   1399 	.globl	C$main.c$236$1_1$209
                                   1400 ;main.c:236: if (!(isMoveWithinBoard(cursorx, cursory))) {
      00049B F8 09            [12] 1401 	ldhl	sp,	#9
      00049D 2A               [ 8] 1402 	ld	a, (hl+)
      00049E 5F               [ 4] 1403 	ld	e, a
      00049F 7E               [ 8] 1404 	ld	a, (hl)
      0004A0 CDrA2r03         [24] 1405 	call	_isMoveWithinBoard
      0004A3 4F               [ 4] 1406 	ld	c, a
      0004A4 CB 41            [ 8] 1407 	bit	0, c
      0004A6 20 04            [12] 1408 	jr	NZ, 00105$
                           0004A8  1409 	C$main.c$237$2_1$210	= .
                                   1410 	.globl	C$main.c$237$2_1$210
                                   1411 ;main.c:237: return false;
      0004A8 AF               [ 4] 1412 	xor	a, a
      0004A9 C3r02r06         [16] 1413 	jp	00131$
      0004AC                       1414 00105$:
                           0004AC  1415 	C$main.c$240$1_1$209	= .
                                   1416 	.globl	C$main.c$240$1_1$209
                                   1417 ;main.c:240: if (selectedCoords < 0 || selectedCoords >= numPieces) {
      0004AC F8 0F            [12] 1418 	ldhl	sp,	#15
      0004AE CB 7E            [12] 1419 	bit	7, (hl)
      0004B0 20 21            [12] 1420 	jr	NZ, 00106$
      0004B2 F8 0E            [12] 1421 	ldhl	sp,	#14
      0004B4 5D               [ 4] 1422 	ld	e, l
      0004B5 54               [ 4] 1423 	ld	d, h
      0004B6 F8 00            [12] 1424 	ldhl	sp,	#0
      0004B8 1A               [ 8] 1425 	ld	a, (de)
      0004B9 13               [ 8] 1426 	inc	de
      0004BA 96               [ 8] 1427 	sub	a, (hl)
      0004BB 23               [ 8] 1428 	inc	hl
      0004BC 1A               [ 8] 1429 	ld	a, (de)
      0004BD 9E               [ 8] 1430 	sbc	a, (hl)
      0004BE 1A               [ 8] 1431 	ld	a, (de)
      0004BF 57               [ 4] 1432 	ld	d, a
      0004C0 5E               [ 8] 1433 	ld	e, (hl)
      0004C1 CB 7B            [ 8] 1434 	bit	7, e
      0004C3 28 07            [12] 1435 	jr	Z, 00208$
      0004C5 CB 7A            [ 8] 1436 	bit	7, d
      0004C7 20 08            [12] 1437 	jr	NZ, 00209$
      0004C9 BF               [ 4] 1438 	cp	a, a
      0004CA 18 05            [12] 1439 	jr	00209$
      0004CC                       1440 00208$:
      0004CC CB 7A            [ 8] 1441 	bit	7, d
      0004CE 28 01            [12] 1442 	jr	Z, 00209$
      0004D0 37               [ 4] 1443 	scf
      0004D1                       1444 00209$:
      0004D1 38 04            [12] 1445 	jr	C, 00107$
      0004D3                       1446 00106$:
                           0004D3  1447 	C$main.c$241$2_1$211	= .
                                   1448 	.globl	C$main.c$241$2_1$211
                                   1449 ;main.c:241: return false;
      0004D3 AF               [ 4] 1450 	xor	a, a
      0004D4 C3r02r06         [16] 1451 	jp	00131$
      0004D7                       1452 00107$:
                           0004D7  1453 	C$main.c$244$1_1$209	= .
                                   1454 	.globl	C$main.c$244$1_1$209
                                   1455 ;main.c:244: if (abs(dx) != abs(dy)) {
      0004D7 F8 02            [12] 1456 	ldhl	sp,	#2
      0004D9 2A               [ 8] 1457 	ld	a, (hl+)
      0004DA 5F               [ 4] 1458 	ld	e, a
      0004DB 56               [ 8] 1459 	ld	d, (hl)
      0004DC D5               [16] 1460 	push	de
      0004DD CDr00r00         [24] 1461 	call	_abs
      0004E0 E1               [12] 1462 	pop	hl
      0004E1 D5               [16] 1463 	push	de
      0004E2 F8 06            [12] 1464 	ldhl	sp,	#6
      0004E4 2A               [ 8] 1465 	ld	a, (hl+)
      0004E5 5F               [ 4] 1466 	ld	e, a
      0004E6 56               [ 8] 1467 	ld	d, (hl)
      0004E7 D5               [16] 1468 	push	de
      0004E8 CDr00r00         [24] 1469 	call	_abs
      0004EB E1               [12] 1470 	pop	hl
      0004EC C1               [12] 1471 	pop	bc
      0004ED 7B               [ 4] 1472 	ld	a, e
      0004EE 91               [ 4] 1473 	sub	a, c
      0004EF 20 04            [12] 1474 	jr	NZ, 00210$
      0004F1 7A               [ 4] 1475 	ld	a, d
      0004F2 90               [ 4] 1476 	sub	a, b
      0004F3 28 04            [12] 1477 	jr	Z, 00110$
      0004F5                       1478 00210$:
                           0004F5  1479 	C$main.c$245$2_1$212	= .
                                   1480 	.globl	C$main.c$245$2_1$212
                                   1481 ;main.c:245: return false;
      0004F5 AF               [ 4] 1482 	xor	a, a
      0004F6 C3r02r06         [16] 1483 	jp	00131$
      0004F9                       1484 00110$:
                           0004F9  1485 	C$main.c$248$1_1$206	= .
                                   1486 	.globl	C$main.c$248$1_1$206
                                   1487 ;main.c:248: if ((currentPlayer == BLACK_PLAYER && dy < 0 && !pieces[selectedCoords].isKing) ||
      0004F9 F8 07            [12] 1488 	ldhl	sp,	#7
      0004FB 2A               [ 8] 1489 	ld	a, (hl+)
      0004FC 4F               [ 4] 1490 	ld	c, a
      0004FD 46               [ 8] 1491 	ld	b, (hl)
      0004FE 03               [ 8] 1492 	inc	bc
      0004FF 03               [ 8] 1493 	inc	bc
      000500 F8 0D            [12] 1494 	ldhl	sp,	#13
      000502 7E               [ 8] 1495 	ld	a, (hl)
      000503 B7               [ 4] 1496 	or	a, a
      000504 20 0C            [12] 1497 	jr	NZ, 00117$
      000506 F8 05            [12] 1498 	ldhl	sp,	#5
      000508 CB 7E            [12] 1499 	bit	7, (hl)
      00050A 28 06            [12] 1500 	jr	Z, 00117$
      00050C 0A               [ 8] 1501 	ld	a, (bc)
      00050D 5F               [ 4] 1502 	ld	e, a
      00050E CB 43            [ 8] 1503 	bit	0, e
      000510 28 2A            [12] 1504 	jr	Z, 00111$
      000512                       1505 00117$:
                           000512  1506 	C$main.c$249$1_1$209	= .
                                   1507 	.globl	C$main.c$249$1_1$209
                                   1508 ;main.c:249: (currentPlayer == WHITE_PLAYER && dy > 0 && !pieces[selectedCoords].isKing)) {
      000512 F8 0D            [12] 1509 	ldhl	sp,	#13
      000514 7E               [ 8] 1510 	ld	a, (hl)
      000515 3D               [ 4] 1511 	dec	a
      000516 20 28            [12] 1512 	jr	NZ, 00146$
      000518 F8 04            [12] 1513 	ldhl	sp,	#4
      00051A AF               [ 4] 1514 	xor	a, a
      00051B 96               [ 8] 1515 	sub	a, (hl)
      00051C 23               [ 8] 1516 	inc	hl
      00051D 3E 00            [ 8] 1517 	ld	a, #0x00
      00051F 9E               [ 8] 1518 	sbc	a, (hl)
      000520 3E 00            [ 8] 1519 	ld	a, #0x00
      000522 57               [ 4] 1520 	ld	d, a
      000523 5E               [ 8] 1521 	ld	e, (hl)
      000524 CB 7B            [ 8] 1522 	bit	7, e
      000526 28 07            [12] 1523 	jr	Z, 00213$
      000528 CB 7A            [ 8] 1524 	bit	7, d
      00052A 20 08            [12] 1525 	jr	NZ, 00214$
      00052C BF               [ 4] 1526 	cp	a, a
      00052D 18 05            [12] 1527 	jr	00214$
      00052F                       1528 00213$:
      00052F CB 7A            [ 8] 1529 	bit	7, d
      000531 28 01            [12] 1530 	jr	Z, 00214$
      000533 37               [ 4] 1531 	scf
      000534                       1532 00214$:
      000534 30 0A            [12] 1533 	jr	NC, 00146$
      000536 0A               [ 8] 1534 	ld	a, (bc)
      000537 4F               [ 4] 1535 	ld	c, a
      000538 CB 41            [ 8] 1536 	bit	0, c
      00053A 20 04            [12] 1537 	jr	NZ, 00146$
      00053C                       1538 00111$:
                           00053C  1539 	C$main.c$250$2_1$213	= .
                                   1540 	.globl	C$main.c$250$2_1$213
                                   1541 ;main.c:250: return false;
      00053C AF               [ 4] 1542 	xor	a, a
      00053D C3r02r06         [16] 1543 	jp	00131$
                           000540  1544 	C$main.c$253$1_1$206	= .
                                   1545 	.globl	C$main.c$253$1_1$206
                                   1546 ;main.c:253: for (int i = 0; i < numPieces; i++) {
      000540                       1547 00146$:
      000540 01 00 00         [12] 1548 	ld	bc, #0x0000
      000543                       1549 00129$:
      000543 F8 00            [12] 1550 	ldhl	sp,	#0
      000545 79               [ 4] 1551 	ld	a, c
      000546 96               [ 8] 1552 	sub	a, (hl)
      000547 23               [ 8] 1553 	inc	hl
      000548 78               [ 4] 1554 	ld	a, b
      000549 9E               [ 8] 1555 	sbc	a, (hl)
      00054A 78               [ 4] 1556 	ld	a, b
      00054B 57               [ 4] 1557 	ld	d, a
      00054C CB 7E            [12] 1558 	bit	7, (hl)
      00054E 28 07            [12] 1559 	jr	Z, 00215$
      000550 CB 7A            [ 8] 1560 	bit	7, d
      000552 20 08            [12] 1561 	jr	NZ, 00216$
      000554 BF               [ 4] 1562 	cp	a, a
      000555 18 05            [12] 1563 	jr	00216$
      000557                       1564 00215$:
      000557 CB 7A            [ 8] 1565 	bit	7, d
      000559 28 01            [12] 1566 	jr	Z, 00216$
      00055B 37               [ 4] 1567 	scf
      00055C                       1568 00216$:
      00055C 30 51            [12] 1569 	jr	NC, 00124$
                           00055E  1570 	C$main.c$254$1_1$206	= .
                                   1571 	.globl	C$main.c$254$1_1$206
                                   1572 ;main.c:254: if (whitePieces[i].x == cursorx && whitePieces[i].y == cursory) {
      00055E 69               [ 4] 1573 	ld	l, c
      00055F 60               [ 4] 1574 	ld	h, b
      000560 29               [ 8] 1575 	add	hl, hl
      000561 09               [ 8] 1576 	add	hl, bc
      000562 E5               [16] 1577 	push	hl
      000563 7D               [ 4] 1578 	ld	a, l
      000564 F8 08            [12] 1579 	ldhl	sp,	#8
      000566 77               [ 8] 1580 	ld	(hl), a
      000567 E1               [12] 1581 	pop	hl
      000568 7C               [ 4] 1582 	ld	a, h
      000569 F8 07            [12] 1583 	ldhl	sp,	#7
      00056B 77               [ 8] 1584 	ld	(hl), a
      00056C 11r67r02         [12] 1585 	ld	de, #_whitePieces
      00056F 3A               [ 8] 1586 	ld	a, (hl-)
      000570 6E               [ 8] 1587 	ld	l, (hl)
      000571 67               [ 4] 1588 	ld	h, a
      000572 19               [ 8] 1589 	add	hl, de
      000573 5D               [ 4] 1590 	ld	e, l
      000574 54               [ 4] 1591 	ld	d, h
      000575 1A               [ 8] 1592 	ld	a, (de)
      000576 F8 08            [12] 1593 	ldhl	sp,	#8
      000578 22               [ 8] 1594 	ld	(hl+), a
      000579 23               [ 8] 1595 	inc	hl
      00057A 3A               [ 8] 1596 	ld	a, (hl-)
      00057B 2B               [ 8] 1597 	dec	hl
      00057C 96               [ 8] 1598 	sub	a, (hl)
      00057D 20 0C            [12] 1599 	jr	NZ, 00119$
      00057F 13               [ 8] 1600 	inc	de
      000580 1A               [ 8] 1601 	ld	a, (de)
      000581 5F               [ 4] 1602 	ld	e, a
      000582 F8 09            [12] 1603 	ldhl	sp,	#9
      000584 7E               [ 8] 1604 	ld	a, (hl)
      000585 93               [ 4] 1605 	sub	a, e
      000586 20 03            [12] 1606 	jr	NZ, 00119$
                           000588  1607 	C$main.c$255$4_1$216	= .
                                   1608 	.globl	C$main.c$255$4_1$216
                                   1609 ;main.c:255: return false;
      000588 AF               [ 4] 1610 	xor	a, a
      000589 18 77            [12] 1611 	jr	00131$
      00058B                       1612 00119$:
                           00058B  1613 	C$main.c$257$1_1$206	= .
                                   1614 	.globl	C$main.c$257$1_1$206
                                   1615 ;main.c:257: if (blackPieces[i].x == cursorx && blackPieces[i].y == cursory) {
      00058B 11r43r02         [12] 1616 	ld	de, #_blackPieces
      00058E F8 06            [12] 1617 	ldhl	sp,	#6
      000590 2A               [ 8] 1618 	ld	a,	(hl+)
      000591 66               [ 8] 1619 	ld	h, (hl)
      000592 6F               [ 4] 1620 	ld	l, a
      000593 19               [ 8] 1621 	add	hl, de
      000594 5D               [ 4] 1622 	ld	e, l
      000595 54               [ 4] 1623 	ld	d, h
      000596 1A               [ 8] 1624 	ld	a, (de)
      000597 F8 08            [12] 1625 	ldhl	sp,	#8
      000599 22               [ 8] 1626 	ld	(hl+), a
      00059A 23               [ 8] 1627 	inc	hl
      00059B 3A               [ 8] 1628 	ld	a, (hl-)
      00059C 2B               [ 8] 1629 	dec	hl
      00059D 96               [ 8] 1630 	sub	a, (hl)
      00059E 20 0C            [12] 1631 	jr	NZ, 00130$
      0005A0 13               [ 8] 1632 	inc	de
      0005A1 1A               [ 8] 1633 	ld	a, (de)
      0005A2 5F               [ 4] 1634 	ld	e, a
      0005A3 F8 09            [12] 1635 	ldhl	sp,	#9
      0005A5 7E               [ 8] 1636 	ld	a, (hl)
      0005A6 93               [ 4] 1637 	sub	a, e
      0005A7 20 03            [12] 1638 	jr	NZ, 00130$
                           0005A9  1639 	C$main.c$258$4_1$217	= .
                                   1640 	.globl	C$main.c$258$4_1$217
                                   1641 ;main.c:258: return false;
      0005A9 AF               [ 4] 1642 	xor	a, a
      0005AA 18 56            [12] 1643 	jr	00131$
      0005AC                       1644 00130$:
                           0005AC  1645 	C$main.c$253$2_1$214	= .
                                   1646 	.globl	C$main.c$253$2_1$214
                                   1647 ;main.c:253: for (int i = 0; i < numPieces; i++) {
      0005AC 03               [ 8] 1648 	inc	bc
      0005AD 18 94            [12] 1649 	jr	00129$
      0005AF                       1650 00124$:
                           0005AF  1651 	C$main.c$261$1_1$209	= .
                                   1652 	.globl	C$main.c$261$1_1$209
                                   1653 ;main.c:261: if (abs(dx) > 2 * SQUARE_SIZE || abs(dy) > 2 * SQUARE_SIZE) {
      0005AF F8 02            [12] 1654 	ldhl	sp,	#2
      0005B1 2A               [ 8] 1655 	ld	a, (hl+)
      0005B2 5F               [ 4] 1656 	ld	e, a
      0005B3 56               [ 8] 1657 	ld	d, (hl)
      0005B4 D5               [16] 1658 	push	de
      0005B5 CDr00r00         [24] 1659 	call	_abs
      0005B8 E1               [12] 1660 	pop	hl
      0005B9 4B               [ 4] 1661 	ld	c, e
      0005BA 42               [ 4] 1662 	ld	b, d
      0005BB 58               [ 4] 1663 	ld	e, b
      0005BC 16 00            [ 8] 1664 	ld	d, #0x00
      0005BE 3E 20            [ 8] 1665 	ld	a, #0x20
      0005C0 B9               [ 4] 1666 	cp	a, c
      0005C1 3E 00            [ 8] 1667 	ld	a, #0x00
      0005C3 98               [ 4] 1668 	sbc	a, b
      0005C4 CB 7B            [ 8] 1669 	bit	7, e
      0005C6 28 07            [12] 1670 	jr	Z, 00225$
      0005C8 CB 7A            [ 8] 1671 	bit	7, d
      0005CA 20 08            [12] 1672 	jr	NZ, 00226$
      0005CC BF               [ 4] 1673 	cp	a, a
      0005CD 18 05            [12] 1674 	jr	00226$
      0005CF                       1675 00225$:
      0005CF CB 7A            [ 8] 1676 	bit	7, d
      0005D1 28 01            [12] 1677 	jr	Z, 00226$
      0005D3 37               [ 4] 1678 	scf
      0005D4                       1679 00226$:
      0005D4 38 27            [12] 1680 	jr	C, 00125$
      0005D6 F8 04            [12] 1681 	ldhl	sp,	#4
      0005D8 2A               [ 8] 1682 	ld	a, (hl+)
      0005D9 5F               [ 4] 1683 	ld	e, a
      0005DA 56               [ 8] 1684 	ld	d, (hl)
      0005DB D5               [16] 1685 	push	de
      0005DC CDr00r00         [24] 1686 	call	_abs
      0005DF E1               [12] 1687 	pop	hl
      0005E0 4B               [ 4] 1688 	ld	c, e
      0005E1 42               [ 4] 1689 	ld	b, d
      0005E2 58               [ 4] 1690 	ld	e, b
      0005E3 16 00            [ 8] 1691 	ld	d, #0x00
      0005E5 3E 20            [ 8] 1692 	ld	a, #0x20
      0005E7 B9               [ 4] 1693 	cp	a, c
      0005E8 3E 00            [ 8] 1694 	ld	a, #0x00
      0005EA 98               [ 4] 1695 	sbc	a, b
      0005EB CB 7B            [ 8] 1696 	bit	7, e
      0005ED 28 07            [12] 1697 	jr	Z, 00227$
      0005EF CB 7A            [ 8] 1698 	bit	7, d
      0005F1 20 08            [12] 1699 	jr	NZ, 00228$
      0005F3 BF               [ 4] 1700 	cp	a, a
      0005F4 18 05            [12] 1701 	jr	00228$
      0005F6                       1702 00227$:
      0005F6 CB 7A            [ 8] 1703 	bit	7, d
      0005F8 28 01            [12] 1704 	jr	Z, 00228$
      0005FA 37               [ 4] 1705 	scf
      0005FB                       1706 00228$:
      0005FB 30 03            [12] 1707 	jr	NC, 00126$
      0005FD                       1708 00125$:
                           0005FD  1709 	C$main.c$262$2_1$218	= .
                                   1710 	.globl	C$main.c$262$2_1$218
                                   1711 ;main.c:262: return false;
      0005FD AF               [ 4] 1712 	xor	a, a
      0005FE 18 02            [12] 1713 	jr	00131$
      000600                       1714 00126$:
                           000600  1715 	C$main.c$265$1_1$209	= .
                                   1716 	.globl	C$main.c$265$1_1$209
                                   1717 ;main.c:265: return true;
      000600 3E 01            [ 8] 1718 	ld	a, #0x01
      000602                       1719 00131$:
                           000602  1720 	C$main.c$266$1_1$206	= .
                                   1721 	.globl	C$main.c$266$1_1$206
                                   1722 ;main.c:266: }
      000602 E8 0B            [16] 1723 	add	sp, #11
      000604 E1               [12] 1724 	pop	hl
      000605 E8 03            [16] 1725 	add	sp, #3
      000607 E9               [ 4] 1726 	jp	(hl)
                           000608  1727 	G$checkCollision$0$0	= .
                                   1728 	.globl	G$checkCollision$0$0
                           000608  1729 	C$main.c$268$1_1$220	= .
                                   1730 	.globl	C$main.c$268$1_1$220
                                   1731 ;main.c:268: bool checkCollision(UINT8 cursorx, UINT8 cursory, int currentPlayer) {
                                   1732 ;	---------------------------------
                                   1733 ; Function checkCollision
                                   1734 ; ---------------------------------
      000608                       1735 _checkCollision::
      000608 E8 F5            [16] 1736 	add	sp, #-11
      00060A F8 0A            [12] 1737 	ldhl	sp,	#10
      00060C 32               [ 8] 1738 	ld	(hl-), a
      00060D 73               [ 8] 1739 	ld	(hl), e
                           00060E  1740 	C$main.c$272$1_0$220	= .
                                   1741 	.globl	C$main.c$272$1_0$220
                                   1742 ;main.c:272: if (currentPlayer == BLACK_PLAYER) {
      00060E F8 0E            [12] 1743 	ldhl	sp,	#14
      000610 3A               [ 8] 1744 	ld	a, (hl-)
      000611 B6               [ 8] 1745 	or	a, (hl)
      000612 20 0F            [12] 1746 	jr	NZ, 00102$
                           000614  1747 	C$main.c$273$2_0$221	= .
                                   1748 	.globl	C$main.c$273$2_0$221
                                   1749 ;main.c:273: pieces = blackPieces;
      000614 F8 02            [12] 1750 	ldhl	sp,	#2
      000616 3Er43            [ 8] 1751 	ld	a, #<(_blackPieces)
      000618 22               [ 8] 1752 	ld	(hl+), a
                           000619  1753 	C$main.c$274$2_0$221	= .
                                   1754 	.globl	C$main.c$274$2_0$221
                                   1755 ;main.c:274: numPieces = 12;
      000619 3Es02            [ 8] 1756 	ld	a, #>(_blackPieces)
      00061B 22               [ 8] 1757 	ld	(hl+), a
      00061C 3E 0C            [ 8] 1758 	ld	a, #0x0c
      00061E 22               [ 8] 1759 	ld	(hl+), a
      00061F AF               [ 4] 1760 	xor	a, a
      000620 77               [ 8] 1761 	ld	(hl), a
      000621 18 0D            [12] 1762 	jr	00103$
      000623                       1763 00102$:
                           000623  1764 	C$main.c$276$2_0$222	= .
                                   1765 	.globl	C$main.c$276$2_0$222
                                   1766 ;main.c:276: pieces = whitePieces;
      000623 F8 02            [12] 1767 	ldhl	sp,	#2
      000625 3Er67            [ 8] 1768 	ld	a, #<(_whitePieces)
      000627 22               [ 8] 1769 	ld	(hl+), a
                           000628  1770 	C$main.c$277$2_0$222	= .
                                   1771 	.globl	C$main.c$277$2_0$222
                                   1772 ;main.c:277: numPieces = 12;
      000628 3Es02            [ 8] 1773 	ld	a, #>(_whitePieces)
      00062A 22               [ 8] 1774 	ld	(hl+), a
      00062B 3E 0C            [ 8] 1775 	ld	a, #0x0c
      00062D 22               [ 8] 1776 	ld	(hl+), a
      00062E AF               [ 4] 1777 	xor	a, a
      00062F 77               [ 8] 1778 	ld	(hl), a
      000630                       1779 00103$:
                           000630  1780 	C$main.c$280$3_0$223	= .
                                   1781 	.globl	C$main.c$280$3_0$223
                                   1782 ;main.c:280: for (int i = 0; i < numPieces; i++) {
      000630 AF               [ 4] 1783 	xor	a, a
      000631 F8 06            [12] 1784 	ldhl	sp,	#6
      000633 22               [ 8] 1785 	ld	(hl+), a
      000634 77               [ 8] 1786 	ld	(hl), a
      000635 01 00 00         [12] 1787 	ld	bc, #0x0000
      000638                       1788 00112$:
      000638 F8 04            [12] 1789 	ldhl	sp,	#4
      00063A 79               [ 4] 1790 	ld	a, c
      00063B 96               [ 8] 1791 	sub	a, (hl)
      00063C 23               [ 8] 1792 	inc	hl
      00063D 78               [ 4] 1793 	ld	a, b
      00063E 9E               [ 8] 1794 	sbc	a, (hl)
      00063F 78               [ 4] 1795 	ld	a, b
      000640 57               [ 4] 1796 	ld	d, a
      000641 5E               [ 8] 1797 	ld	e, (hl)
      000642 CB 7B            [ 8] 1798 	bit	7, e
      000644 28 07            [12] 1799 	jr	Z, 00146$
      000646 CB 7A            [ 8] 1800 	bit	7, d
      000648 20 08            [12] 1801 	jr	NZ, 00147$
      00064A BF               [ 4] 1802 	cp	a, a
      00064B 18 05            [12] 1803 	jr	00147$
      00064D                       1804 00146$:
      00064D CB 7A            [ 8] 1805 	bit	7, d
      00064F 28 01            [12] 1806 	jr	Z, 00147$
      000651 37               [ 4] 1807 	scf
      000652                       1808 00147$:
      000652 30 73            [12] 1809 	jr	NC, 00110$
                           000654  1810 	C$main.c$281$3_0$224	= .
                                   1811 	.globl	C$main.c$281$3_0$224
                                   1812 ;main.c:281: UINT8 pieceX = pieces[i].x;
      000654 69               [ 4] 1813 	ld	l, c
      000655 60               [ 4] 1814 	ld	h, b
      000656 29               [ 8] 1815 	add	hl, hl
      000657 09               [ 8] 1816 	add	hl, bc
      000658 33               [ 8] 1817 	inc	sp
      000659 33               [ 8] 1818 	inc	sp
      00065A 5D               [ 4] 1819 	ld	e, l
      00065B 54               [ 4] 1820 	ld	d, h
      00065C D5               [16] 1821 	push	de
      00065D F8 02            [12] 1822 	ldhl	sp,	#2
      00065F 2A               [ 8] 1823 	ld	a,	(hl+)
      000660 66               [ 8] 1824 	ld	h, (hl)
      000661 6F               [ 4] 1825 	ld	l, a
      000662 19               [ 8] 1826 	add	hl, de
      000663 5D               [ 4] 1827 	ld	e, l
      000664 54               [ 4] 1828 	ld	d, h
      000665 1A               [ 8] 1829 	ld	a, (de)
      000666 F8 08            [12] 1830 	ldhl	sp,	#8
                           000668  1831 	C$main.c$282$3_0$224	= .
                                   1832 	.globl	C$main.c$282$3_0$224
                                   1833 ;main.c:282: UINT8 pieceY = pieces[i].y;
                           000668  1834 	C$main.c$284$3_0$224	= .
                                   1835 	.globl	C$main.c$284$3_0$224
                                   1836 ;main.c:284: if (cursorx == (pieceX) &&
      000668 22               [ 8] 1837 	ld	(hl+), a
      000669 23               [ 8] 1838 	inc	hl
      00066A 13               [ 8] 1839 	inc	de
      00066B 1A               [ 8] 1840 	ld	a, (de)
      00066C 5F               [ 4] 1841 	ld	e, a
      00066D 3A               [ 8] 1842 	ld	a, (hl-)
      00066E 2B               [ 8] 1843 	dec	hl
      00066F 96               [ 8] 1844 	sub	a, (hl)
      000670 20 4C            [12] 1845 	jr	NZ, 00113$
                           000672  1846 	C$main.c$285$3_0$224	= .
                                   1847 	.globl	C$main.c$285$3_0$224
                                   1848 ;main.c:285: cursory == (pieceY)) {
      000672 F8 09            [12] 1849 	ldhl	sp,	#9
      000674 7E               [ 8] 1850 	ld	a, (hl)
      000675 93               [ 4] 1851 	sub	a, e
      000676 20 46            [12] 1852 	jr	NZ, 00113$
                           000678  1853 	C$main.c$286$4_0$225	= .
                                   1854 	.globl	C$main.c$286$4_0$225
                                   1855 ;main.c:286: if (currentPlayer == BLACK_PLAYER) {
      000678 F8 0E            [12] 1856 	ldhl	sp,	#14
      00067A 3A               [ 8] 1857 	ld	a, (hl-)
      00067B B6               [ 8] 1858 	or	a, (hl)
      00067C 20 1F            [12] 1859 	jr	NZ, 00105$
                           00067E  1860 	C$main.c$287$5_0$226	= .
                                   1861 	.globl	C$main.c$287$5_0$226
                                   1862 ;main.c:287: selectedCoords = i;
      00067E F8 06            [12] 1863 	ldhl	sp,	#6
      000680 7E               [ 8] 1864 	ld	a, (hl)
      000681 EAr08r00         [16] 1865 	ld	(#_selectedCoords),a
      000684 F8 07            [12] 1866 	ldhl	sp,	#7
      000686 7E               [ 8] 1867 	ld	a, (hl)
      000687 EAr09r00         [16] 1868 	ld	(#_selectedCoords + 1),a
                           00068A  1869 	C$main.c$288$5_0$226	= .
                                   1870 	.globl	C$main.c$288$5_0$226
                                   1871 ;main.c:288: selectedPieceIndex = i + 4;
      00068A F8 06            [12] 1872 	ldhl	sp,#6
      00068C 2A               [ 8] 1873 	ld	a, (hl+)
      00068D 5F               [ 4] 1874 	ld	e, a
      00068E 56               [ 8] 1875 	ld	d, (hl)
      00068F 21 04 00         [12] 1876 	ld	hl, #0x0004
      000692 19               [ 8] 1877 	add	hl, de
      000693 5D               [ 4] 1878 	ld	e, l
      000694 54               [ 4] 1879 	ld	d, h
      000695 21r03r00         [12] 1880 	ld	hl, #_selectedPieceIndex
      000698 7B               [ 4] 1881 	ld	a, e
      000699 22               [ 8] 1882 	ld	(hl+), a
      00069A 72               [ 8] 1883 	ld	(hl), d
      00069B 18 1D            [12] 1884 	jr	00106$
      00069D                       1885 00105$:
                           00069D  1886 	C$main.c$290$5_0$227	= .
                                   1887 	.globl	C$main.c$290$5_0$227
                                   1888 ;main.c:290: selectedCoords = i;
      00069D F8 06            [12] 1889 	ldhl	sp,	#6
      00069F 7E               [ 8] 1890 	ld	a, (hl)
      0006A0 EAr08r00         [16] 1891 	ld	(#_selectedCoords),a
      0006A3 F8 07            [12] 1892 	ldhl	sp,	#7
      0006A5 7E               [ 8] 1893 	ld	a, (hl)
      0006A6 EAr09r00         [16] 1894 	ld	(#_selectedCoords + 1),a
                           0006A9  1895 	C$main.c$291$5_0$227	= .
                                   1896 	.globl	C$main.c$291$5_0$227
                                   1897 ;main.c:291: selectedPieceIndex = i + 16;
      0006A9 F8 06            [12] 1898 	ldhl	sp,#6
      0006AB 2A               [ 8] 1899 	ld	a, (hl+)
      0006AC 5F               [ 4] 1900 	ld	e, a
      0006AD 56               [ 8] 1901 	ld	d, (hl)
      0006AE 21 10 00         [12] 1902 	ld	hl, #0x0010
      0006B1 19               [ 8] 1903 	add	hl, de
      0006B2 5D               [ 4] 1904 	ld	e, l
      0006B3 54               [ 4] 1905 	ld	d, h
      0006B4 21r03r00         [12] 1906 	ld	hl, #_selectedPieceIndex
      0006B7 7B               [ 4] 1907 	ld	a, e
      0006B8 22               [ 8] 1908 	ld	(hl+), a
      0006B9 72               [ 8] 1909 	ld	(hl), d
      0006BA                       1910 00106$:
                           0006BA  1911 	C$main.c$293$4_0$225	= .
                                   1912 	.globl	C$main.c$293$4_0$225
                                   1913 ;main.c:293: return true;
      0006BA 3E 01            [ 8] 1914 	ld	a, #0x01
      0006BC 18 12            [12] 1915 	jr	00114$
      0006BE                       1916 00113$:
                           0006BE  1917 	C$main.c$280$2_0$223	= .
                                   1918 	.globl	C$main.c$280$2_0$223
                                   1919 ;main.c:280: for (int i = 0; i < numPieces; i++) {
      0006BE 03               [ 8] 1920 	inc	bc
      0006BF F8 06            [12] 1921 	ldhl	sp,	#6
      0006C1 79               [ 4] 1922 	ld	a, c
      0006C2 22               [ 8] 1923 	ld	(hl+), a
      0006C3 70               [ 8] 1924 	ld	(hl), b
      0006C4 C3r38r06         [16] 1925 	jp	00112$
      0006C7                       1926 00110$:
                           0006C7  1927 	C$main.c$297$1_0$220	= .
                                   1928 	.globl	C$main.c$297$1_0$220
                                   1929 ;main.c:297: selectedPieceIndex = -1;
      0006C7 21r03r00         [12] 1930 	ld	hl, #_selectedPieceIndex
      0006CA 3E FF            [ 8] 1931 	ld	a, #0xff
      0006CC 22               [ 8] 1932 	ld	(hl+), a
      0006CD 36 FF            [12] 1933 	ld	(hl), #0xff
                           0006CF  1934 	C$main.c$298$1_0$220	= .
                                   1935 	.globl	C$main.c$298$1_0$220
                                   1936 ;main.c:298: return false;
      0006CF AF               [ 4] 1937 	xor	a, a
      0006D0                       1938 00114$:
                           0006D0  1939 	C$main.c$299$1_0$220	= .
                                   1940 	.globl	C$main.c$299$1_0$220
                                   1941 ;main.c:299: }
      0006D0 E8 0B            [16] 1942 	add	sp, #11
      0006D2 E1               [12] 1943 	pop	hl
      0006D3 C1               [12] 1944 	pop	bc
      0006D4 E9               [ 4] 1945 	jp	(hl)
                           0006D5  1946 	G$hasValidCaptureMoves$0$0	= .
                                   1947 	.globl	G$hasValidCaptureMoves$0$0
                           0006D5  1948 	C$main.c$300$1_0$229	= .
                                   1949 	.globl	C$main.c$300$1_0$229
                                   1950 ;main.c:300: bool hasValidCaptureMoves(UINT8 currentPlayer) {
                                   1951 ;	---------------------------------
                                   1952 ; Function hasValidCaptureMoves
                                   1953 ; ---------------------------------
      0006D5                       1954 _hasValidCaptureMoves::
      0006D5 E8 F2            [16] 1955 	add	sp, #-14
      0006D7 F8 0B            [12] 1956 	ldhl	sp,	#11
                           0006D9  1957 	C$main.c$301$1_0$229	= .
                                   1958 	.globl	C$main.c$301$1_0$229
                                   1959 ;main.c:301: Piece* pieces = (currentPlayer == BLACK_PLAYER) ? blackPieces : whitePieces;
      0006D9 77               [ 8] 1960 	ld	(hl), a
      0006DA B7               [ 4] 1961 	or	a, a
      0006DB 20 05            [12] 1962 	jr	NZ, 00116$
      0006DD 01r43r02         [12] 1963 	ld	bc, #_blackPieces+0
      0006E0 18 03            [12] 1964 	jr	00117$
      0006E2                       1965 00116$:
      0006E2 01r67r02         [12] 1966 	ld	bc, #_whitePieces+0
      0006E5                       1967 00117$:
      0006E5 F8 02            [12] 1968 	ldhl	sp,	#2
      0006E7 79               [ 4] 1969 	ld	a, c
      0006E8 22               [ 8] 1970 	ld	(hl+), a
      0006E9 70               [ 8] 1971 	ld	(hl), b
                           0006EA  1972 	C$main.c$302$1_0$229	= .
                                   1973 	.globl	C$main.c$302$1_0$229
                                   1974 ;main.c:302: Piece* opponentPieces = (currentPlayer == BLACK_PLAYER) ? whitePieces : blackPieces;
      0006EA F8 0B            [12] 1975 	ldhl	sp,	#11
      0006EC 7E               [ 8] 1976 	ld	a, (hl)
      0006ED B7               [ 4] 1977 	or	a, a
      0006EE 20 05            [12] 1978 	jr	NZ, 00118$
      0006F0 01r67r02         [12] 1979 	ld	bc, #_whitePieces+0
      0006F3 18 03            [12] 1980 	jr	00119$
      0006F5                       1981 00118$:
      0006F5 01r43r02         [12] 1982 	ld	bc, #_blackPieces+0
      0006F8                       1983 00119$:
      0006F8 F8 04            [12] 1984 	ldhl	sp,	#4
      0006FA 79               [ 4] 1985 	ld	a, c
      0006FB 22               [ 8] 1986 	ld	(hl+), a
      0006FC 70               [ 8] 1987 	ld	(hl), b
                           0006FD  1988 	C$main.c$306$1_0$229	= .
                                   1989 	.globl	C$main.c$306$1_0$229
                                   1990 ;main.c:306: for (int i = 0; i < numPieces; i++) {
      0006FD AF               [ 4] 1991 	xor	a, a
      0006FE F8 0C            [12] 1992 	ldhl	sp,	#12
      000700 22               [ 8] 1993 	ld	(hl+), a
      000701 77               [ 8] 1994 	ld	(hl), a
      000702                       1995 00112$:
      000702 F8 0C            [12] 1996 	ldhl	sp,	#12
      000704 2A               [ 8] 1997 	ld	a, (hl+)
      000705 D6 0C            [ 8] 1998 	sub	a, #0x0c
      000707 7E               [ 8] 1999 	ld	a, (hl)
      000708 DE 00            [ 8] 2000 	sbc	a, #0x00
      00070A 56               [ 8] 2001 	ld	d, (hl)
      00070B 3E 00            [ 8] 2002 	ld	a, #0x00
      00070D 5F               [ 4] 2003 	ld	e, a
      00070E CB 7B            [ 8] 2004 	bit	7, e
      000710 28 07            [12] 2005 	jr	Z, 00208$
      000712 CB 7A            [ 8] 2006 	bit	7, d
      000714 20 08            [12] 2007 	jr	NZ, 00209$
      000716 BF               [ 4] 2008 	cp	a, a
      000717 18 05            [12] 2009 	jr	00209$
      000719                       2010 00208$:
      000719 CB 7A            [ 8] 2011 	bit	7, d
      00071B 28 01            [12] 2012 	jr	Z, 00209$
      00071D 37               [ 4] 2013 	scf
      00071E                       2014 00209$:
      00071E D2r89r09         [16] 2015 	jp	NC, 00110$
                           000721  2016 	C$main.c$307$1_0$229	= .
                                   2017 	.globl	C$main.c$307$1_0$229
                                   2018 ;main.c:307: if (isValidMove(pieces[i].x - 2 * SQUARE_SIZE, pieces[i].y + 2 * SQUARE_SIZE, currentPlayer, i) && (getCaptureIndex((((pieces[i].x - 2 * SQUARE_SIZE) + (pieces[i].x)) / 2), (((pieces[i].y + 2 * SQUARE_SIZE) + (pieces[i].y)) / 2), opponentPieces, numOpponentPieces) != -1) ||
      000721 F8 0C            [12] 2019 	ldhl	sp,#12
      000723 2A               [ 8] 2020 	ld	a, (hl+)
      000724 4F               [ 4] 2021 	ld	c, a
      000725 46               [ 8] 2022 	ld	b, (hl)
      000726 69               [ 4] 2023 	ld	l, c
      000727 60               [ 4] 2024 	ld	h, b
      000728 29               [ 8] 2025 	add	hl, hl
      000729 09               [ 8] 2026 	add	hl, bc
      00072A 4D               [ 4] 2027 	ld	c, l
      00072B 44               [ 4] 2028 	ld	b, h
      00072C F8 02            [12] 2029 	ldhl	sp,	#2
      00072E 2A               [ 8] 2030 	ld	a,	(hl+)
      00072F 66               [ 8] 2031 	ld	h, (hl)
      000730 6F               [ 4] 2032 	ld	l, a
      000731 09               [ 8] 2033 	add	hl, bc
      000732 E5               [16] 2034 	push	hl
      000733 7D               [ 4] 2035 	ld	a, l
      000734 F8 0B            [12] 2036 	ldhl	sp,	#11
      000736 77               [ 8] 2037 	ld	(hl), a
      000737 E1               [12] 2038 	pop	hl
      000738 7C               [ 4] 2039 	ld	a, h
      000739 F8 0A            [12] 2040 	ldhl	sp,	#10
      00073B 32               [ 8] 2041 	ld	(hl-), a
      00073C 2A               [ 8] 2042 	ld	a, (hl+)
      00073D 5F               [ 4] 2043 	ld	e, a
      00073E 56               [ 8] 2044 	ld	d, (hl)
      00073F 6B               [ 4] 2045 	ld	l, e
      000740 62               [ 4] 2046 	ld	h, d
      000741 23               [ 8] 2047 	inc	hl
      000742 E5               [16] 2048 	push	hl
      000743 7D               [ 4] 2049 	ld	a, l
      000744 F8 08            [12] 2050 	ldhl	sp,	#8
      000746 77               [ 8] 2051 	ld	(hl), a
      000747 E1               [12] 2052 	pop	hl
      000748 7C               [ 4] 2053 	ld	a, h
      000749 F8 07            [12] 2054 	ldhl	sp,	#7
      00074B 32               [ 8] 2055 	ld	(hl-), a
      00074C 2A               [ 8] 2056 	ld	a, (hl+)
      00074D 5F               [ 4] 2057 	ld	e, a
      00074E 56               [ 8] 2058 	ld	d, (hl)
      00074F 1A               [ 8] 2059 	ld	a, (de)
      000750 C6 20            [ 8] 2060 	add	a, #0x20
      000752 47               [ 4] 2061 	ld	b, a
      000753 F8 09            [12] 2062 	ldhl	sp,#9
      000755 2A               [ 8] 2063 	ld	a, (hl+)
      000756 5F               [ 4] 2064 	ld	e, a
      000757 2A               [ 8] 2065 	ld	a, (hl+)
      000758 23               [ 8] 2066 	inc	hl
      000759 57               [ 4] 2067 	ld	d, a
      00075A 1A               [ 8] 2068 	ld	a, (de)
      00075B C6 E0            [ 8] 2069 	add	a, #0xe0
      00075D 4F               [ 4] 2070 	ld	c, a
      00075E 2A               [ 8] 2071 	ld	a, (hl+)
      00075F 5F               [ 4] 2072 	ld	e, a
      000760 3A               [ 8] 2073 	ld	a, (hl-)
      000761 2B               [ 8] 2074 	dec	hl
      000762 57               [ 4] 2075 	ld	d, a
      000763 D5               [16] 2076 	push	de
      000764 7E               [ 8] 2077 	ld	a, (hl)
      000765 F5               [16] 2078 	push	af
      000766 33               [ 8] 2079 	inc	sp
      000767 58               [ 4] 2080 	ld	e, b
      000768 79               [ 4] 2081 	ld	a, c
      000769 CDr21r04         [24] 2082 	call	_isValidMove
      00076C CB 47            [ 8] 2083 	bit	0,a
      00076E 28 56            [12] 2084 	jr	Z, 00105$
      000770 F8 06            [12] 2085 	ldhl	sp,#6
      000772 2A               [ 8] 2086 	ld	a, (hl+)
      000773 5F               [ 4] 2087 	ld	e, a
      000774 56               [ 8] 2088 	ld	d, (hl)
      000775 1A               [ 8] 2089 	ld	a, (de)
      000776 4F               [ 4] 2090 	ld	c, a
      000777 06 00            [ 8] 2091 	ld	b, #0x00
      000779 21 20 00         [12] 2092 	ld	hl, #0x0020
      00077C 09               [ 8] 2093 	add	hl, bc
      00077D 09               [ 8] 2094 	add	hl, bc
                                   2095 ;	spillPairReg hl
                                   2096 ;	spillPairReg hl
      00077E 4D               [ 4] 2097 	ld	c,l
      00077F 44               [ 4] 2098 	ld	b,h
                                   2099 ;	spillPairReg hl
                                   2100 ;	spillPairReg hl
      000780 CB 78            [ 8] 2101 	bit	7, b
      000782 28 03            [12] 2102 	jr	Z, 00120$
      000784 69               [ 4] 2103 	ld	l, c
                                   2104 ;	spillPairReg hl
                                   2105 ;	spillPairReg hl
      000785 60               [ 4] 2106 	ld	h, b
                                   2107 ;	spillPairReg hl
                                   2108 ;	spillPairReg hl
      000786 23               [ 8] 2109 	inc	hl
      000787                       2110 00120$:
      000787 4D               [ 4] 2111 	ld	c, l
      000788 44               [ 4] 2112 	ld	b, h
      000789 CB 28            [ 8] 2113 	sra	b
      00078B CB 19            [ 8] 2114 	rr	c
      00078D F8 08            [12] 2115 	ldhl	sp,	#8
      00078F 79               [ 4] 2116 	ld	a, c
      000790 22               [ 8] 2117 	ld	(hl+), a
      000791 2A               [ 8] 2118 	ld	a, (hl+)
      000792 5F               [ 4] 2119 	ld	e, a
      000793 56               [ 8] 2120 	ld	d, (hl)
      000794 1A               [ 8] 2121 	ld	a, (de)
      000795 4F               [ 4] 2122 	ld	c, a
      000796 06 00            [ 8] 2123 	ld	b, #0x00
      000798 79               [ 4] 2124 	ld	a, c
      000799 C6 E0            [ 8] 2125 	add	a, #0xe0
      00079B 6F               [ 4] 2126 	ld	l, a
                                   2127 ;	spillPairReg hl
                                   2128 ;	spillPairReg hl
      00079C 78               [ 4] 2129 	ld	a, b
      00079D CE FF            [ 8] 2130 	adc	a, #0xff
      00079F 67               [ 4] 2131 	ld	h, a
                                   2132 ;	spillPairReg hl
                                   2133 ;	spillPairReg hl
      0007A0 09               [ 8] 2134 	add	hl, bc
                                   2135 ;	spillPairReg hl
                                   2136 ;	spillPairReg hl
      0007A1 4D               [ 4] 2137 	ld	c,l
      0007A2 44               [ 4] 2138 	ld	b,h
                                   2139 ;	spillPairReg hl
                                   2140 ;	spillPairReg hl
      0007A3 CB 78            [ 8] 2141 	bit	7, b
      0007A5 28 03            [12] 2142 	jr	Z, 00121$
      0007A7 69               [ 4] 2143 	ld	l, c
                                   2144 ;	spillPairReg hl
                                   2145 ;	spillPairReg hl
      0007A8 60               [ 4] 2146 	ld	h, b
                                   2147 ;	spillPairReg hl
                                   2148 ;	spillPairReg hl
      0007A9 23               [ 8] 2149 	inc	hl
      0007AA                       2150 00121$:
      0007AA 4D               [ 4] 2151 	ld	c, l
      0007AB CB 2C            [ 8] 2152 	sra	h
      0007AD CB 19            [ 8] 2153 	rr	c
      0007AF 11 0C 00         [12] 2154 	ld	de, #0x000c
      0007B2 D5               [16] 2155 	push	de
      0007B3 F8 06            [12] 2156 	ldhl	sp,	#6
      0007B5 2A               [ 8] 2157 	ld	a, (hl+)
      0007B6 5F               [ 4] 2158 	ld	e, a
      0007B7 56               [ 8] 2159 	ld	d, (hl)
      0007B8 D5               [16] 2160 	push	de
      0007B9 F8 0C            [12] 2161 	ldhl	sp,	#12
      0007BB 5E               [ 8] 2162 	ld	e, (hl)
      0007BC 79               [ 4] 2163 	ld	a, c
      0007BD CDrBBr03         [24] 2164 	call	_getCaptureIndex
      0007C0 79               [ 4] 2165 	ld	a, c
      0007C1 A0               [ 4] 2166 	and	a, b
      0007C2 3C               [ 4] 2167 	inc	a
      0007C3 C2r7Ar09         [16] 2168 	jp	NZ,00101$
      0007C6                       2169 00105$:
                           0007C6  2170 	C$main.c$308$3_0$231	= .
                                   2171 	.globl	C$main.c$308$3_0$231
                                   2172 ;main.c:308: isValidMove(pieces[i].x + 2 * SQUARE_SIZE, pieces[i].y + 2 * SQUARE_SIZE, currentPlayer, i) && (getCaptureIndex((((pieces[i].x + 2 * SQUARE_SIZE) + (pieces[i].x)) / 2), (((pieces[i].y + 2 * SQUARE_SIZE) + (pieces[i].y)) / 2), opponentPieces, numOpponentPieces) != -1) ||
      0007C6 F8 06            [12] 2173 	ldhl	sp,#6
      0007C8 2A               [ 8] 2174 	ld	a, (hl+)
      0007C9 5F               [ 4] 2175 	ld	e, a
      0007CA 56               [ 8] 2176 	ld	d, (hl)
      0007CB 1A               [ 8] 2177 	ld	a, (de)
      0007CC C6 20            [ 8] 2178 	add	a, #0x20
      0007CE 47               [ 4] 2179 	ld	b, a
      0007CF F8 09            [12] 2180 	ldhl	sp,#9
      0007D1 2A               [ 8] 2181 	ld	a, (hl+)
      0007D2 5F               [ 4] 2182 	ld	e, a
      0007D3 2A               [ 8] 2183 	ld	a, (hl+)
      0007D4 23               [ 8] 2184 	inc	hl
      0007D5 57               [ 4] 2185 	ld	d, a
      0007D6 1A               [ 8] 2186 	ld	a, (de)
      0007D7 C6 20            [ 8] 2187 	add	a, #0x20
      0007D9 4F               [ 4] 2188 	ld	c, a
      0007DA 2A               [ 8] 2189 	ld	a, (hl+)
      0007DB 5F               [ 4] 2190 	ld	e, a
      0007DC 3A               [ 8] 2191 	ld	a, (hl-)
      0007DD 2B               [ 8] 2192 	dec	hl
      0007DE 57               [ 4] 2193 	ld	d, a
      0007DF D5               [16] 2194 	push	de
      0007E0 7E               [ 8] 2195 	ld	a, (hl)
      0007E1 F5               [16] 2196 	push	af
      0007E2 33               [ 8] 2197 	inc	sp
      0007E3 58               [ 4] 2198 	ld	e, b
      0007E4 79               [ 4] 2199 	ld	a, c
      0007E5 CDr21r04         [24] 2200 	call	_isValidMove
      0007E8 CB 47            [ 8] 2201 	bit	0,a
      0007EA 28 52            [12] 2202 	jr	Z, 00107$
      0007EC F8 06            [12] 2203 	ldhl	sp,#6
      0007EE 2A               [ 8] 2204 	ld	a, (hl+)
      0007EF 5F               [ 4] 2205 	ld	e, a
      0007F0 56               [ 8] 2206 	ld	d, (hl)
      0007F1 1A               [ 8] 2207 	ld	a, (de)
      0007F2 4F               [ 4] 2208 	ld	c, a
      0007F3 06 00            [ 8] 2209 	ld	b, #0x00
      0007F5 21 20 00         [12] 2210 	ld	hl, #0x0020
      0007F8 09               [ 8] 2211 	add	hl, bc
      0007F9 09               [ 8] 2212 	add	hl, bc
                                   2213 ;	spillPairReg hl
                                   2214 ;	spillPairReg hl
      0007FA 4D               [ 4] 2215 	ld	c,l
      0007FB 44               [ 4] 2216 	ld	b,h
                                   2217 ;	spillPairReg hl
                                   2218 ;	spillPairReg hl
      0007FC CB 78            [ 8] 2219 	bit	7, b
      0007FE 28 03            [12] 2220 	jr	Z, 00122$
      000800 69               [ 4] 2221 	ld	l, c
                                   2222 ;	spillPairReg hl
                                   2223 ;	spillPairReg hl
      000801 60               [ 4] 2224 	ld	h, b
                                   2225 ;	spillPairReg hl
                                   2226 ;	spillPairReg hl
      000802 23               [ 8] 2227 	inc	hl
      000803                       2228 00122$:
      000803 4D               [ 4] 2229 	ld	c, l
      000804 44               [ 4] 2230 	ld	b, h
      000805 CB 28            [ 8] 2231 	sra	b
      000807 CB 19            [ 8] 2232 	rr	c
      000809 F8 08            [12] 2233 	ldhl	sp,	#8
      00080B 79               [ 4] 2234 	ld	a, c
      00080C 22               [ 8] 2235 	ld	(hl+), a
      00080D 2A               [ 8] 2236 	ld	a, (hl+)
      00080E 5F               [ 4] 2237 	ld	e, a
      00080F 56               [ 8] 2238 	ld	d, (hl)
      000810 1A               [ 8] 2239 	ld	a, (de)
      000811 4F               [ 4] 2240 	ld	c, a
      000812 06 00            [ 8] 2241 	ld	b, #0x00
      000814 21 20 00         [12] 2242 	ld	hl, #0x0020
      000817 09               [ 8] 2243 	add	hl, bc
      000818 09               [ 8] 2244 	add	hl, bc
                                   2245 ;	spillPairReg hl
                                   2246 ;	spillPairReg hl
      000819 4D               [ 4] 2247 	ld	c,l
      00081A 44               [ 4] 2248 	ld	b,h
                                   2249 ;	spillPairReg hl
                                   2250 ;	spillPairReg hl
      00081B CB 78            [ 8] 2251 	bit	7, b
      00081D 28 03            [12] 2252 	jr	Z, 00123$
      00081F 69               [ 4] 2253 	ld	l, c
                                   2254 ;	spillPairReg hl
                                   2255 ;	spillPairReg hl
      000820 60               [ 4] 2256 	ld	h, b
                                   2257 ;	spillPairReg hl
                                   2258 ;	spillPairReg hl
      000821 23               [ 8] 2259 	inc	hl
      000822                       2260 00123$:
      000822 4D               [ 4] 2261 	ld	c, l
      000823 CB 2C            [ 8] 2262 	sra	h
      000825 CB 19            [ 8] 2263 	rr	c
      000827 11 0C 00         [12] 2264 	ld	de, #0x000c
      00082A D5               [16] 2265 	push	de
      00082B F8 06            [12] 2266 	ldhl	sp,	#6
      00082D 2A               [ 8] 2267 	ld	a, (hl+)
      00082E 5F               [ 4] 2268 	ld	e, a
      00082F 56               [ 8] 2269 	ld	d, (hl)
      000830 D5               [16] 2270 	push	de
      000831 F8 0C            [12] 2271 	ldhl	sp,	#12
      000833 5E               [ 8] 2272 	ld	e, (hl)
      000834 79               [ 4] 2273 	ld	a, c
      000835 CDrBBr03         [24] 2274 	call	_getCaptureIndex
      000838 79               [ 4] 2275 	ld	a, c
      000839 A0               [ 4] 2276 	and	a, b
      00083A 3C               [ 4] 2277 	inc	a
      00083B C2r7Ar09         [16] 2278 	jp	NZ,00101$
      00083E                       2279 00107$:
                           00083E  2280 	C$main.c$309$3_0$231	= .
                                   2281 	.globl	C$main.c$309$3_0$231
                                   2282 ;main.c:309: isValidMove(pieces[i].x - 2 * SQUARE_SIZE, pieces[i].y - 2 * SQUARE_SIZE, currentPlayer, i) && (getCaptureIndex((((pieces[i].x - 2 * SQUARE_SIZE) + (pieces[i].x)) / 2), (((pieces[i].y - 2 * SQUARE_SIZE) + (pieces[i].y)) / 2), opponentPieces, numOpponentPieces) != -1) ||
      00083E F8 06            [12] 2283 	ldhl	sp,#6
      000840 2A               [ 8] 2284 	ld	a, (hl+)
      000841 5F               [ 4] 2285 	ld	e, a
      000842 56               [ 8] 2286 	ld	d, (hl)
      000843 1A               [ 8] 2287 	ld	a, (de)
      000844 C6 E0            [ 8] 2288 	add	a, #0xe0
      000846 47               [ 4] 2289 	ld	b, a
      000847 F8 09            [12] 2290 	ldhl	sp,#9
      000849 2A               [ 8] 2291 	ld	a, (hl+)
      00084A 5F               [ 4] 2292 	ld	e, a
      00084B 2A               [ 8] 2293 	ld	a, (hl+)
      00084C 23               [ 8] 2294 	inc	hl
      00084D 57               [ 4] 2295 	ld	d, a
      00084E 1A               [ 8] 2296 	ld	a, (de)
      00084F C6 E0            [ 8] 2297 	add	a, #0xe0
      000851 4F               [ 4] 2298 	ld	c, a
      000852 2A               [ 8] 2299 	ld	a, (hl+)
      000853 5F               [ 4] 2300 	ld	e, a
      000854 3A               [ 8] 2301 	ld	a, (hl-)
      000855 2B               [ 8] 2302 	dec	hl
      000856 57               [ 4] 2303 	ld	d, a
      000857 D5               [16] 2304 	push	de
      000858 7E               [ 8] 2305 	ld	a, (hl)
      000859 F5               [16] 2306 	push	af
      00085A 33               [ 8] 2307 	inc	sp
      00085B 58               [ 4] 2308 	ld	e, b
      00085C 79               [ 4] 2309 	ld	a, c
      00085D CDr21r04         [24] 2310 	call	_isValidMove
      000860 CB 47            [ 8] 2311 	bit	0,a
      000862 28 59            [12] 2312 	jr	Z, 00109$
      000864 F8 06            [12] 2313 	ldhl	sp,#6
      000866 2A               [ 8] 2314 	ld	a, (hl+)
      000867 5F               [ 4] 2315 	ld	e, a
      000868 56               [ 8] 2316 	ld	d, (hl)
      000869 1A               [ 8] 2317 	ld	a, (de)
      00086A 4F               [ 4] 2318 	ld	c, a
      00086B 06 00            [ 8] 2319 	ld	b, #0x00
      00086D 79               [ 4] 2320 	ld	a, c
      00086E C6 E0            [ 8] 2321 	add	a, #0xe0
      000870 6F               [ 4] 2322 	ld	l, a
                                   2323 ;	spillPairReg hl
                                   2324 ;	spillPairReg hl
      000871 78               [ 4] 2325 	ld	a, b
      000872 CE FF            [ 8] 2326 	adc	a, #0xff
      000874 67               [ 4] 2327 	ld	h, a
                                   2328 ;	spillPairReg hl
                                   2329 ;	spillPairReg hl
      000875 09               [ 8] 2330 	add	hl, bc
                                   2331 ;	spillPairReg hl
                                   2332 ;	spillPairReg hl
      000876 4D               [ 4] 2333 	ld	c,l
      000877 44               [ 4] 2334 	ld	b,h
                                   2335 ;	spillPairReg hl
                                   2336 ;	spillPairReg hl
      000878 CB 78            [ 8] 2337 	bit	7, b
      00087A 28 03            [12] 2338 	jr	Z, 00124$
      00087C 69               [ 4] 2339 	ld	l, c
                                   2340 ;	spillPairReg hl
                                   2341 ;	spillPairReg hl
      00087D 60               [ 4] 2342 	ld	h, b
                                   2343 ;	spillPairReg hl
                                   2344 ;	spillPairReg hl
      00087E 23               [ 8] 2345 	inc	hl
      00087F                       2346 00124$:
      00087F 4D               [ 4] 2347 	ld	c, l
      000880 44               [ 4] 2348 	ld	b, h
      000881 CB 28            [ 8] 2349 	sra	b
      000883 CB 19            [ 8] 2350 	rr	c
      000885 F8 08            [12] 2351 	ldhl	sp,	#8
      000887 79               [ 4] 2352 	ld	a, c
      000888 22               [ 8] 2353 	ld	(hl+), a
      000889 2A               [ 8] 2354 	ld	a, (hl+)
      00088A 5F               [ 4] 2355 	ld	e, a
      00088B 56               [ 8] 2356 	ld	d, (hl)
      00088C 1A               [ 8] 2357 	ld	a, (de)
      00088D 4F               [ 4] 2358 	ld	c, a
      00088E 06 00            [ 8] 2359 	ld	b, #0x00
      000890 79               [ 4] 2360 	ld	a, c
      000891 C6 E0            [ 8] 2361 	add	a, #0xe0
      000893 6F               [ 4] 2362 	ld	l, a
                                   2363 ;	spillPairReg hl
                                   2364 ;	spillPairReg hl
      000894 78               [ 4] 2365 	ld	a, b
      000895 CE FF            [ 8] 2366 	adc	a, #0xff
      000897 67               [ 4] 2367 	ld	h, a
                                   2368 ;	spillPairReg hl
                                   2369 ;	spillPairReg hl
      000898 09               [ 8] 2370 	add	hl, bc
      000899 4D               [ 4] 2371 	ld	c, l
      00089A 44               [ 4] 2372 	ld	b, h
      00089B CB 7C            [ 8] 2373 	bit	7, h
      00089D 28 03            [12] 2374 	jr	Z, 00125$
      00089F 23               [ 8] 2375 	inc	hl
      0008A0 4D               [ 4] 2376 	ld	c, l
      0008A1 44               [ 4] 2377 	ld	b, h
      0008A2                       2378 00125$:
      0008A2 CB 28            [ 8] 2379 	sra	b
      0008A4 CB 19            [ 8] 2380 	rr	c
      0008A6 11 0C 00         [12] 2381 	ld	de, #0x000c
      0008A9 D5               [16] 2382 	push	de
      0008AA F8 06            [12] 2383 	ldhl	sp,	#6
      0008AC 2A               [ 8] 2384 	ld	a, (hl+)
      0008AD 5F               [ 4] 2385 	ld	e, a
      0008AE 56               [ 8] 2386 	ld	d, (hl)
      0008AF D5               [16] 2387 	push	de
      0008B0 F8 0C            [12] 2388 	ldhl	sp,	#12
      0008B2 5E               [ 8] 2389 	ld	e, (hl)
      0008B3 79               [ 4] 2390 	ld	a, c
      0008B4 CDrBBr03         [24] 2391 	call	_getCaptureIndex
      0008B7 79               [ 4] 2392 	ld	a, c
      0008B8 A0               [ 4] 2393 	and	a, b
      0008B9 3C               [ 4] 2394 	inc	a
      0008BA C2r7Ar09         [16] 2395 	jp	NZ,00101$
      0008BD                       2396 00109$:
                           0008BD  2397 	C$main.c$310$3_0$231	= .
                                   2398 	.globl	C$main.c$310$3_0$231
                                   2399 ;main.c:310: isValidMove(pieces[i].x + 2 * SQUARE_SIZE, pieces[i].y - 2 * SQUARE_SIZE, currentPlayer, i) && (getCaptureIndex((((pieces[i].x + 2 * SQUARE_SIZE) + (pieces[i].x)) / 2), (((pieces[i].y - 2 * SQUARE_SIZE) + (pieces[i].y)) / 2), opponentPieces, numOpponentPieces) != -1)) {
      0008BD F8 06            [12] 2400 	ldhl	sp,#6
      0008BF 2A               [ 8] 2401 	ld	a, (hl+)
      0008C0 5F               [ 4] 2402 	ld	e, a
      0008C1 56               [ 8] 2403 	ld	d, (hl)
      0008C2 1A               [ 8] 2404 	ld	a, (de)
      0008C3 C6 E0            [ 8] 2405 	add	a, #0xe0
      0008C5 4F               [ 4] 2406 	ld	c, a
      0008C6 F8 09            [12] 2407 	ldhl	sp,#9
      0008C8 2A               [ 8] 2408 	ld	a, (hl+)
      0008C9 5F               [ 4] 2409 	ld	e, a
      0008CA 2A               [ 8] 2410 	ld	a, (hl+)
      0008CB 23               [ 8] 2411 	inc	hl
      0008CC 57               [ 4] 2412 	ld	d, a
      0008CD 1A               [ 8] 2413 	ld	a, (de)
      0008CE C6 20            [ 8] 2414 	add	a, #0x20
      0008D0 47               [ 4] 2415 	ld	b, a
      0008D1 2A               [ 8] 2416 	ld	a, (hl+)
      0008D2 5F               [ 4] 2417 	ld	e, a
      0008D3 3A               [ 8] 2418 	ld	a, (hl-)
      0008D4 2B               [ 8] 2419 	dec	hl
      0008D5 57               [ 4] 2420 	ld	d, a
      0008D6 D5               [16] 2421 	push	de
      0008D7 7E               [ 8] 2422 	ld	a, (hl)
      0008D8 F5               [16] 2423 	push	af
      0008D9 33               [ 8] 2424 	inc	sp
      0008DA 59               [ 4] 2425 	ld	e, c
      0008DB 78               [ 4] 2426 	ld	a, b
      0008DC CDr21r04         [24] 2427 	call	_isValidMove
      0008DF CB 47            [ 8] 2428 	bit	0,a
      0008E1 CAr7Er09         [16] 2429 	jp	Z, 00113$
      0008E4 F8 06            [12] 2430 	ldhl	sp,#6
      0008E6 2A               [ 8] 2431 	ld	a, (hl+)
      0008E7 5F               [ 4] 2432 	ld	e, a
      0008E8 56               [ 8] 2433 	ld	d, (hl)
      0008E9 1A               [ 8] 2434 	ld	a, (de)
      0008EA 4F               [ 4] 2435 	ld	c, a
      0008EB 06 00            [ 8] 2436 	ld	b, #0x00
      0008ED 79               [ 4] 2437 	ld	a, c
      0008EE C6 E0            [ 8] 2438 	add	a, #0xe0
      0008F0 5F               [ 4] 2439 	ld	e, a
      0008F1 78               [ 4] 2440 	ld	a, b
      0008F2 CE FF            [ 8] 2441 	adc	a, #0xff
      0008F4 57               [ 4] 2442 	ld	d, a
      0008F5 6B               [ 4] 2443 	ld	l, e
      0008F6 62               [ 4] 2444 	ld	h, d
      0008F7 09               [ 8] 2445 	add	hl, bc
      0008F8 33               [ 8] 2446 	inc	sp
      0008F9 33               [ 8] 2447 	inc	sp
      0008FA E5               [16] 2448 	push	hl
      0008FB F8 00            [12] 2449 	ldhl	sp,	#0
      0008FD 7E               [ 8] 2450 	ld	a, (hl)
      0008FE F8 07            [12] 2451 	ldhl	sp,	#7
      000900 77               [ 8] 2452 	ld	(hl), a
      000901 F8 01            [12] 2453 	ldhl	sp,	#1
      000903 7E               [ 8] 2454 	ld	a, (hl)
      000904 F8 08            [12] 2455 	ldhl	sp,	#8
      000906 77               [ 8] 2456 	ld	(hl), a
      000907 F8 01            [12] 2457 	ldhl	sp,	#1
      000909 CB 7E            [12] 2458 	bit	7, (hl)
      00090B 28 0F            [12] 2459 	jr	Z, 00126$
      00090D D1               [12] 2460 	pop	de
      00090E D5               [16] 2461 	push	de
      00090F 6B               [ 4] 2462 	ld	l, e
      000910 62               [ 4] 2463 	ld	h, d
      000911 23               [ 8] 2464 	inc	hl
      000912 E5               [16] 2465 	push	hl
      000913 7D               [ 4] 2466 	ld	a, l
      000914 F8 09            [12] 2467 	ldhl	sp,	#9
      000916 77               [ 8] 2468 	ld	(hl), a
      000917 E1               [12] 2469 	pop	hl
      000918 7C               [ 4] 2470 	ld	a, h
      000919 F8 08            [12] 2471 	ldhl	sp,	#8
      00091B 77               [ 8] 2472 	ld	(hl), a
      00091C                       2473 00126$:
      00091C F8 07            [12] 2474 	ldhl	sp,#7
      00091E 2A               [ 8] 2475 	ld	a, (hl+)
      00091F 4F               [ 4] 2476 	ld	c, a
      000920 3A               [ 8] 2477 	ld	a, (hl-)
      000921 2B               [ 8] 2478 	dec	hl
      000922 47               [ 4] 2479 	ld	b, a
      000923 CB 28            [ 8] 2480 	sra	b
      000925 CB 19            [ 8] 2481 	rr	c
      000927 71               [ 8] 2482 	ld	(hl), c
      000928 F8 09            [12] 2483 	ldhl	sp,#9
      00092A 2A               [ 8] 2484 	ld	a, (hl+)
      00092B 5F               [ 4] 2485 	ld	e, a
      00092C 56               [ 8] 2486 	ld	d, (hl)
      00092D 1A               [ 8] 2487 	ld	a, (de)
      00092E 4F               [ 4] 2488 	ld	c, a
      00092F 06 00            [ 8] 2489 	ld	b, #0x00
      000931 21 20 00         [12] 2490 	ld	hl, #0x0020
      000934 09               [ 8] 2491 	add	hl, bc
      000935 09               [ 8] 2492 	add	hl, bc
      000936 E5               [16] 2493 	push	hl
      000937 7D               [ 4] 2494 	ld	a, l
      000938 F8 09            [12] 2495 	ldhl	sp,	#9
      00093A 77               [ 8] 2496 	ld	(hl), a
      00093B E1               [12] 2497 	pop	hl
      00093C 7C               [ 4] 2498 	ld	a, h
      00093D F8 08            [12] 2499 	ldhl	sp,	#8
      00093F 32               [ 8] 2500 	ld	(hl-), a
      000940 2A               [ 8] 2501 	ld	a, (hl+)
      000941 23               [ 8] 2502 	inc	hl
      000942 32               [ 8] 2503 	ld	(hl-), a
      000943 2A               [ 8] 2504 	ld	a, (hl+)
      000944 23               [ 8] 2505 	inc	hl
      000945 32               [ 8] 2506 	ld	(hl-), a
      000946 2B               [ 8] 2507 	dec	hl
      000947 CB 7E            [12] 2508 	bit	7, (hl)
      000949 28 11            [12] 2509 	jr	Z, 00127$
      00094B 2B               [ 8] 2510 	dec	hl
      00094C 2A               [ 8] 2511 	ld	a, (hl+)
      00094D 5F               [ 4] 2512 	ld	e, a
      00094E 56               [ 8] 2513 	ld	d, (hl)
      00094F 6B               [ 4] 2514 	ld	l, e
      000950 62               [ 4] 2515 	ld	h, d
      000951 23               [ 8] 2516 	inc	hl
      000952 E5               [16] 2517 	push	hl
      000953 7D               [ 4] 2518 	ld	a, l
      000954 F8 0B            [12] 2519 	ldhl	sp,	#11
      000956 77               [ 8] 2520 	ld	(hl), a
      000957 E1               [12] 2521 	pop	hl
      000958 7C               [ 4] 2522 	ld	a, h
      000959 F8 0A            [12] 2523 	ldhl	sp,	#10
      00095B 77               [ 8] 2524 	ld	(hl), a
      00095C                       2525 00127$:
      00095C F8 09            [12] 2526 	ldhl	sp,#9
      00095E 2A               [ 8] 2527 	ld	a, (hl+)
      00095F 4F               [ 4] 2528 	ld	c, a
      000960 46               [ 8] 2529 	ld	b, (hl)
      000961 CB 28            [ 8] 2530 	sra	b
      000963 CB 19            [ 8] 2531 	rr	c
      000965 11 0C 00         [12] 2532 	ld	de, #0x000c
      000968 D5               [16] 2533 	push	de
      000969 F8 06            [12] 2534 	ldhl	sp,	#6
      00096B 2A               [ 8] 2535 	ld	a, (hl+)
      00096C 5F               [ 4] 2536 	ld	e, a
      00096D 2A               [ 8] 2537 	ld	a, (hl+)
      00096E 57               [ 4] 2538 	ld	d, a
      00096F D5               [16] 2539 	push	de
      000970 5E               [ 8] 2540 	ld	e, (hl)
      000971 79               [ 4] 2541 	ld	a, c
      000972 CDrBBr03         [24] 2542 	call	_getCaptureIndex
      000975 79               [ 4] 2543 	ld	a, c
      000976 A0               [ 4] 2544 	and	a, b
      000977 3C               [ 4] 2545 	inc	a
      000978 28 04            [12] 2546 	jr	Z, 00113$
      00097A                       2547 00101$:
                           00097A  2548 	C$main.c$311$4_0$232	= .
                                   2549 	.globl	C$main.c$311$4_0$232
                                   2550 ;main.c:311: return true; // Found at least one valid capture move
      00097A 3E 01            [ 8] 2551 	ld	a, #0x01
      00097C 18 0C            [12] 2552 	jr	00114$
      00097E                       2553 00113$:
                           00097E  2554 	C$main.c$306$2_0$230	= .
                                   2555 	.globl	C$main.c$306$2_0$230
                                   2556 ;main.c:306: for (int i = 0; i < numPieces; i++) {
      00097E F8 0C            [12] 2557 	ldhl	sp,	#12
      000980 34               [12] 2558 	inc	(hl)
      000981 C2r02r07         [16] 2559 	jp	NZ,00112$
      000984 23               [ 8] 2560 	inc	hl
      000985 34               [12] 2561 	inc	(hl)
      000986 C3r02r07         [16] 2562 	jp	00112$
      000989                       2563 00110$:
                           000989  2564 	C$main.c$314$1_0$229	= .
                                   2565 	.globl	C$main.c$314$1_0$229
                                   2566 ;main.c:314: return false; // No valid capture moves found for any piece
      000989 AF               [ 4] 2567 	xor	a, a
      00098A                       2568 00114$:
                           00098A  2569 	C$main.c$315$1_0$229	= .
                                   2570 	.globl	C$main.c$315$1_0$229
                                   2571 ;main.c:315: }
      00098A E8 0E            [16] 2572 	add	sp, #14
                           00098C  2573 	C$main.c$315$1_0$229	= .
                                   2574 	.globl	C$main.c$315$1_0$229
                           00098C  2575 	XG$hasValidCaptureMoves$0$0	= .
                                   2576 	.globl	XG$hasValidCaptureMoves$0$0
      00098C C9               [16] 2577 	ret
                           00098D  2578 	G$hasValidNonCaptureMoves$0$0	= .
                                   2579 	.globl	G$hasValidNonCaptureMoves$0$0
                           00098D  2580 	C$main.c$316$1_0$234	= .
                                   2581 	.globl	C$main.c$316$1_0$234
                                   2582 ;main.c:316: bool hasValidNonCaptureMoves(Piece* pieces, int numPieces, UINT8 currentPlayer) {
                                   2583 ;	---------------------------------
                                   2584 ; Function hasValidNonCaptureMoves
                                   2585 ; ---------------------------------
      00098D                       2586 _hasValidNonCaptureMoves::
      00098D E8 F7            [16] 2587 	add	sp, #-9
      00098F F8 07            [12] 2588 	ldhl	sp,	#7
      000991 7B               [ 4] 2589 	ld	a, e
      000992 22               [ 8] 2590 	ld	(hl+), a
      000993 72               [ 8] 2591 	ld	(hl), d
      000994 F8 05            [12] 2592 	ldhl	sp,	#5
      000996 79               [ 4] 2593 	ld	a, c
      000997 22               [ 8] 2594 	ld	(hl+), a
      000998 70               [ 8] 2595 	ld	(hl), b
                           000999  2596 	C$main.c$317$1_0$234	= .
                                   2597 	.globl	C$main.c$317$1_0$234
                                   2598 ;main.c:317: for (int i = 0; i < numPieces; i++) {
      000999 01 00 00         [12] 2599 	ld	bc, #0x0000
      00099C                       2600 00108$:
      00099C F8 05            [12] 2601 	ldhl	sp,	#5
      00099E 79               [ 4] 2602 	ld	a, c
      00099F 96               [ 8] 2603 	sub	a, (hl)
      0009A0 23               [ 8] 2604 	inc	hl
      0009A1 78               [ 4] 2605 	ld	a, b
      0009A2 9E               [ 8] 2606 	sbc	a, (hl)
      0009A3 78               [ 4] 2607 	ld	a, b
      0009A4 57               [ 4] 2608 	ld	d, a
      0009A5 5E               [ 8] 2609 	ld	e, (hl)
      0009A6 CB 7B            [ 8] 2610 	bit	7, e
      0009A8 28 07            [12] 2611 	jr	Z, 00137$
      0009AA CB 7A            [ 8] 2612 	bit	7, d
      0009AC 20 08            [12] 2613 	jr	NZ, 00138$
      0009AE BF               [ 4] 2614 	cp	a, a
      0009AF 18 05            [12] 2615 	jr	00138$
      0009B1                       2616 00137$:
      0009B1 CB 7A            [ 8] 2617 	bit	7, d
      0009B3 28 01            [12] 2618 	jr	Z, 00138$
      0009B5 37               [ 4] 2619 	scf
      0009B6                       2620 00138$:
      0009B6 D2r78r0A         [16] 2621 	jp	NC, 00106$
                           0009B9  2622 	C$main.c$318$3_0$236	= .
                                   2623 	.globl	C$main.c$318$3_0$236
                                   2624 ;main.c:318: if (isValidMove(pieces[i].x - SQUARE_SIZE, pieces[i].y - SQUARE_SIZE, currentPlayer, i) ||
      0009B9 69               [ 4] 2625 	ld	l, c
      0009BA 60               [ 4] 2626 	ld	h, b
      0009BB 29               [ 8] 2627 	add	hl, hl
      0009BC 09               [ 8] 2628 	add	hl, bc
      0009BD E5               [16] 2629 	push	hl
      0009BE 7D               [ 4] 2630 	ld	a, l
      0009BF F8 05            [12] 2631 	ldhl	sp,	#5
      0009C1 77               [ 8] 2632 	ld	(hl), a
      0009C2 E1               [12] 2633 	pop	hl
      0009C3 7C               [ 4] 2634 	ld	a, h
      0009C4 F8 04            [12] 2635 	ldhl	sp,	#4
      0009C6 32               [ 8] 2636 	ld	(hl-), a
      0009C7 2A               [ 8] 2637 	ld	a, (hl+)
      0009C8 5F               [ 4] 2638 	ld	e, a
      0009C9 56               [ 8] 2639 	ld	d, (hl)
      0009CA F8 07            [12] 2640 	ldhl	sp,	#7
      0009CC 2A               [ 8] 2641 	ld	a,	(hl+)
      0009CD 66               [ 8] 2642 	ld	h, (hl)
      0009CE 6F               [ 4] 2643 	ld	l, a
      0009CF 19               [ 8] 2644 	add	hl, de
      0009D0 33               [ 8] 2645 	inc	sp
      0009D1 33               [ 8] 2646 	inc	sp
      0009D2 5D               [ 4] 2647 	ld	e, l
      0009D3 54               [ 4] 2648 	ld	d, h
      0009D4 D5               [16] 2649 	push	de
      0009D5 6B               [ 4] 2650 	ld	l, e
      0009D6 62               [ 4] 2651 	ld	h, d
      0009D7 23               [ 8] 2652 	inc	hl
      0009D8 E5               [16] 2653 	push	hl
      0009D9 7D               [ 4] 2654 	ld	a, l
      0009DA F8 04            [12] 2655 	ldhl	sp,	#4
      0009DC 77               [ 8] 2656 	ld	(hl), a
      0009DD E1               [12] 2657 	pop	hl
      0009DE 7C               [ 4] 2658 	ld	a, h
      0009DF F8 03            [12] 2659 	ldhl	sp,	#3
      0009E1 32               [ 8] 2660 	ld	(hl-), a
      0009E2 2A               [ 8] 2661 	ld	a, (hl+)
      0009E3 5F               [ 4] 2662 	ld	e, a
      0009E4 2A               [ 8] 2663 	ld	a, (hl+)
      0009E5 57               [ 4] 2664 	ld	d, a
      0009E6 1A               [ 8] 2665 	ld	a, (de)
      0009E7 C6 F0            [ 8] 2666 	add	a, #0xf0
      0009E9 77               [ 8] 2667 	ld	(hl), a
      0009EA D1               [12] 2668 	pop	de
      0009EB D5               [16] 2669 	push	de
      0009EC 1A               [ 8] 2670 	ld	a, (de)
      0009ED C6 F0            [ 8] 2671 	add	a, #0xf0
      0009EF 57               [ 4] 2672 	ld	d, a
      0009F0 C5               [16] 2673 	push	bc
      0009F1 C5               [16] 2674 	push	bc
      0009F2 F8 0F            [12] 2675 	ldhl	sp,	#15
      0009F4 7E               [ 8] 2676 	ld	a, (hl)
      0009F5 F5               [16] 2677 	push	af
      0009F6 33               [ 8] 2678 	inc	sp
      0009F7 F8 09            [12] 2679 	ldhl	sp,	#9
      0009F9 5E               [ 8] 2680 	ld	e, (hl)
      0009FA 7A               [ 4] 2681 	ld	a, d
      0009FB CDr21r04         [24] 2682 	call	_isValidMove
      0009FE 5F               [ 4] 2683 	ld	e, a
      0009FF C1               [12] 2684 	pop	bc
      000A00 CB 43            [ 8] 2685 	bit	0, e
      000A02 20 6C            [12] 2686 	jr	NZ, 00101$
                           000A04  2687 	C$main.c$319$3_0$236	= .
                                   2688 	.globl	C$main.c$319$3_0$236
                                   2689 ;main.c:319: isValidMove(pieces[i].x + SQUARE_SIZE, pieces[i].y - SQUARE_SIZE, currentPlayer, i) ||
      000A04 F8 02            [12] 2690 	ldhl	sp,#2
      000A06 2A               [ 8] 2691 	ld	a, (hl+)
      000A07 5F               [ 4] 2692 	ld	e, a
      000A08 2A               [ 8] 2693 	ld	a, (hl+)
      000A09 57               [ 4] 2694 	ld	d, a
      000A0A 1A               [ 8] 2695 	ld	a, (de)
      000A0B C6 F0            [ 8] 2696 	add	a, #0xf0
      000A0D 77               [ 8] 2697 	ld	(hl), a
      000A0E D1               [12] 2698 	pop	de
      000A0F D5               [16] 2699 	push	de
      000A10 1A               [ 8] 2700 	ld	a, (de)
      000A11 C6 10            [ 8] 2701 	add	a, #0x10
      000A13 57               [ 4] 2702 	ld	d, a
      000A14 C5               [16] 2703 	push	bc
      000A15 C5               [16] 2704 	push	bc
      000A16 F8 0F            [12] 2705 	ldhl	sp,	#15
      000A18 7E               [ 8] 2706 	ld	a, (hl)
      000A19 F5               [16] 2707 	push	af
      000A1A 33               [ 8] 2708 	inc	sp
      000A1B F8 09            [12] 2709 	ldhl	sp,	#9
      000A1D 5E               [ 8] 2710 	ld	e, (hl)
      000A1E 7A               [ 4] 2711 	ld	a, d
      000A1F CDr21r04         [24] 2712 	call	_isValidMove
      000A22 5F               [ 4] 2713 	ld	e, a
      000A23 C1               [12] 2714 	pop	bc
      000A24 CB 43            [ 8] 2715 	bit	0, e
      000A26 20 48            [12] 2716 	jr	NZ, 00101$
                           000A28  2717 	C$main.c$320$3_0$236	= .
                                   2718 	.globl	C$main.c$320$3_0$236
                                   2719 ;main.c:320: isValidMove(pieces[i].x - SQUARE_SIZE, pieces[i].y + SQUARE_SIZE, currentPlayer, i) ||
      000A28 F8 02            [12] 2720 	ldhl	sp,#2
      000A2A 2A               [ 8] 2721 	ld	a, (hl+)
      000A2B 5F               [ 4] 2722 	ld	e, a
      000A2C 2A               [ 8] 2723 	ld	a, (hl+)
      000A2D 57               [ 4] 2724 	ld	d, a
      000A2E 1A               [ 8] 2725 	ld	a, (de)
      000A2F C6 10            [ 8] 2726 	add	a, #0x10
      000A31 77               [ 8] 2727 	ld	(hl), a
      000A32 D1               [12] 2728 	pop	de
      000A33 D5               [16] 2729 	push	de
      000A34 1A               [ 8] 2730 	ld	a, (de)
      000A35 C6 F0            [ 8] 2731 	add	a, #0xf0
      000A37 57               [ 4] 2732 	ld	d, a
      000A38 C5               [16] 2733 	push	bc
      000A39 C5               [16] 2734 	push	bc
      000A3A F8 0F            [12] 2735 	ldhl	sp,	#15
      000A3C 7E               [ 8] 2736 	ld	a, (hl)
      000A3D F5               [16] 2737 	push	af
      000A3E 33               [ 8] 2738 	inc	sp
      000A3F F8 09            [12] 2739 	ldhl	sp,	#9
      000A41 5E               [ 8] 2740 	ld	e, (hl)
      000A42 7A               [ 4] 2741 	ld	a, d
      000A43 CDr21r04         [24] 2742 	call	_isValidMove
      000A46 5F               [ 4] 2743 	ld	e, a
      000A47 C1               [12] 2744 	pop	bc
      000A48 CB 43            [ 8] 2745 	bit	0, e
      000A4A 20 24            [12] 2746 	jr	NZ, 00101$
                           000A4C  2747 	C$main.c$321$3_0$236	= .
                                   2748 	.globl	C$main.c$321$3_0$236
                                   2749 ;main.c:321: isValidMove(pieces[i].x + SQUARE_SIZE, pieces[i].y + SQUARE_SIZE, currentPlayer, i)) {
      000A4C F8 02            [12] 2750 	ldhl	sp,#2
      000A4E 2A               [ 8] 2751 	ld	a, (hl+)
      000A4F 5F               [ 4] 2752 	ld	e, a
      000A50 2A               [ 8] 2753 	ld	a, (hl+)
      000A51 57               [ 4] 2754 	ld	d, a
      000A52 1A               [ 8] 2755 	ld	a, (de)
      000A53 C6 10            [ 8] 2756 	add	a, #0x10
      000A55 77               [ 8] 2757 	ld	(hl), a
      000A56 D1               [12] 2758 	pop	de
      000A57 D5               [16] 2759 	push	de
      000A58 1A               [ 8] 2760 	ld	a, (de)
      000A59 C6 10            [ 8] 2761 	add	a, #0x10
      000A5B 57               [ 4] 2762 	ld	d, a
      000A5C C5               [16] 2763 	push	bc
      000A5D C5               [16] 2764 	push	bc
      000A5E F8 0F            [12] 2765 	ldhl	sp,	#15
      000A60 7E               [ 8] 2766 	ld	a, (hl)
      000A61 F5               [16] 2767 	push	af
      000A62 33               [ 8] 2768 	inc	sp
      000A63 F8 09            [12] 2769 	ldhl	sp,	#9
      000A65 5E               [ 8] 2770 	ld	e, (hl)
      000A66 7A               [ 4] 2771 	ld	a, d
      000A67 CDr21r04         [24] 2772 	call	_isValidMove
      000A6A 5F               [ 4] 2773 	ld	e, a
      000A6B C1               [12] 2774 	pop	bc
      000A6C CB 43            [ 8] 2775 	bit	0, e
      000A6E 28 04            [12] 2776 	jr	Z, 00109$
      000A70                       2777 00101$:
                           000A70  2778 	C$main.c$322$4_0$237	= .
                                   2779 	.globl	C$main.c$322$4_0$237
                                   2780 ;main.c:322: return true; // Found at least one valid move
      000A70 3E 01            [ 8] 2781 	ld	a, #0x01
      000A72 18 05            [12] 2782 	jr	00110$
      000A74                       2783 00109$:
                           000A74  2784 	C$main.c$317$2_0$235	= .
                                   2785 	.globl	C$main.c$317$2_0$235
                                   2786 ;main.c:317: for (int i = 0; i < numPieces; i++) {
      000A74 03               [ 8] 2787 	inc	bc
      000A75 C3r9Cr09         [16] 2788 	jp	00108$
      000A78                       2789 00106$:
                           000A78  2790 	C$main.c$325$1_0$234	= .
                                   2791 	.globl	C$main.c$325$1_0$234
                                   2792 ;main.c:325: return false; // No valid moves found for any piece
      000A78 AF               [ 4] 2793 	xor	a, a
      000A79                       2794 00110$:
                           000A79  2795 	C$main.c$326$1_0$234	= .
                                   2796 	.globl	C$main.c$326$1_0$234
                                   2797 ;main.c:326: }
      000A79 E8 09            [16] 2798 	add	sp, #9
      000A7B E1               [12] 2799 	pop	hl
      000A7C 33               [ 8] 2800 	inc	sp
      000A7D E9               [ 4] 2801 	jp	(hl)
                           000A7E  2802 	G$main$0$0	= .
                                   2803 	.globl	G$main$0$0
                           000A7E  2804 	C$main.c$327$1_0$238	= .
                                   2805 	.globl	C$main.c$327$1_0$238
                                   2806 ;main.c:327: void main() {
                                   2807 ;	---------------------------------
                                   2808 ; Function main
                                   2809 ; ---------------------------------
      000A7E                       2810 _main::
      000A7E E8 F0            [16] 2811 	add	sp, #-16
                           000A80  2812 	C$main.c$328$1_0$238	= .
                                   2813 	.globl	C$main.c$328$1_0$238
                                   2814 ;main.c:328: font();
      000A80 CDrEEr00         [24] 2815 	call	_font
                           000A83  2816 	C$main.c$329$1_0$238	= .
                                   2817 	.globl	C$main.c$329$1_0$238
                                   2818 ;main.c:329: printTurn();
      000A83 CDrFFr00         [24] 2819 	call	_printTurn
                           000A86  2820 	C$main.c$330$1_0$238	= .
                                   2821 	.globl	C$main.c$330$1_0$238
                                   2822 ;main.c:330: printbkg();
      000A86 CDr32r01         [24] 2823 	call	_printbkg
                           000A89  2824 	C$main.c$331$1_0$238	= .
                                   2825 	.globl	C$main.c$331$1_0$238
                                   2826 ;main.c:331: printSquare();
      000A89 CDr6Ar01         [24] 2827 	call	_printSquare
                           000A8C  2828 	C$main.c$332$1_0$238	= .
                                   2829 	.globl	C$main.c$332$1_0$238
                                   2830 ;main.c:332: printBlack();
      000A8C CDrB8r01         [24] 2831 	call	_printBlack
                           000A8F  2832 	C$main.c$333$1_0$238	= .
                                   2833 	.globl	C$main.c$333$1_0$238
                                   2834 ;main.c:333: printWhite();
      000A8F CDrADr02         [24] 2835 	call	_printWhite
                           000A92  2836 	C$main.c$334$1_0$238	= .
                                   2837 	.globl	C$main.c$334$1_0$238
                                   2838 ;main.c:334: SHOW_BKG;  
      000A92 F0r00            [12] 2839 	ldh	a, (_LCDC_REG + 0)
      000A94 F6 01            [ 8] 2840 	or	a, #0x01
      000A96 E0r00            [12] 2841 	ldh	(_LCDC_REG + 0), a
                           000A98  2842 	C$main.c$335$1_0$238	= .
                                   2843 	.globl	C$main.c$335$1_0$238
                                   2844 ;main.c:335: SHOW_SPRITES;
      000A98 F0r00            [12] 2845 	ldh	a, (_LCDC_REG + 0)
      000A9A F6 02            [ 8] 2846 	or	a, #0x02
      000A9C E0r00            [12] 2847 	ldh	(_LCDC_REG + 0), a
                           000A9E  2848 	C$main.c$336$1_0$238	= .
                                   2849 	.globl	C$main.c$336$1_0$238
                                   2850 ;main.c:336: SHOW_WIN;
      000A9E F0r00            [12] 2851 	ldh	a, (_LCDC_REG + 0)
      000AA0 F6 20            [ 8] 2852 	or	a, #0x20
      000AA2 E0r00            [12] 2853 	ldh	(_LCDC_REG + 0), a
                           000AA4  2854 	C$main.c$337$1_0$238	= .
                                   2855 	.globl	C$main.c$337$1_0$238
                                   2856 ;main.c:337: while(1) {
      000AA4                       2857 00153$:
                           000AA4  2858 	C$main.c$338$2_0$239	= .
                                   2859 	.globl	C$main.c$338$2_0$239
                                   2860 ;main.c:338: joypad_input = joypad();
      000AA4 CDr00r00         [24] 2861 	call	_joypad
      000AA7 21r00r00         [12] 2862 	ld	hl, #_joypad_input
      000AAA 77               [ 8] 2863 	ld	(hl), a
                           000AAB  2864 	C$main.c$340$2_0$239	= .
                                   2865 	.globl	C$main.c$340$2_0$239
                                   2866 ;main.c:340: if (joypad_input != lastButtonState) {
      000AAB 7E               [ 8] 2867 	ld	a, (hl)
      000AAC 21r00r00         [12] 2868 	ld	hl, #_lastButtonState
      000AAF 96               [ 8] 2869 	sub	a, (hl)
      000AB0 28 0E            [12] 2870 	jr	Z, 00104$
                           000AB2  2871 	C$main.c$341$3_0$240	= .
                                   2872 	.globl	C$main.c$341$3_0$240
                                   2873 ;main.c:341: debounceTimer = 0; // Reset the debounce timer
      000AB2 AF               [ 4] 2874 	xor	a, a
      000AB3 21r01r00         [12] 2875 	ld	hl, #_debounceTimer
      000AB6 22               [ 8] 2876 	ld	(hl+), a
      000AB7 77               [ 8] 2877 	ld	(hl), a
                           000AB8  2878 	C$main.c$342$3_0$240	= .
                                   2879 	.globl	C$main.c$342$3_0$240
                                   2880 ;main.c:342: lastButtonState = joypad_input;
      000AB8 FAr00r00         [16] 2881 	ld	a, (#_joypad_input)
      000ABB EAr00r00         [16] 2882 	ld	(#_lastButtonState),a
      000ABE 18 16            [12] 2883 	jr	00105$
      000AC0                       2884 00104$:
                           000AC0  2885 	C$main.c$343$2_0$239	= .
                                   2886 	.globl	C$main.c$343$2_0$239
                                   2887 ;main.c:343: } else if (debounceTimer < DEBOUNCE_DELAY) {
      000AC0 21r01r00         [12] 2888 	ld	hl, #_debounceTimer
      000AC3 2A               [ 8] 2889 	ld	a, (hl+)
      000AC4 D6 06            [ 8] 2890 	sub	a, #0x06
      000AC6 7E               [ 8] 2891 	ld	a, (hl)
      000AC7 DE 00            [ 8] 2892 	sbc	a, #0x00
      000AC9 30 0B            [12] 2893 	jr	NC, 00105$
                           000ACB  2894 	C$main.c$344$3_0$241	= .
                                   2895 	.globl	C$main.c$344$3_0$241
                                   2896 ;main.c:344: debounceTimer += 100; // Increment the debounce timer based on the loop delay (100ms in this code)
      000ACB 2B               [ 8] 2897 	dec	hl
      000ACC 7E               [ 8] 2898 	ld	a, (hl)
      000ACD C6 64            [ 8] 2899 	add	a, #0x64
      000ACF 22               [ 8] 2900 	ld	(hl+), a
      000AD0 7E               [ 8] 2901 	ld	a, (hl)
      000AD1 CE 00            [ 8] 2902 	adc	a, #0x00
      000AD3 77               [ 8] 2903 	ld	(hl), a
                           000AD4  2904 	C$main.c$345$3_0$241	= .
                                   2905 	.globl	C$main.c$345$3_0$241
                                   2906 ;main.c:345: continue; // Skip processing input until the debounce delay is reached
      000AD4 18 CE            [12] 2907 	jr	00153$
      000AD6                       2908 00105$:
                           000AD6  2909 	C$main.c$347$2_0$239	= .
                                   2910 	.globl	C$main.c$347$2_0$239
                                   2911 ;main.c:347: dpad();
      000AD6 CDrBAr00         [24] 2912 	call	_dpad
                           000AD9  2913 	C$main.c$348$2_0$239	= .
                                   2914 	.globl	C$main.c$348$2_0$239
                                   2915 ;main.c:348: if (joypad_input & J_A) {
      000AD9 FAr00r00         [16] 2916 	ld	a, (#_joypad_input)
      000ADC CB 67            [ 8] 2917 	bit	4, a
      000ADE CAr76r0B         [16] 2918 	jp	Z,00189$
                           000AE1  2919 	C$main.c$349$3_0$242	= .
                                   2920 	.globl	C$main.c$349$3_0$242
                                   2921 ;main.c:349: if (pieceSelected == false) {
      000AE1 21r0Ar00         [12] 2922 	ld	hl, #_pieceSelected
      000AE4 CB 46            [12] 2923 	bit	0, (hl)
      000AE6 C2r76r0B         [16] 2924 	jp	NZ, 00189$
                           000AE9  2925 	C$main.c$350$4_0$243	= .
                                   2926 	.globl	C$main.c$350$4_0$243
                                   2927 ;main.c:350: checkCollision(cursorx - 4, cursory - 4, currentPlayer);
      000AE9 21r07r00         [12] 2928 	ld	hl, #_currentPlayer
      000AEC 4E               [ 8] 2929 	ld	c, (hl)
      000AED 06 00            [ 8] 2930 	ld	b, #0x00
      000AEF FAr06r00         [16] 2931 	ld	a, (#_cursory)
      000AF2 C6 FC            [ 8] 2932 	add	a, #0xfc
      000AF4 5F               [ 4] 2933 	ld	e, a
      000AF5 FAr05r00         [16] 2934 	ld	a, (#_cursorx)
      000AF8 C6 FC            [ 8] 2935 	add	a, #0xfc
      000AFA 57               [ 4] 2936 	ld	d, a
      000AFB C5               [16] 2937 	push	bc
      000AFC 7A               [ 4] 2938 	ld	a, d
      000AFD CDr08r06         [24] 2939 	call	_checkCollision
                           000B00  2940 	C$main.c$352$1_0$238	= .
                                   2941 	.globl	C$main.c$352$1_0$238
                                   2942 ;main.c:352: if (selectedPieceIndex >= 4 && selectedPieceIndex < 16){
      000B00 21r03r00         [12] 2943 	ld	hl, #_selectedPieceIndex
      000B03 2A               [ 8] 2944 	ld	a, (hl+)
      000B04 D6 10            [ 8] 2945 	sub	a, #0x10
      000B06 7E               [ 8] 2946 	ld	a, (hl)
      000B07 DE 00            [ 8] 2947 	sbc	a, #0x00
      000B09 56               [ 8] 2948 	ld	d, (hl)
      000B0A 3E 00            [ 8] 2949 	ld	a, #0x00
      000B0C CB 7F            [ 8] 2950 	bit	7,a
      000B0E 28 07            [12] 2951 	jr	Z, 00301$
      000B10 CB 7A            [ 8] 2952 	bit	7, d
      000B12 20 08            [12] 2953 	jr	NZ, 00302$
      000B14 BF               [ 4] 2954 	cp	a, a
      000B15 18 05            [12] 2955 	jr	00302$
      000B17                       2956 00301$:
      000B17 CB 7A            [ 8] 2957 	bit	7, d
      000B19 28 01            [12] 2958 	jr	Z, 00302$
      000B1B 37               [ 4] 2959 	scf
      000B1C                       2960 00302$:
      000B1C 3E 00            [ 8] 2961 	ld	a, #0x00
      000B1E 17               [ 4] 2962 	rla
      000B1F 4F               [ 4] 2963 	ld	c, a
                           000B20  2964 	C$main.c$351$4_0$243	= .
                                   2965 	.globl	C$main.c$351$4_0$243
                                   2966 ;main.c:351: if (currentPlayer == BLACK_PLAYER) {
      000B20 FAr07r00         [16] 2967 	ld	a, (#_currentPlayer)
      000B23 B7               [ 4] 2968 	or	a, a
      000B24 20 29            [12] 2969 	jr	NZ, 00113$
                           000B26  2970 	C$main.c$352$5_0$244	= .
                                   2971 	.globl	C$main.c$352$5_0$244
                                   2972 ;main.c:352: if (selectedPieceIndex >= 4 && selectedPieceIndex < 16){
      000B26 21r03r00         [12] 2973 	ld	hl, #_selectedPieceIndex
      000B29 2A               [ 8] 2974 	ld	a, (hl+)
      000B2A D6 04            [ 8] 2975 	sub	a, #0x04
      000B2C 7E               [ 8] 2976 	ld	a, (hl)
      000B2D DE 00            [ 8] 2977 	sbc	a, #0x00
      000B2F 56               [ 8] 2978 	ld	d, (hl)
      000B30 3E 00            [ 8] 2979 	ld	a, #0x00
      000B32 CB 7F            [ 8] 2980 	bit	7,a
      000B34 28 07            [12] 2981 	jr	Z, 00303$
      000B36 CB 7A            [ 8] 2982 	bit	7, d
      000B38 20 08            [12] 2983 	jr	NZ, 00304$
      000B3A BF               [ 4] 2984 	cp	a, a
      000B3B 18 05            [12] 2985 	jr	00304$
      000B3D                       2986 00303$:
      000B3D CB 7A            [ 8] 2987 	bit	7, d
      000B3F 28 01            [12] 2988 	jr	Z, 00304$
      000B41 37               [ 4] 2989 	scf
      000B42                       2990 00304$:
      000B42 38 32            [12] 2991 	jr	C, 00189$
      000B44 79               [ 4] 2992 	ld	a, c
      000B45 B7               [ 4] 2993 	or	a, a
      000B46 28 2E            [12] 2994 	jr	Z, 00189$
                           000B48  2995 	C$main.c$353$6_0$245	= .
                                   2996 	.globl	C$main.c$353$6_0$245
                                   2997 ;main.c:353: pieceSelected = true;
      000B48 21r0Ar00         [12] 2998 	ld	hl, #_pieceSelected
      000B4B 36 01            [12] 2999 	ld	(hl), #0x01
      000B4D 18 27            [12] 3000 	jr	00189$
      000B4F                       3001 00113$:
                           000B4F  3002 	C$main.c$355$4_0$243	= .
                                   3003 	.globl	C$main.c$355$4_0$243
                                   3004 ;main.c:355: } else if (selectedPieceIndex >= 16 && selectedPieceIndex < 28) {
      000B4F CB 41            [ 8] 3005 	bit	0, c
      000B51 20 23            [12] 3006 	jr	NZ, 00189$
      000B53 21r03r00         [12] 3007 	ld	hl, #_selectedPieceIndex
      000B56 2A               [ 8] 3008 	ld	a, (hl+)
      000B57 D6 1C            [ 8] 3009 	sub	a, #0x1c
      000B59 7E               [ 8] 3010 	ld	a, (hl)
      000B5A DE 00            [ 8] 3011 	sbc	a, #0x00
      000B5C 56               [ 8] 3012 	ld	d, (hl)
      000B5D 3E 00            [ 8] 3013 	ld	a, #0x00
      000B5F CB 7F            [ 8] 3014 	bit	7,a
      000B61 28 07            [12] 3015 	jr	Z, 00305$
      000B63 CB 7A            [ 8] 3016 	bit	7, d
      000B65 20 08            [12] 3017 	jr	NZ, 00306$
      000B67 BF               [ 4] 3018 	cp	a, a
      000B68 18 05            [12] 3019 	jr	00306$
      000B6A                       3020 00305$:
      000B6A CB 7A            [ 8] 3021 	bit	7, d
      000B6C 28 01            [12] 3022 	jr	Z, 00306$
      000B6E 37               [ 4] 3023 	scf
      000B6F                       3024 00306$:
      000B6F 30 05            [12] 3025 	jr	NC, 00189$
                           000B71  3026 	C$main.c$356$5_0$246	= .
                                   3027 	.globl	C$main.c$356$5_0$246
                                   3028 ;main.c:356: pieceSelected = true;
      000B71 21r0Ar00         [12] 3029 	ld	hl, #_pieceSelected
      000B74 36 01            [12] 3030 	ld	(hl), #0x01
                           000B76  3031 	C$main.c$360$1_0$238	= .
                                   3032 	.globl	C$main.c$360$1_0$238
                                   3033 ;main.c:360: while (pieceSelected == true) {
      000B76                       3034 00189$:
      000B76                       3035 00149$:
      000B76 21r0Ar00         [12] 3036 	ld	hl, #_pieceSelected
      000B79 CB 46            [12] 3037 	bit	0, (hl)
      000B7B CAr20r0F         [16] 3038 	jp	Z, 00151$
                           000B7E  3039 	C$main.c$361$3_0$247	= .
                                   3040 	.globl	C$main.c$361$3_0$247
                                   3041 ;main.c:361: delay(100);
      000B7E 11 64 00         [12] 3042 	ld	de, #0x0064
      000B81 CDr00r00         [24] 3043 	call	_delay
                           000B84  3044 	C$main.c$362$3_0$247	= .
                                   3045 	.globl	C$main.c$362$3_0$247
                                   3046 ;main.c:362: joypad_input = joypad(); // Update the input inside the loop
      000B84 CDr00r00         [24] 3047 	call	_joypad
      000B87 EAr00r00         [16] 3048 	ld	(#_joypad_input),a
                           000B8A  3049 	C$main.c$363$3_0$247	= .
                                   3050 	.globl	C$main.c$363$3_0$247
                                   3051 ;main.c:363: dpad();
      000B8A CDrBAr00         [24] 3052 	call	_dpad
                                   3053 ;main.c:364: move_sprite(selectedPieceIndex, cursorx - 4, cursory - 4);
      000B8D FAr06r00         [16] 3054 	ld	a, (#_cursory)
      000B90 C6 FC            [ 8] 3055 	add	a, #0xfc
      000B92 F8 0C            [12] 3056 	ldhl	sp,	#12
      000B94 77               [ 8] 3057 	ld	(hl), a
      000B95 FAr05r00         [16] 3058 	ld	a, (#_cursorx)
      000B98 F8 0F            [12] 3059 	ldhl	sp,	#15
      000B9A 77               [ 8] 3060 	ld	(hl), a
      000B9B 3A               [ 8] 3061 	ld	a, (hl-)
      000B9C 2B               [ 8] 3062 	dec	hl
      000B9D C6 FC            [ 8] 3063 	add	a, #0xfc
      000B9F 77               [ 8] 3064 	ld	(hl), a
      000BA0 FAr03r00         [16] 3065 	ld	a, (#_selectedPieceIndex)
      000BA3 F8 0F            [12] 3066 	ldhl	sp,	#15
      000BA5 77               [ 8] 3067 	ld	(hl), a
                                   3068 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      000BA6 3A               [ 8] 3069 	ld	a, (hl-)
      000BA7 22               [ 8] 3070 	ld	(hl+), a
      000BA8 AF               [ 4] 3071 	xor	a, a
      000BA9 32               [ 8] 3072 	ld	(hl-), a
      000BAA 7E               [ 8] 3073 	ld	a, (hl)
      000BAB F8 0A            [12] 3074 	ldhl	sp,	#10
      000BAD 77               [ 8] 3075 	ld	(hl), a
      000BAE F8 0F            [12] 3076 	ldhl	sp,	#15
      000BB0 7E               [ 8] 3077 	ld	a, (hl)
      000BB1 F8 0B            [12] 3078 	ldhl	sp,	#11
      000BB3 77               [ 8] 3079 	ld	(hl), a
      000BB4 3E 02            [ 8] 3080 	ld	a, #0x02
      000BB6                       3081 00307$:
      000BB6 F8 0A            [12] 3082 	ldhl	sp,	#10
      000BB8 CB 26            [16] 3083 	sla	(hl)
      000BBA 23               [ 8] 3084 	inc	hl
      000BBB CB 16            [16] 3085 	rl	(hl)
      000BBD 3D               [ 4] 3086 	dec	a
      000BBE 20 F6            [12] 3087 	jr	NZ, 00307$
      000BC0 2B               [ 8] 3088 	dec	hl
      000BC1 2A               [ 8] 3089 	ld	a, (hl+)
      000BC2 5F               [ 4] 3090 	ld	e, a
      000BC3 56               [ 8] 3091 	ld	d, (hl)
      000BC4 21r00r00         [12] 3092 	ld	hl, #_shadow_OAM
      000BC7 19               [ 8] 3093 	add	hl, de
      000BC8 E5               [16] 3094 	push	hl
      000BC9 7D               [ 4] 3095 	ld	a, l
      000BCA F8 10            [12] 3096 	ldhl	sp,	#16
      000BCC 77               [ 8] 3097 	ld	(hl), a
      000BCD E1               [12] 3098 	pop	hl
      000BCE 7C               [ 4] 3099 	ld	a, h
      000BCF F8 0F            [12] 3100 	ldhl	sp,	#15
                                   3101 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      000BD1 32               [ 8] 3102 	ld	(hl-), a
      000BD2 2A               [ 8] 3103 	ld	a, (hl+)
      000BD3 5F               [ 4] 3104 	ld	e, a
      000BD4 56               [ 8] 3105 	ld	d, (hl)
      000BD5 F8 0C            [12] 3106 	ldhl	sp,	#12
      000BD7 2A               [ 8] 3107 	ld	a, (hl+)
      000BD8 23               [ 8] 3108 	inc	hl
      000BD9 12               [ 8] 3109 	ld	(de), a
      000BDA 2A               [ 8] 3110 	ld	a, (hl+)
      000BDB 4F               [ 4] 3111 	ld	c, a
      000BDC 3A               [ 8] 3112 	ld	a, (hl-)
      000BDD 2B               [ 8] 3113 	dec	hl
      000BDE 47               [ 4] 3114 	ld	b, a
      000BDF 03               [ 8] 3115 	inc	bc
      000BE0 7E               [ 8] 3116 	ld	a, (hl)
      000BE1 02               [ 8] 3117 	ld	(bc), a
                           000BE2  3118 	C$main.c$365$3_0$247	= .
                                   3119 	.globl	C$main.c$365$3_0$247
                                   3120 ;main.c:365: if (joypad_input & J_A) {
      000BE2 FAr00r00         [16] 3121 	ld	a, (#_joypad_input)
      000BE5 CB 67            [ 8] 3122 	bit	4, a
      000BE7 CAr0Dr0F         [16] 3123 	jp	Z,00146$
                           000BEA  3124 	C$main.c$366$4_0$248	= .
                                   3125 	.globl	C$main.c$366$4_0$248
                                   3126 ;main.c:366: Piece* pieces = (currentPlayer == BLACK_PLAYER) ? blackPieces : whitePieces;
      000BEA FAr07r00         [16] 3127 	ld	a, (#_currentPlayer)
      000BED B7               [ 4] 3128 	or	a, a
      000BEE 20 09            [12] 3129 	jr	NZ, 00158$
      000BF0 F8 0E            [12] 3130 	ldhl	sp,	#14
      000BF2 36r43            [12] 3131 	ld	(hl), #<(_blackPieces)
      000BF4 23               [ 8] 3132 	inc	hl
      000BF5 36s02            [12] 3133 	ld	(hl), #>(_blackPieces)
      000BF7 18 07            [12] 3134 	jr	00159$
      000BF9                       3135 00158$:
      000BF9 F8 0E            [12] 3136 	ldhl	sp,	#14
      000BFB 3Er67            [ 8] 3137 	ld	a, #<(_whitePieces)
      000BFD 22               [ 8] 3138 	ld	(hl+), a
      000BFE 36s02            [12] 3139 	ld	(hl), #>(_whitePieces)
      000C00                       3140 00159$:
      000C00 F8 0E            [12] 3141 	ldhl	sp,	#14
      000C02 7E               [ 8] 3142 	ld	a, (hl)
      000C03 F8 00            [12] 3143 	ldhl	sp,	#0
      000C05 77               [ 8] 3144 	ld	(hl), a
      000C06 F8 0F            [12] 3145 	ldhl	sp,	#15
      000C08 7E               [ 8] 3146 	ld	a, (hl)
      000C09 F8 01            [12] 3147 	ldhl	sp,	#1
      000C0B 77               [ 8] 3148 	ld	(hl), a
                           000C0C  3149 	C$main.c$367$4_0$248	= .
                                   3150 	.globl	C$main.c$367$4_0$248
                                   3151 ;main.c:367: Piece* opponentPieces = (currentPlayer == BLACK_PLAYER) ? whitePieces : blackPieces;
      000C0C FAr07r00         [16] 3152 	ld	a, (#_currentPlayer)
      000C0F B7               [ 4] 3153 	or	a, a
      000C10 20 09            [12] 3154 	jr	NZ, 00160$
      000C12 F8 0E            [12] 3155 	ldhl	sp,	#14
      000C14 3Er67            [ 8] 3156 	ld	a, #<(_whitePieces)
      000C16 22               [ 8] 3157 	ld	(hl+), a
      000C17 36s02            [12] 3158 	ld	(hl), #>(_whitePieces)
      000C19 18 07            [12] 3159 	jr	00161$
      000C1B                       3160 00160$:
      000C1B F8 0E            [12] 3161 	ldhl	sp,	#14
      000C1D 36r43            [12] 3162 	ld	(hl), #<(_blackPieces)
      000C1F 23               [ 8] 3163 	inc	hl
      000C20 36s02            [12] 3164 	ld	(hl), #>(_blackPieces)
      000C22                       3165 00161$:
      000C22 F8 0E            [12] 3166 	ldhl	sp,	#14
      000C24 7E               [ 8] 3167 	ld	a, (hl)
      000C25 F8 02            [12] 3168 	ldhl	sp,	#2
      000C27 77               [ 8] 3169 	ld	(hl), a
      000C28 F8 0F            [12] 3170 	ldhl	sp,	#15
      000C2A 7E               [ 8] 3171 	ld	a, (hl)
      000C2B F8 03            [12] 3172 	ldhl	sp,	#3
      000C2D 77               [ 8] 3173 	ld	(hl), a
                           000C2E  3174 	C$main.c$372$4_0$248	= .
                                   3175 	.globl	C$main.c$372$4_0$248
                                   3176 ;main.c:372: int dx = (cursorx - 4) - pieces[selectedCoords].x;
      000C2E FAr05r00         [16] 3177 	ld	a, (#_cursorx)
      000C31 F8 0E            [12] 3178 	ldhl	sp,	#14
      000C33 22               [ 8] 3179 	ld	(hl+), a
      000C34 AF               [ 4] 3180 	xor	a, a
      000C35 32               [ 8] 3181 	ld	(hl-), a
      000C36 2A               [ 8] 3182 	ld	a, (hl+)
      000C37 5F               [ 4] 3183 	ld	e, a
      000C38 56               [ 8] 3184 	ld	d, (hl)
      000C39 21 04 00         [12] 3185 	ld	hl, #0x0004
      000C3C 7B               [ 4] 3186 	ld	a, e
      000C3D 95               [ 4] 3187 	sub	a, l
      000C3E 5F               [ 4] 3188 	ld	e, a
      000C3F 7A               [ 4] 3189 	ld	a, d
      000C40 9C               [ 4] 3190 	sbc	a, h
      000C41 F8 05            [12] 3191 	ldhl	sp,	#5
      000C43 32               [ 8] 3192 	ld	(hl-), a
      000C44 73               [ 8] 3193 	ld	(hl), e
      000C45 21r08r00         [12] 3194 	ld	hl, #_selectedCoords
      000C48 2A               [ 8] 3195 	ld	a, (hl+)
      000C49 4F               [ 4] 3196 	ld	c, a
      000C4A 46               [ 8] 3197 	ld	b, (hl)
      000C4B 69               [ 4] 3198 	ld	l, c
      000C4C 60               [ 4] 3199 	ld	h, b
      000C4D 29               [ 8] 3200 	add	hl, hl
      000C4E 09               [ 8] 3201 	add	hl, bc
      000C4F E5               [16] 3202 	push	hl
      000C50 7D               [ 4] 3203 	ld	a, l
      000C51 F8 10            [12] 3204 	ldhl	sp,	#16
      000C53 77               [ 8] 3205 	ld	(hl), a
      000C54 E1               [12] 3206 	pop	hl
      000C55 7C               [ 4] 3207 	ld	a, h
      000C56 F8 0F            [12] 3208 	ldhl	sp,	#15
      000C58 77               [ 8] 3209 	ld	(hl), a
      000C59 D1               [12] 3210 	pop	de
      000C5A D5               [16] 3211 	push	de
      000C5B 3A               [ 8] 3212 	ld	a, (hl-)
      000C5C 6E               [ 8] 3213 	ld	l, (hl)
      000C5D 67               [ 4] 3214 	ld	h, a
      000C5E 19               [ 8] 3215 	add	hl, de
      000C5F E5               [16] 3216 	push	hl
      000C60 7D               [ 4] 3217 	ld	a, l
      000C61 F8 0E            [12] 3218 	ldhl	sp,	#14
      000C63 77               [ 8] 3219 	ld	(hl), a
      000C64 E1               [12] 3220 	pop	hl
      000C65 7C               [ 4] 3221 	ld	a, h
      000C66 F8 0D            [12] 3222 	ldhl	sp,	#13
      000C68 32               [ 8] 3223 	ld	(hl-), a
      000C69 2A               [ 8] 3224 	ld	a, (hl+)
      000C6A 5F               [ 4] 3225 	ld	e, a
      000C6B 2A               [ 8] 3226 	ld	a, (hl+)
      000C6C 23               [ 8] 3227 	inc	hl
      000C6D 57               [ 4] 3228 	ld	d, a
      000C6E 1A               [ 8] 3229 	ld	a, (de)
      000C6F 77               [ 8] 3230 	ld	(hl), a
      000C70 7E               [ 8] 3231 	ld	a, (hl)
      000C71 F8 06            [12] 3232 	ldhl	sp,	#6
      000C73 22               [ 8] 3233 	ld	(hl+), a
      000C74 AF               [ 4] 3234 	xor	a, a
      000C75 32               [ 8] 3235 	ld	(hl-), a
      000C76 2B               [ 8] 3236 	dec	hl
      000C77 2B               [ 8] 3237 	dec	hl
      000C78 2A               [ 8] 3238 	ld	a, (hl+)
      000C79 5F               [ 4] 3239 	ld	e, a
      000C7A 2A               [ 8] 3240 	ld	a, (hl+)
      000C7B 57               [ 4] 3241 	ld	d, a
      000C7C 2A               [ 8] 3242 	ld	a,	(hl+)
      000C7D 66               [ 8] 3243 	ld	h, (hl)
      000C7E 6F               [ 4] 3244 	ld	l, a
      000C7F 7B               [ 4] 3245 	ld	a, e
      000C80 95               [ 4] 3246 	sub	a, l
      000C81 5F               [ 4] 3247 	ld	e, a
      000C82 7A               [ 4] 3248 	ld	a, d
      000C83 9C               [ 4] 3249 	sbc	a, h
      000C84 F8 0F            [12] 3250 	ldhl	sp,	#15
      000C86 32               [ 8] 3251 	ld	(hl-), a
      000C87 73               [ 8] 3252 	ld	(hl), e
      000C88 7E               [ 8] 3253 	ld	a, (hl)
      000C89 F8 08            [12] 3254 	ldhl	sp,	#8
      000C8B 77               [ 8] 3255 	ld	(hl), a
      000C8C F8 0F            [12] 3256 	ldhl	sp,	#15
      000C8E 7E               [ 8] 3257 	ld	a, (hl)
      000C8F F8 09            [12] 3258 	ldhl	sp,	#9
      000C91 77               [ 8] 3259 	ld	(hl), a
                           000C92  3260 	C$main.c$373$4_0$248	= .
                                   3261 	.globl	C$main.c$373$4_0$248
                                   3262 ;main.c:373: int dy = (cursory - 4) - pieces[selectedCoords].y;
      000C92 FAr06r00         [16] 3263 	ld	a, (#_cursory)
      000C95 F8 0E            [12] 3264 	ldhl	sp,	#14
      000C97 22               [ 8] 3265 	ld	(hl+), a
      000C98 AF               [ 4] 3266 	xor	a, a
      000C99 32               [ 8] 3267 	ld	(hl-), a
      000C9A 2A               [ 8] 3268 	ld	a, (hl+)
      000C9B 5F               [ 4] 3269 	ld	e, a
      000C9C 56               [ 8] 3270 	ld	d, (hl)
      000C9D 21 04 00         [12] 3271 	ld	hl, #0x0004
      000CA0 7B               [ 4] 3272 	ld	a, e
      000CA1 95               [ 4] 3273 	sub	a, l
      000CA2 5F               [ 4] 3274 	ld	e, a
      000CA3 7A               [ 4] 3275 	ld	a, d
      000CA4 9C               [ 4] 3276 	sbc	a, h
      000CA5 F8 0B            [12] 3277 	ldhl	sp,	#11
      000CA7 32               [ 8] 3278 	ld	(hl-), a
      000CA8 73               [ 8] 3279 	ld	(hl), e
      000CA9 F8 0C            [12] 3280 	ldhl	sp,#12
      000CAB 2A               [ 8] 3281 	ld	a, (hl+)
      000CAC 5F               [ 4] 3282 	ld	e, a
      000CAD 56               [ 8] 3283 	ld	d, (hl)
      000CAE 6B               [ 4] 3284 	ld	l, e
      000CAF 62               [ 4] 3285 	ld	h, d
      000CB0 23               [ 8] 3286 	inc	hl
      000CB1 E5               [16] 3287 	push	hl
      000CB2 7D               [ 4] 3288 	ld	a, l
      000CB3 F8 10            [12] 3289 	ldhl	sp,	#16
      000CB5 77               [ 8] 3290 	ld	(hl), a
      000CB6 E1               [12] 3291 	pop	hl
      000CB7 7C               [ 4] 3292 	ld	a, h
      000CB8 F8 0F            [12] 3293 	ldhl	sp,	#15
      000CBA 32               [ 8] 3294 	ld	(hl-), a
      000CBB 2A               [ 8] 3295 	ld	a, (hl+)
      000CBC 5F               [ 4] 3296 	ld	e, a
      000CBD 56               [ 8] 3297 	ld	d, (hl)
      000CBE 1A               [ 8] 3298 	ld	a, (de)
      000CBF 77               [ 8] 3299 	ld	(hl), a
      000CC0 7E               [ 8] 3300 	ld	a, (hl)
      000CC1 F8 0C            [12] 3301 	ldhl	sp,	#12
      000CC3 22               [ 8] 3302 	ld	(hl+), a
      000CC4 AF               [ 4] 3303 	xor	a, a
      000CC5 32               [ 8] 3304 	ld	(hl-), a
      000CC6 2B               [ 8] 3305 	dec	hl
      000CC7 2B               [ 8] 3306 	dec	hl
      000CC8 2A               [ 8] 3307 	ld	a, (hl+)
      000CC9 5F               [ 4] 3308 	ld	e, a
      000CCA 2A               [ 8] 3309 	ld	a, (hl+)
      000CCB 57               [ 4] 3310 	ld	d, a
      000CCC 2A               [ 8] 3311 	ld	a,	(hl+)
      000CCD 66               [ 8] 3312 	ld	h, (hl)
      000CCE 6F               [ 4] 3313 	ld	l, a
      000CCF 7B               [ 4] 3314 	ld	a, e
      000CD0 95               [ 4] 3315 	sub	a, l
      000CD1 5F               [ 4] 3316 	ld	e, a
      000CD2 7A               [ 4] 3317 	ld	a, d
      000CD3 9C               [ 4] 3318 	sbc	a, h
      000CD4 F8 0F            [12] 3319 	ldhl	sp,	#15
      000CD6 32               [ 8] 3320 	ld	(hl-), a
      000CD7 73               [ 8] 3321 	ld	(hl), e
                           000CD8  3322 	C$main.c$374$4_0$248	= .
                                   3323 	.globl	C$main.c$374$4_0$248
                                   3324 ;main.c:374: if (cursorx - 4 == pieces[selectedCoords].x && cursory - 4 == pieces[selectedCoords].y) {
      000CD8 F8 04            [12] 3325 	ldhl	sp,	#4
      000CDA 2A               [ 8] 3326 	ld	a, (hl+)
      000CDB 23               [ 8] 3327 	inc	hl
      000CDC 96               [ 8] 3328 	sub	a, (hl)
      000CDD 20 14            [12] 3329 	jr	NZ, 00142$
      000CDF 2B               [ 8] 3330 	dec	hl
      000CE0 2A               [ 8] 3331 	ld	a, (hl+)
      000CE1 23               [ 8] 3332 	inc	hl
      000CE2 96               [ 8] 3333 	sub	a, (hl)
      000CE3 20 0E            [12] 3334 	jr	NZ, 00142$
      000CE5 F8 0A            [12] 3335 	ldhl	sp,	#10
      000CE7 2A               [ 8] 3336 	ld	a, (hl+)
      000CE8 23               [ 8] 3337 	inc	hl
      000CE9 96               [ 8] 3338 	sub	a, (hl)
      000CEA 20 07            [12] 3339 	jr	NZ, 00311$
      000CEC 2B               [ 8] 3340 	dec	hl
      000CED 2A               [ 8] 3341 	ld	a, (hl+)
      000CEE 23               [ 8] 3342 	inc	hl
      000CEF 96               [ 8] 3343 	sub	a, (hl)
      000CF0 CAr0Dr0F         [16] 3344 	jp	Z,00146$
      000CF3                       3345 00311$:
      000CF3                       3346 00142$:
                           000CF3  3347 	C$main.c$376$4_0$248	= .
                                   3348 	.globl	C$main.c$376$4_0$248
                                   3349 ;main.c:376: } else if (isValidMove(cursorx - 4, cursory - 4, currentPlayer, selectedCoords)) {
      000CF3 FAr06r00         [16] 3350 	ld	a, (#_cursory)
      000CF6 C6 FC            [ 8] 3351 	add	a, #0xfc
      000CF8 5F               [ 4] 3352 	ld	e, a
      000CF9 FAr05r00         [16] 3353 	ld	a, (#_cursorx)
      000CFC C6 FC            [ 8] 3354 	add	a, #0xfc
      000CFE 4F               [ 4] 3355 	ld	c, a
      000CFF 21r08r00         [12] 3356 	ld	hl, #_selectedCoords
      000D02 6E               [ 8] 3357 	ld	l, (hl)
                                   3358 ;	spillPairReg hl
                                   3359 ;	spillPairReg hl
      000D03 FAr09r00         [16] 3360 	ld	a, (_selectedCoords + 1)
      000D06 67               [ 4] 3361 	ld	h, a
                                   3362 ;	spillPairReg hl
                                   3363 ;	spillPairReg hl
      000D07 E5               [16] 3364 	push	hl
      000D08 FAr07r00         [16] 3365 	ld	a, (#_currentPlayer)
      000D0B F5               [16] 3366 	push	af
      000D0C 33               [ 8] 3367 	inc	sp
      000D0D 79               [ 4] 3368 	ld	a, c
      000D0E CDr21r04         [24] 3369 	call	_isValidMove
      000D11 CB 47            [ 8] 3370 	bit	0,a
      000D13 CAr0Dr0F         [16] 3371 	jp	Z, 00146$
                           000D16  3372 	C$main.c$377$5_0$250	= .
                                   3373 	.globl	C$main.c$377$5_0$250
                                   3374 ;main.c:377: if (hasValidCaptureMoves(currentPlayer)) {
      000D16 FAr07r00         [16] 3375 	ld	a, (#_currentPlayer)
      000D19 CDrD5r06         [24] 3376 	call	_hasValidCaptureMoves
      000D1C CB 47            [ 8] 3377 	bit	0,a
      000D1E CAr48r0E         [16] 3378 	jp	Z, 00137$
                           000D21  3379 	C$main.c$378$6_0$251	= .
                                   3380 	.globl	C$main.c$378$6_0$251
                                   3381 ;main.c:378: if (abs(dx) == 2 * SQUARE_SIZE || abs(dy) == 2 * SQUARE_SIZE) {
      000D21 F8 08            [12] 3382 	ldhl	sp,	#8
      000D23 2A               [ 8] 3383 	ld	a, (hl+)
      000D24 5F               [ 4] 3384 	ld	e, a
      000D25 56               [ 8] 3385 	ld	d, (hl)
      000D26 D5               [16] 3386 	push	de
      000D27 CDr00r00         [24] 3387 	call	_abs
      000D2A E1               [12] 3388 	pop	hl
      000D2B 7B               [ 4] 3389 	ld	a, e
      000D2C D6 20            [ 8] 3390 	sub	a, #0x20
      000D2E B2               [ 4] 3391 	or	a, d
      000D2F 28 11            [12] 3392 	jr	Z, 00127$
      000D31 F8 0E            [12] 3393 	ldhl	sp,	#14
      000D33 2A               [ 8] 3394 	ld	a, (hl+)
      000D34 5F               [ 4] 3395 	ld	e, a
      000D35 56               [ 8] 3396 	ld	d, (hl)
      000D36 D5               [16] 3397 	push	de
      000D37 CDr00r00         [24] 3398 	call	_abs
      000D3A E1               [12] 3399 	pop	hl
      000D3B 7B               [ 4] 3400 	ld	a, e
      000D3C D6 20            [ 8] 3401 	sub	a, #0x20
      000D3E B2               [ 4] 3402 	or	a, d
      000D3F C2r0Dr0F         [16] 3403 	jp	NZ,00146$
      000D42                       3404 00127$:
                           000D42  3405 	C$main.c$379$7_0$252	= .
                                   3406 	.globl	C$main.c$379$7_0$252
                                   3407 ;main.c:379: int capturedIndex = getCaptureIndex(((cursorx - 4) - (dx/2)), ((cursory - 4) - (dy/2)), opponentPieces, numOpponentPieces);
      000D42 FAr06r00         [16] 3408 	ld	a, (#_cursory)
      000D45 C6 FC            [ 8] 3409 	add	a, #0xfc
      000D47 F8 0D            [12] 3410 	ldhl	sp,	#13
      000D49 22               [ 8] 3411 	ld	(hl+), a
      000D4A 7E               [ 8] 3412 	ld	a, (hl)
      000D4B F8 0B            [12] 3413 	ldhl	sp,	#11
      000D4D 77               [ 8] 3414 	ld	(hl), a
      000D4E F8 0F            [12] 3415 	ldhl	sp,	#15
      000D50 7E               [ 8] 3416 	ld	a, (hl)
      000D51 F8 0C            [12] 3417 	ldhl	sp,	#12
      000D53 77               [ 8] 3418 	ld	(hl), a
      000D54 F8 0F            [12] 3419 	ldhl	sp,	#15
      000D56 CB 7E            [12] 3420 	bit	7, (hl)
      000D58 28 11            [12] 3421 	jr	Z, 00162$
      000D5A 2B               [ 8] 3422 	dec	hl
      000D5B 2A               [ 8] 3423 	ld	a, (hl+)
      000D5C 5F               [ 4] 3424 	ld	e, a
      000D5D 56               [ 8] 3425 	ld	d, (hl)
      000D5E 6B               [ 4] 3426 	ld	l, e
      000D5F 62               [ 4] 3427 	ld	h, d
      000D60 23               [ 8] 3428 	inc	hl
      000D61 E5               [16] 3429 	push	hl
      000D62 7D               [ 4] 3430 	ld	a, l
      000D63 F8 0D            [12] 3431 	ldhl	sp,	#13
      000D65 77               [ 8] 3432 	ld	(hl), a
      000D66 E1               [12] 3433 	pop	hl
      000D67 7C               [ 4] 3434 	ld	a, h
      000D68 F8 0C            [12] 3435 	ldhl	sp,	#12
      000D6A 77               [ 8] 3436 	ld	(hl), a
      000D6B                       3437 00162$:
      000D6B F8 0B            [12] 3438 	ldhl	sp,#11
      000D6D 2A               [ 8] 3439 	ld	a, (hl+)
      000D6E 4F               [ 4] 3440 	ld	c, a
      000D6F 2A               [ 8] 3441 	ld	a, (hl+)
      000D70 47               [ 4] 3442 	ld	b, a
      000D71 CB 28            [ 8] 3443 	sra	b
      000D73 CB 19            [ 8] 3444 	rr	c
      000D75 3A               [ 8] 3445 	ld	a, (hl-)
      000D76 91               [ 4] 3446 	sub	a, c
      000D77 77               [ 8] 3447 	ld	(hl), a
      000D78 FAr05r00         [16] 3448 	ld	a, (#_cursorx)
      000D7B C6 FC            [ 8] 3449 	add	a, #0xfc
      000D7D F8 0D            [12] 3450 	ldhl	sp,	#13
      000D7F 77               [ 8] 3451 	ld	(hl), a
      000D80 F8 08            [12] 3452 	ldhl	sp,	#8
      000D82 7E               [ 8] 3453 	ld	a, (hl)
      000D83 F8 0E            [12] 3454 	ldhl	sp,	#14
      000D85 77               [ 8] 3455 	ld	(hl), a
      000D86 F8 09            [12] 3456 	ldhl	sp,	#9
      000D88 7E               [ 8] 3457 	ld	a, (hl)
      000D89 F8 0F            [12] 3458 	ldhl	sp,	#15
      000D8B 77               [ 8] 3459 	ld	(hl), a
      000D8C F8 09            [12] 3460 	ldhl	sp,	#9
      000D8E CB 7E            [12] 3461 	bit	7, (hl)
      000D90 28 11            [12] 3462 	jr	Z, 00163$
      000D92 2B               [ 8] 3463 	dec	hl
      000D93 2A               [ 8] 3464 	ld	a, (hl+)
      000D94 5F               [ 4] 3465 	ld	e, a
      000D95 56               [ 8] 3466 	ld	d, (hl)
      000D96 6B               [ 4] 3467 	ld	l, e
      000D97 62               [ 4] 3468 	ld	h, d
      000D98 23               [ 8] 3469 	inc	hl
      000D99 E5               [16] 3470 	push	hl
      000D9A 7D               [ 4] 3471 	ld	a, l
      000D9B F8 10            [12] 3472 	ldhl	sp,	#16
      000D9D 77               [ 8] 3473 	ld	(hl), a
      000D9E E1               [12] 3474 	pop	hl
      000D9F 7C               [ 4] 3475 	ld	a, h
      000DA0 F8 0F            [12] 3476 	ldhl	sp,	#15
      000DA2 77               [ 8] 3477 	ld	(hl), a
      000DA3                       3478 00163$:
      000DA3 F8 0F            [12] 3479 	ldhl	sp,	#15
      000DA5 CB 2E            [16] 3480 	sra	(hl)
      000DA7 2B               [ 8] 3481 	dec	hl
      000DA8 CB 1E            [16] 3482 	rr	(hl)
      000DAA 2A               [ 8] 3483 	ld	a, (hl+)
      000DAB 32               [ 8] 3484 	ld	(hl-), a
      000DAC 2B               [ 8] 3485 	dec	hl
      000DAD 2A               [ 8] 3486 	ld	a, (hl+)
      000DAE 23               [ 8] 3487 	inc	hl
      000DAF 96               [ 8] 3488 	sub	a, (hl)
      000DB0 77               [ 8] 3489 	ld	(hl), a
      000DB1 11 0C 00         [12] 3490 	ld	de, #0x000c
      000DB4 D5               [16] 3491 	push	de
      000DB5 F8 04            [12] 3492 	ldhl	sp,	#4
      000DB7 2A               [ 8] 3493 	ld	a, (hl+)
      000DB8 5F               [ 4] 3494 	ld	e, a
      000DB9 56               [ 8] 3495 	ld	d, (hl)
      000DBA D5               [16] 3496 	push	de
      000DBB F8 10            [12] 3497 	ldhl	sp,	#16
      000DBD 5E               [ 8] 3498 	ld	e, (hl)
      000DBE F8 13            [12] 3499 	ldhl	sp,	#19
      000DC0 7E               [ 8] 3500 	ld	a, (hl)
      000DC1 CDrBBr03         [24] 3501 	call	_getCaptureIndex
                           000DC4  3502 	C$main.c$380$7_0$252	= .
                                   3503 	.globl	C$main.c$380$7_0$252
                                   3504 ;main.c:380: if (capturedIndex != -1) {
      000DC4 79               [ 4] 3505 	ld	a, c
      000DC5 A0               [ 4] 3506 	and	a, b
      000DC6 3C               [ 4] 3507 	inc	a
      000DC7 CAr0Dr0F         [16] 3508 	jp	Z,00146$
                           000DCA  3509 	C$main.c$381$8_0$253	= .
                                   3510 	.globl	C$main.c$381$8_0$253
                                   3511 ;main.c:381: opponentPieces[capturedIndex].x = 0;
      000DCA 69               [ 4] 3512 	ld	l, c
      000DCB 60               [ 4] 3513 	ld	h, b
      000DCC 29               [ 8] 3514 	add	hl, hl
      000DCD 09               [ 8] 3515 	add	hl, bc
      000DCE 4D               [ 4] 3516 	ld	c, l
      000DCF 44               [ 4] 3517 	ld	b, h
      000DD0 F8 02            [12] 3518 	ldhl	sp,	#2
      000DD2 2A               [ 8] 3519 	ld	a,	(hl+)
      000DD3 66               [ 8] 3520 	ld	h, (hl)
      000DD4 6F               [ 4] 3521 	ld	l, a
      000DD5 09               [ 8] 3522 	add	hl, bc
      000DD6 4D               [ 4] 3523 	ld	c, l
      000DD7 44               [ 4] 3524 	ld	b, h
      000DD8 AF               [ 4] 3525 	xor	a, a
      000DD9 02               [ 8] 3526 	ld	(bc), a
                           000DDA  3527 	C$main.c$382$8_0$253	= .
                                   3528 	.globl	C$main.c$382$8_0$253
                                   3529 ;main.c:382: opponentPieces[capturedIndex].y = 0;
      000DDA 03               [ 8] 3530 	inc	bc
      000DDB AF               [ 4] 3531 	xor	a, a
      000DDC 02               [ 8] 3532 	ld	(bc), a
                           000DDD  3533 	C$main.c$383$8_0$253	= .
                                   3534 	.globl	C$main.c$383$8_0$253
                                   3535 ;main.c:383: pieces[selectedCoords].x = cursorx - 4; 
      000DDD 21r08r00         [12] 3536 	ld	hl, #_selectedCoords
      000DE0 2A               [ 8] 3537 	ld	a, (hl+)
      000DE1 4F               [ 4] 3538 	ld	c, a
      000DE2 46               [ 8] 3539 	ld	b, (hl)
      000DE3 69               [ 4] 3540 	ld	l, c
      000DE4 60               [ 4] 3541 	ld	h, b
      000DE5 29               [ 8] 3542 	add	hl, hl
      000DE6 09               [ 8] 3543 	add	hl, bc
      000DE7 4D               [ 4] 3544 	ld	c, l
      000DE8 44               [ 4] 3545 	ld	b, h
      000DE9 E1               [12] 3546 	pop	hl
      000DEA E5               [16] 3547 	push	hl
      000DEB 09               [ 8] 3548 	add	hl, bc
      000DEC 4D               [ 4] 3549 	ld	c, l
      000DED 44               [ 4] 3550 	ld	b, h
      000DEE FAr05r00         [16] 3551 	ld	a, (#_cursorx)
      000DF1 C6 FC            [ 8] 3552 	add	a, #0xfc
      000DF3 02               [ 8] 3553 	ld	(bc), a
                           000DF4  3554 	C$main.c$384$8_0$253	= .
                                   3555 	.globl	C$main.c$384$8_0$253
                                   3556 ;main.c:384: pieces[selectedCoords].y = cursory - 4;
      000DF4 21r08r00         [12] 3557 	ld	hl, #_selectedCoords
      000DF7 2A               [ 8] 3558 	ld	a, (hl+)
      000DF8 4F               [ 4] 3559 	ld	c, a
      000DF9 46               [ 8] 3560 	ld	b, (hl)
      000DFA 69               [ 4] 3561 	ld	l, c
      000DFB 60               [ 4] 3562 	ld	h, b
      000DFC 29               [ 8] 3563 	add	hl, hl
      000DFD 09               [ 8] 3564 	add	hl, bc
      000DFE 4D               [ 4] 3565 	ld	c, l
      000DFF 44               [ 4] 3566 	ld	b, h
      000E00 E1               [12] 3567 	pop	hl
      000E01 E5               [16] 3568 	push	hl
      000E02 09               [ 8] 3569 	add	hl, bc
      000E03 23               [ 8] 3570 	inc	hl
      000E04 4D               [ 4] 3571 	ld	c, l
      000E05 44               [ 4] 3572 	ld	b, h
      000E06 FAr06r00         [16] 3573 	ld	a, (#_cursory)
      000E09 C6 FC            [ 8] 3574 	add	a, #0xfc
      000E0B 02               [ 8] 3575 	ld	(bc), a
                           000E0C  3576 	C$main.c$385$8_0$253	= .
                                   3577 	.globl	C$main.c$385$8_0$253
                                   3578 ;main.c:385: promoteToKing(pieces, numPieces, currentPlayer);
      000E0C FAr07r00         [16] 3579 	ld	a, (#_currentPlayer)
      000E0F F5               [16] 3580 	push	af
      000E10 33               [ 8] 3581 	inc	sp
      000E11 01 0C 00         [12] 3582 	ld	bc, #0x000c
      000E14 F8 01            [12] 3583 	ldhl	sp,	#1
      000E16 2A               [ 8] 3584 	ld	a, (hl+)
      000E17 5F               [ 4] 3585 	ld	e, a
      000E18 56               [ 8] 3586 	ld	d, (hl)
      000E19 CDr41r00         [24] 3587 	call	_promoteToKing
                           000E1C  3588 	C$main.c$386$8_0$253	= .
                                   3589 	.globl	C$main.c$386$8_0$253
                                   3590 ;main.c:386: printBlack();
      000E1C CDrB8r01         [24] 3591 	call	_printBlack
                           000E1F  3592 	C$main.c$387$8_0$253	= .
                                   3593 	.globl	C$main.c$387$8_0$253
                                   3594 ;main.c:387: printWhite();
      000E1F CDrADr02         [24] 3595 	call	_printWhite
                           000E22  3596 	C$main.c$388$8_0$253	= .
                                   3597 	.globl	C$main.c$388$8_0$253
                                   3598 ;main.c:388: if (hasValidCaptureMoves(currentPlayer)) {
      000E22 FAr07r00         [16] 3599 	ld	a, (#_currentPlayer)
      000E25 CDrD5r06         [24] 3600 	call	_hasValidCaptureMoves
      000E28 CB 47            [ 8] 3601 	bit	0,a
      000E2A C2r0Dr0F         [16] 3602 	jp	NZ, 00146$
                           000E2D  3603 	C$main.c$391$9_0$255	= .
                                   3604 	.globl	C$main.c$391$9_0$255
                                   3605 ;main.c:391: if (currentPlayer == BLACK_PLAYER) {
      000E2D 21r07r00         [12] 3606 	ld	hl, #_currentPlayer
      000E30 7E               [ 8] 3607 	ld	a, (hl)
      000E31 B7               [ 4] 3608 	or	a, a
      000E32 20 04            [12] 3609 	jr	NZ, 00120$
                           000E34  3610 	C$main.c$392$10_0$256	= .
                                   3611 	.globl	C$main.c$392$10_0$256
                                   3612 ;main.c:392: currentPlayer = WHITE_PLAYER;
      000E34 36 01            [12] 3613 	ld	(hl), #0x01
      000E36 18 05            [12] 3614 	jr	00121$
      000E38                       3615 00120$:
                           000E38  3616 	C$main.c$394$10_0$257	= .
                                   3617 	.globl	C$main.c$394$10_0$257
                                   3618 ;main.c:394: currentPlayer = BLACK_PLAYER;
      000E38 21r07r00         [12] 3619 	ld	hl, #_currentPlayer
      000E3B 36 00            [12] 3620 	ld	(hl), #0x00
      000E3D                       3621 00121$:
                           000E3D  3622 	C$main.c$396$9_0$255	= .
                                   3623 	.globl	C$main.c$396$9_0$255
                                   3624 ;main.c:396: printTurn();
      000E3D CDrFFr00         [24] 3625 	call	_printTurn
                           000E40  3626 	C$main.c$397$9_0$255	= .
                                   3627 	.globl	C$main.c$397$9_0$255
                                   3628 ;main.c:397: pieceSelected = false;
      000E40 21r0Ar00         [12] 3629 	ld	hl, #_pieceSelected
      000E43 36 00            [12] 3630 	ld	(hl), #0x00
                           000E45  3631 	C$main.c$398$9_0$255	= .
                                   3632 	.globl	C$main.c$398$9_0$255
                                   3633 ;main.c:398: break; // Exit the loop after a piece has been moved
      000E45 C3r20r0F         [16] 3634 	jp	00151$
      000E48                       3635 00137$:
                           000E48  3636 	C$main.c$402$5_0$250	= .
                                   3637 	.globl	C$main.c$402$5_0$250
                                   3638 ;main.c:402: } else if (abs(dx) == 1 * SQUARE_SIZE || abs(dy) == 1 * SQUARE_SIZE) {
      000E48 F8 08            [12] 3639 	ldhl	sp,	#8
      000E4A 2A               [ 8] 3640 	ld	a, (hl+)
      000E4B 5F               [ 4] 3641 	ld	e, a
      000E4C 56               [ 8] 3642 	ld	d, (hl)
      000E4D D5               [16] 3643 	push	de
      000E4E CDr00r00         [24] 3644 	call	_abs
      000E51 E1               [12] 3645 	pop	hl
      000E52 7B               [ 4] 3646 	ld	a, e
      000E53 D6 10            [ 8] 3647 	sub	a, #0x10
      000E55 B2               [ 4] 3648 	or	a, d
      000E56 28 11            [12] 3649 	jr	Z, 00133$
      000E58 F8 0E            [12] 3650 	ldhl	sp,	#14
      000E5A 2A               [ 8] 3651 	ld	a, (hl+)
      000E5B 5F               [ 4] 3652 	ld	e, a
      000E5C 56               [ 8] 3653 	ld	d, (hl)
      000E5D D5               [16] 3654 	push	de
      000E5E CDr00r00         [24] 3655 	call	_abs
      000E61 E1               [12] 3656 	pop	hl
      000E62 7B               [ 4] 3657 	ld	a, e
      000E63 D6 10            [ 8] 3658 	sub	a, #0x10
      000E65 B2               [ 4] 3659 	or	a, d
      000E66 C2r0Dr0F         [16] 3660 	jp	NZ,00146$
      000E69                       3661 00133$:
                           000E69  3662 	C$main.c$403$6_0$258	= .
                                   3663 	.globl	C$main.c$403$6_0$258
                                   3664 ;main.c:403: pieces[selectedCoords].x = cursorx - 4; 
      000E69 21r08r00         [12] 3665 	ld	hl, #_selectedCoords
      000E6C 2A               [ 8] 3666 	ld	a, (hl+)
      000E6D 4F               [ 4] 3667 	ld	c, a
      000E6E 46               [ 8] 3668 	ld	b, (hl)
      000E6F 69               [ 4] 3669 	ld	l, c
      000E70 60               [ 4] 3670 	ld	h, b
      000E71 29               [ 8] 3671 	add	hl, hl
      000E72 09               [ 8] 3672 	add	hl, bc
      000E73 E5               [16] 3673 	push	hl
      000E74 7D               [ 4] 3674 	ld	a, l
      000E75 F8 0D            [12] 3675 	ldhl	sp,	#13
      000E77 77               [ 8] 3676 	ld	(hl), a
      000E78 E1               [12] 3677 	pop	hl
      000E79 7C               [ 4] 3678 	ld	a, h
      000E7A F8 0C            [12] 3679 	ldhl	sp,	#12
      000E7C 32               [ 8] 3680 	ld	(hl-), a
      000E7D 2A               [ 8] 3681 	ld	a, (hl+)
      000E7E 5F               [ 4] 3682 	ld	e, a
      000E7F 56               [ 8] 3683 	ld	d, (hl)
      000E80 E1               [12] 3684 	pop	hl
      000E81 E5               [16] 3685 	push	hl
      000E82 19               [ 8] 3686 	add	hl, de
      000E83 E5               [16] 3687 	push	hl
      000E84 7D               [ 4] 3688 	ld	a, l
      000E85 F8 0F            [12] 3689 	ldhl	sp,	#15
      000E87 77               [ 8] 3690 	ld	(hl), a
      000E88 E1               [12] 3691 	pop	hl
      000E89 7C               [ 4] 3692 	ld	a, h
      000E8A F8 0E            [12] 3693 	ldhl	sp,	#14
      000E8C 77               [ 8] 3694 	ld	(hl), a
      000E8D FAr05r00         [16] 3695 	ld	a, (#_cursorx)
      000E90 F8 0F            [12] 3696 	ldhl	sp,	#15
      000E92 77               [ 8] 3697 	ld	(hl), a
      000E93 3A               [ 8] 3698 	ld	a, (hl-)
      000E94 C6 FC            [ 8] 3699 	add	a, #0xfc
      000E96 4F               [ 4] 3700 	ld	c, a
      000E97 3A               [ 8] 3701 	ld	a, (hl-)
      000E98 6E               [ 8] 3702 	ld	l, (hl)
      000E99 67               [ 4] 3703 	ld	h, a
      000E9A 71               [ 8] 3704 	ld	(hl), c
                           000E9B  3705 	C$main.c$404$6_0$258	= .
                                   3706 	.globl	C$main.c$404$6_0$258
                                   3707 ;main.c:404: pieces[selectedCoords].y = cursory - 4;
      000E9B 21r08r00         [12] 3708 	ld	hl, #_selectedCoords
      000E9E 2A               [ 8] 3709 	ld	a, (hl+)
      000E9F 4F               [ 4] 3710 	ld	c, a
      000EA0 46               [ 8] 3711 	ld	b, (hl)
      000EA1 69               [ 4] 3712 	ld	l, c
      000EA2 60               [ 4] 3713 	ld	h, b
      000EA3 29               [ 8] 3714 	add	hl, hl
      000EA4 09               [ 8] 3715 	add	hl, bc
      000EA5 E5               [16] 3716 	push	hl
      000EA6 7D               [ 4] 3717 	ld	a, l
      000EA7 F8 10            [12] 3718 	ldhl	sp,	#16
      000EA9 77               [ 8] 3719 	ld	(hl), a
      000EAA E1               [12] 3720 	pop	hl
      000EAB 7C               [ 4] 3721 	ld	a, h
      000EAC F8 0F            [12] 3722 	ldhl	sp,	#15
      000EAE 32               [ 8] 3723 	ld	(hl-), a
      000EAF 2A               [ 8] 3724 	ld	a, (hl+)
      000EB0 5F               [ 4] 3725 	ld	e, a
      000EB1 56               [ 8] 3726 	ld	d, (hl)
      000EB2 E1               [12] 3727 	pop	hl
      000EB3 E5               [16] 3728 	push	hl
      000EB4 19               [ 8] 3729 	add	hl, de
      000EB5 E5               [16] 3730 	push	hl
      000EB6 7D               [ 4] 3731 	ld	a, l
      000EB7 F8 0D            [12] 3732 	ldhl	sp,	#13
      000EB9 77               [ 8] 3733 	ld	(hl), a
      000EBA E1               [12] 3734 	pop	hl
      000EBB 7C               [ 4] 3735 	ld	a, h
      000EBC F8 0C            [12] 3736 	ldhl	sp,	#12
      000EBE 32               [ 8] 3737 	ld	(hl-), a
      000EBF 2A               [ 8] 3738 	ld	a, (hl+)
      000EC0 5F               [ 4] 3739 	ld	e, a
      000EC1 56               [ 8] 3740 	ld	d, (hl)
      000EC2 6B               [ 4] 3741 	ld	l, e
      000EC3 62               [ 4] 3742 	ld	h, d
      000EC4 23               [ 8] 3743 	inc	hl
      000EC5 E5               [16] 3744 	push	hl
      000EC6 7D               [ 4] 3745 	ld	a, l
      000EC7 F8 0F            [12] 3746 	ldhl	sp,	#15
      000EC9 77               [ 8] 3747 	ld	(hl), a
      000ECA E1               [12] 3748 	pop	hl
      000ECB 7C               [ 4] 3749 	ld	a, h
      000ECC F8 0E            [12] 3750 	ldhl	sp,	#14
      000ECE 77               [ 8] 3751 	ld	(hl), a
      000ECF FAr06r00         [16] 3752 	ld	a, (#_cursory)
      000ED2 F8 0F            [12] 3753 	ldhl	sp,	#15
      000ED4 77               [ 8] 3754 	ld	(hl), a
      000ED5 3A               [ 8] 3755 	ld	a, (hl-)
      000ED6 C6 FC            [ 8] 3756 	add	a, #0xfc
      000ED8 4F               [ 4] 3757 	ld	c, a
      000ED9 3A               [ 8] 3758 	ld	a, (hl-)
      000EDA 6E               [ 8] 3759 	ld	l, (hl)
      000EDB 67               [ 4] 3760 	ld	h, a
      000EDC 71               [ 8] 3761 	ld	(hl), c
                           000EDD  3762 	C$main.c$405$6_0$258	= .
                                   3763 	.globl	C$main.c$405$6_0$258
                                   3764 ;main.c:405: promoteToKing(pieces, numPieces, currentPlayer);
      000EDD FAr07r00         [16] 3765 	ld	a, (#_currentPlayer)
      000EE0 F5               [16] 3766 	push	af
      000EE1 33               [ 8] 3767 	inc	sp
      000EE2 01 0C 00         [12] 3768 	ld	bc, #0x000c
      000EE5 F8 01            [12] 3769 	ldhl	sp,	#1
      000EE7 2A               [ 8] 3770 	ld	a, (hl+)
      000EE8 5F               [ 4] 3771 	ld	e, a
      000EE9 56               [ 8] 3772 	ld	d, (hl)
      000EEA CDr41r00         [24] 3773 	call	_promoteToKing
                           000EED  3774 	C$main.c$406$6_0$258	= .
                                   3775 	.globl	C$main.c$406$6_0$258
                                   3776 ;main.c:406: if (currentPlayer == BLACK_PLAYER) {
      000EED 21r07r00         [12] 3777 	ld	hl, #_currentPlayer
      000EF0 7E               [ 8] 3778 	ld	a, (hl)
      000EF1 B7               [ 4] 3779 	or	a, a
      000EF2 20 04            [12] 3780 	jr	NZ, 00131$
                           000EF4  3781 	C$main.c$407$7_0$259	= .
                                   3782 	.globl	C$main.c$407$7_0$259
                                   3783 ;main.c:407: currentPlayer = WHITE_PLAYER;
      000EF4 36 01            [12] 3784 	ld	(hl), #0x01
      000EF6 18 05            [12] 3785 	jr	00132$
      000EF8                       3786 00131$:
                           000EF8  3787 	C$main.c$409$7_0$260	= .
                                   3788 	.globl	C$main.c$409$7_0$260
                                   3789 ;main.c:409: currentPlayer = BLACK_PLAYER;
      000EF8 21r07r00         [12] 3790 	ld	hl, #_currentPlayer
      000EFB 36 00            [12] 3791 	ld	(hl), #0x00
      000EFD                       3792 00132$:
                           000EFD  3793 	C$main.c$411$6_0$258	= .
                                   3794 	.globl	C$main.c$411$6_0$258
                                   3795 ;main.c:411: printBlack();
      000EFD CDrB8r01         [24] 3796 	call	_printBlack
                           000F00  3797 	C$main.c$412$6_0$258	= .
                                   3798 	.globl	C$main.c$412$6_0$258
                                   3799 ;main.c:412: printWhite();
      000F00 CDrADr02         [24] 3800 	call	_printWhite
                           000F03  3801 	C$main.c$413$6_0$258	= .
                                   3802 	.globl	C$main.c$413$6_0$258
                                   3803 ;main.c:413: printTurn();
      000F03 CDrFFr00         [24] 3804 	call	_printTurn
                           000F06  3805 	C$main.c$414$6_0$258	= .
                                   3806 	.globl	C$main.c$414$6_0$258
                                   3807 ;main.c:414: pieceSelected = false;
      000F06 21r0Ar00         [12] 3808 	ld	hl, #_pieceSelected
      000F09 36 00            [12] 3809 	ld	(hl), #0x00
                           000F0B  3810 	C$main.c$415$6_0$258	= .
                                   3811 	.globl	C$main.c$415$6_0$258
                                   3812 ;main.c:415: break; // Exit the loop after a piece has been moved
      000F0B 18 13            [12] 3813 	jr	00151$
      000F0D                       3814 00146$:
                           000F0D  3815 	C$main.c$419$3_0$247	= .
                                   3816 	.globl	C$main.c$419$3_0$247
                                   3817 ;main.c:419: if (joypad_input & J_B) {
      000F0D FAr00r00         [16] 3818 	ld	a, (#_joypad_input)
      000F10 CB 6F            [ 8] 3819 	bit	5, a
      000F12 CAr76r0B         [16] 3820 	jp	Z,00149$
                           000F15  3821 	C$main.c$420$4_0$261	= .
                                   3822 	.globl	C$main.c$420$4_0$261
                                   3823 ;main.c:420: pieceSelected = false;
      000F15 21r0Ar00         [12] 3824 	ld	hl, #_pieceSelected
      000F18 36 00            [12] 3825 	ld	(hl), #0x00
                           000F1A  3826 	C$main.c$421$4_0$261	= .
                                   3827 	.globl	C$main.c$421$4_0$261
                                   3828 ;main.c:421: printBlack();
      000F1A CDrB8r01         [24] 3829 	call	_printBlack
                           000F1D  3830 	C$main.c$422$4_0$261	= .
                                   3831 	.globl	C$main.c$422$4_0$261
                                   3832 ;main.c:422: printWhite();
      000F1D CDrADr02         [24] 3833 	call	_printWhite
                           000F20  3834 	C$main.c$423$2_0$239	= .
                                   3835 	.globl	C$main.c$423$2_0$239
                                   3836 ;main.c:423: break;
      000F20                       3837 00151$:
                           000F20  3838 	C$main.c$426$2_0$239	= .
                                   3839 	.globl	C$main.c$426$2_0$239
                                   3840 ;main.c:426: delay(100);
      000F20 11 64 00         [12] 3841 	ld	de, #0x0064
      000F23 CDr00r00         [24] 3842 	call	_delay
      000F26 C3rA4r0A         [16] 3843 	jp	00153$
                           000F29  3844 	C$main.c$428$1_0$238	= .
                                   3845 	.globl	C$main.c$428$1_0$238
                                   3846 ;main.c:428: }
      000F29 E8 10            [16] 3847 	add	sp, #16
                           000F2B  3848 	C$main.c$428$1_0$238	= .
                                   3849 	.globl	C$main.c$428$1_0$238
                           000F2B  3850 	XG$main$0$0	= .
                                   3851 	.globl	XG$main$0$0
      000F2B C9               [16] 3852 	ret
                                   3853 	.area _CODE
                                   3854 	.area _INITIALIZER
                           000000  3855 Fmain$__xinit_lastButtonState$0_0$0 == .
      000000                       3856 __xinit__lastButtonState:
      000000 00                    3857 	.db #0x00	; 0
                           000001  3858 Fmain$__xinit_debounceTimer$0_0$0 == .
      000001                       3859 __xinit__debounceTimer:
      000001 00 00                 3860 	.dw #0x0000
                           000003  3861 Fmain$__xinit_selectedPieceIndex$0_0$0 == .
      000003                       3862 __xinit__selectedPieceIndex:
      000003 FF FF                 3863 	.dw #0xffff
                           000005  3864 Fmain$__xinit_cursorx$0_0$0 == .
      000005                       3865 __xinit__cursorx:
      000005 20                    3866 	.db #0x20	; 32
                           000006  3867 Fmain$__xinit_cursory$0_0$0 == .
      000006                       3868 __xinit__cursory:
      000006 20                    3869 	.db #0x20	; 32
                           000007  3870 Fmain$__xinit_currentPlayer$0_0$0 == .
      000007                       3871 __xinit__currentPlayer:
      000007 00                    3872 	.db #0x00	; 0
                           000008  3873 Fmain$__xinit_selectedCoords$0_0$0 == .
      000008                       3874 __xinit__selectedCoords:
      000008 00 00                 3875 	.dw #0x0000
                           00000A  3876 Fmain$__xinit_pieceSelected$0_0$0 == .
      00000A                       3877 __xinit__pieceSelected:
      00000A 00                    3878 	.db #0x00	;  0
                           00000B  3879 Fmain$__xinit_tile1$0_0$0 == .
      00000B                       3880 __xinit__tile1:
      00000B FF                    3881 	.db #0xff	; 255
      00000C FF                    3882 	.db #0xff	; 255
      00000D FF                    3883 	.db #0xff	; 255
      00000E FF                    3884 	.db #0xff	; 255
      00000F FF                    3885 	.db #0xff	; 255
      000010 FF                    3886 	.db #0xff	; 255
      000011 FF                    3887 	.db #0xff	; 255
      000012 FF                    3888 	.db #0xff	; 255
      000013 FF                    3889 	.db #0xff	; 255
      000014 FF                    3890 	.db #0xff	; 255
      000015 FF                    3891 	.db #0xff	; 255
      000016 FF                    3892 	.db #0xff	; 255
      000017 FF                    3893 	.db #0xff	; 255
      000018 FF                    3894 	.db #0xff	; 255
      000019 FF                    3895 	.db #0xff	; 255
      00001A FF                    3896 	.db #0xff	; 255
                           00001B  3897 Fmain$__xinit_tile2$0_0$0 == .
      00001B                       3898 __xinit__tile2:
      00001B FF                    3899 	.db #0xff	; 255
      00001C 00                    3900 	.db #0x00	; 0
      00001D FF                    3901 	.db #0xff	; 255
      00001E 00                    3902 	.db #0x00	; 0
      00001F FF                    3903 	.db #0xff	; 255
      000020 00                    3904 	.db #0x00	; 0
      000021 FF                    3905 	.db #0xff	; 255
      000022 00                    3906 	.db #0x00	; 0
      000023 FF                    3907 	.db #0xff	; 255
      000024 00                    3908 	.db #0x00	; 0
      000025 FF                    3909 	.db #0xff	; 255
      000026 00                    3910 	.db #0x00	; 0
      000027 FF                    3911 	.db #0xff	; 255
      000028 00                    3912 	.db #0x00	; 0
      000029 FF                    3913 	.db #0xff	; 255
      00002A 00                    3914 	.db #0x00	; 0
                           00002B  3915 Fmain$__xinit_tile3$0_0$0 == .
      00002B                       3916 __xinit__tile3:
      00002B 00                    3917 	.db #0x00	; 0
      00002C FF                    3918 	.db #0xff	; 255
      00002D 00                    3919 	.db #0x00	; 0
      00002E FF                    3920 	.db #0xff	; 255
      00002F 00                    3921 	.db #0x00	; 0
      000030 FF                    3922 	.db #0xff	; 255
      000031 00                    3923 	.db #0x00	; 0
      000032 FF                    3924 	.db #0xff	; 255
      000033 00                    3925 	.db #0x00	; 0
      000034 FF                    3926 	.db #0xff	; 255
      000035 00                    3927 	.db #0x00	; 0
      000036 FF                    3928 	.db #0xff	; 255
      000037 00                    3929 	.db #0x00	; 0
      000038 FF                    3930 	.db #0xff	; 255
      000039 00                    3931 	.db #0x00	; 0
      00003A FF                    3932 	.db #0xff	; 255
                           00003B  3933 Fmain$__xinit_map$0_0$0 == .
      00003B                       3934 __xinit__map:
      00003B 01                    3935 	.db #0x01	; 1
      00003C 01                    3936 	.db #0x01	; 1
      00003D 01                    3937 	.db #0x01	; 1
      00003E 01                    3938 	.db #0x01	; 1
      00003F 01                    3939 	.db #0x01	; 1
      000040 01                    3940 	.db #0x01	; 1
      000041 01                    3941 	.db #0x01	; 1
      000042 01                    3942 	.db #0x01	; 1
      000043 01                    3943 	.db #0x01	; 1
      000044 01                    3944 	.db #0x01	; 1
      000045 01                    3945 	.db #0x01	; 1
      000046 01                    3946 	.db #0x01	; 1
      000047 01                    3947 	.db #0x01	; 1
      000048 01                    3948 	.db #0x01	; 1
      000049 01                    3949 	.db #0x01	; 1
      00004A 01                    3950 	.db #0x01	; 1
      00004B 01                    3951 	.db #0x01	; 1
      00004C 01                    3952 	.db #0x01	; 1
      00004D 01                    3953 	.db #0x01	; 1
      00004E 01                    3954 	.db #0x01	; 1
      00004F 01                    3955 	.db #0x01	; 1
      000050 01                    3956 	.db #0x01	; 1
      000051 02                    3957 	.db #0x02	; 2
      000052 02                    3958 	.db #0x02	; 2
      000053 03                    3959 	.db #0x03	; 3
      000054 03                    3960 	.db #0x03	; 3
      000055 02                    3961 	.db #0x02	; 2
      000056 02                    3962 	.db #0x02	; 2
      000057 03                    3963 	.db #0x03	; 3
      000058 03                    3964 	.db #0x03	; 3
      000059 02                    3965 	.db #0x02	; 2
      00005A 02                    3966 	.db #0x02	; 2
      00005B 03                    3967 	.db #0x03	; 3
      00005C 03                    3968 	.db #0x03	; 3
      00005D 02                    3969 	.db #0x02	; 2
      00005E 02                    3970 	.db #0x02	; 2
      00005F 03                    3971 	.db #0x03	; 3
      000060 03                    3972 	.db #0x03	; 3
      000061 01                    3973 	.db #0x01	; 1
      000062 01                    3974 	.db #0x01	; 1
      000063 01                    3975 	.db #0x01	; 1
      000064 01                    3976 	.db #0x01	; 1
      000065 02                    3977 	.db #0x02	; 2
      000066 02                    3978 	.db #0x02	; 2
      000067 03                    3979 	.db #0x03	; 3
      000068 03                    3980 	.db #0x03	; 3
      000069 02                    3981 	.db #0x02	; 2
      00006A 02                    3982 	.db #0x02	; 2
      00006B 03                    3983 	.db #0x03	; 3
      00006C 03                    3984 	.db #0x03	; 3
      00006D 02                    3985 	.db #0x02	; 2
      00006E 02                    3986 	.db #0x02	; 2
      00006F 03                    3987 	.db #0x03	; 3
      000070 03                    3988 	.db #0x03	; 3
      000071 02                    3989 	.db #0x02	; 2
      000072 02                    3990 	.db #0x02	; 2
      000073 03                    3991 	.db #0x03	; 3
      000074 03                    3992 	.db #0x03	; 3
      000075 01                    3993 	.db #0x01	; 1
      000076 01                    3994 	.db #0x01	; 1
      000077 01                    3995 	.db #0x01	; 1
      000078 01                    3996 	.db #0x01	; 1
      000079 03                    3997 	.db #0x03	; 3
      00007A 03                    3998 	.db #0x03	; 3
      00007B 02                    3999 	.db #0x02	; 2
      00007C 02                    4000 	.db #0x02	; 2
      00007D 03                    4001 	.db #0x03	; 3
      00007E 03                    4002 	.db #0x03	; 3
      00007F 02                    4003 	.db #0x02	; 2
      000080 02                    4004 	.db #0x02	; 2
      000081 03                    4005 	.db #0x03	; 3
      000082 03                    4006 	.db #0x03	; 3
      000083 02                    4007 	.db #0x02	; 2
      000084 02                    4008 	.db #0x02	; 2
      000085 03                    4009 	.db #0x03	; 3
      000086 03                    4010 	.db #0x03	; 3
      000087 02                    4011 	.db #0x02	; 2
      000088 02                    4012 	.db #0x02	; 2
      000089 01                    4013 	.db #0x01	; 1
      00008A 01                    4014 	.db #0x01	; 1
      00008B 01                    4015 	.db #0x01	; 1
      00008C 01                    4016 	.db #0x01	; 1
      00008D 03                    4017 	.db #0x03	; 3
      00008E 03                    4018 	.db #0x03	; 3
      00008F 02                    4019 	.db #0x02	; 2
      000090 02                    4020 	.db #0x02	; 2
      000091 03                    4021 	.db #0x03	; 3
      000092 03                    4022 	.db #0x03	; 3
      000093 02                    4023 	.db #0x02	; 2
      000094 02                    4024 	.db #0x02	; 2
      000095 03                    4025 	.db #0x03	; 3
      000096 03                    4026 	.db #0x03	; 3
      000097 02                    4027 	.db #0x02	; 2
      000098 02                    4028 	.db #0x02	; 2
      000099 03                    4029 	.db #0x03	; 3
      00009A 03                    4030 	.db #0x03	; 3
      00009B 02                    4031 	.db #0x02	; 2
      00009C 02                    4032 	.db #0x02	; 2
      00009D 01                    4033 	.db #0x01	; 1
      00009E 01                    4034 	.db #0x01	; 1
      00009F 01                    4035 	.db #0x01	; 1
      0000A0 01                    4036 	.db #0x01	; 1
      0000A1 02                    4037 	.db #0x02	; 2
      0000A2 02                    4038 	.db #0x02	; 2
      0000A3 03                    4039 	.db #0x03	; 3
      0000A4 03                    4040 	.db #0x03	; 3
      0000A5 02                    4041 	.db #0x02	; 2
      0000A6 02                    4042 	.db #0x02	; 2
      0000A7 03                    4043 	.db #0x03	; 3
      0000A8 03                    4044 	.db #0x03	; 3
      0000A9 02                    4045 	.db #0x02	; 2
      0000AA 02                    4046 	.db #0x02	; 2
      0000AB 03                    4047 	.db #0x03	; 3
      0000AC 03                    4048 	.db #0x03	; 3
      0000AD 02                    4049 	.db #0x02	; 2
      0000AE 02                    4050 	.db #0x02	; 2
      0000AF 03                    4051 	.db #0x03	; 3
      0000B0 03                    4052 	.db #0x03	; 3
      0000B1 01                    4053 	.db #0x01	; 1
      0000B2 01                    4054 	.db #0x01	; 1
      0000B3 01                    4055 	.db #0x01	; 1
      0000B4 01                    4056 	.db #0x01	; 1
      0000B5 02                    4057 	.db #0x02	; 2
      0000B6 02                    4058 	.db #0x02	; 2
      0000B7 03                    4059 	.db #0x03	; 3
      0000B8 03                    4060 	.db #0x03	; 3
      0000B9 02                    4061 	.db #0x02	; 2
      0000BA 02                    4062 	.db #0x02	; 2
      0000BB 03                    4063 	.db #0x03	; 3
      0000BC 03                    4064 	.db #0x03	; 3
      0000BD 02                    4065 	.db #0x02	; 2
      0000BE 02                    4066 	.db #0x02	; 2
      0000BF 03                    4067 	.db #0x03	; 3
      0000C0 03                    4068 	.db #0x03	; 3
      0000C1 02                    4069 	.db #0x02	; 2
      0000C2 02                    4070 	.db #0x02	; 2
      0000C3 03                    4071 	.db #0x03	; 3
      0000C4 03                    4072 	.db #0x03	; 3
      0000C5 01                    4073 	.db #0x01	; 1
      0000C6 01                    4074 	.db #0x01	; 1
      0000C7 01                    4075 	.db #0x01	; 1
      0000C8 01                    4076 	.db #0x01	; 1
      0000C9 03                    4077 	.db #0x03	; 3
      0000CA 03                    4078 	.db #0x03	; 3
      0000CB 02                    4079 	.db #0x02	; 2
      0000CC 02                    4080 	.db #0x02	; 2
      0000CD 03                    4081 	.db #0x03	; 3
      0000CE 03                    4082 	.db #0x03	; 3
      0000CF 02                    4083 	.db #0x02	; 2
      0000D0 02                    4084 	.db #0x02	; 2
      0000D1 03                    4085 	.db #0x03	; 3
      0000D2 03                    4086 	.db #0x03	; 3
      0000D3 02                    4087 	.db #0x02	; 2
      0000D4 02                    4088 	.db #0x02	; 2
      0000D5 03                    4089 	.db #0x03	; 3
      0000D6 03                    4090 	.db #0x03	; 3
      0000D7 02                    4091 	.db #0x02	; 2
      0000D8 02                    4092 	.db #0x02	; 2
      0000D9 01                    4093 	.db #0x01	; 1
      0000DA 01                    4094 	.db #0x01	; 1
      0000DB 01                    4095 	.db #0x01	; 1
      0000DC 01                    4096 	.db #0x01	; 1
      0000DD 03                    4097 	.db #0x03	; 3
      0000DE 03                    4098 	.db #0x03	; 3
      0000DF 02                    4099 	.db #0x02	; 2
      0000E0 02                    4100 	.db #0x02	; 2
      0000E1 03                    4101 	.db #0x03	; 3
      0000E2 03                    4102 	.db #0x03	; 3
      0000E3 02                    4103 	.db #0x02	; 2
      0000E4 02                    4104 	.db #0x02	; 2
      0000E5 03                    4105 	.db #0x03	; 3
      0000E6 03                    4106 	.db #0x03	; 3
      0000E7 02                    4107 	.db #0x02	; 2
      0000E8 02                    4108 	.db #0x02	; 2
      0000E9 03                    4109 	.db #0x03	; 3
      0000EA 03                    4110 	.db #0x03	; 3
      0000EB 02                    4111 	.db #0x02	; 2
      0000EC 02                    4112 	.db #0x02	; 2
      0000ED 01                    4113 	.db #0x01	; 1
      0000EE 01                    4114 	.db #0x01	; 1
      0000EF 01                    4115 	.db #0x01	; 1
      0000F0 01                    4116 	.db #0x01	; 1
      0000F1 02                    4117 	.db #0x02	; 2
      0000F2 02                    4118 	.db #0x02	; 2
      0000F3 03                    4119 	.db #0x03	; 3
      0000F4 03                    4120 	.db #0x03	; 3
      0000F5 02                    4121 	.db #0x02	; 2
      0000F6 02                    4122 	.db #0x02	; 2
      0000F7 03                    4123 	.db #0x03	; 3
      0000F8 03                    4124 	.db #0x03	; 3
      0000F9 02                    4125 	.db #0x02	; 2
      0000FA 02                    4126 	.db #0x02	; 2
      0000FB 03                    4127 	.db #0x03	; 3
      0000FC 03                    4128 	.db #0x03	; 3
      0000FD 02                    4129 	.db #0x02	; 2
      0000FE 02                    4130 	.db #0x02	; 2
      0000FF 03                    4131 	.db #0x03	; 3
      000100 03                    4132 	.db #0x03	; 3
      000101 01                    4133 	.db #0x01	; 1
      000102 01                    4134 	.db #0x01	; 1
      000103 01                    4135 	.db #0x01	; 1
      000104 01                    4136 	.db #0x01	; 1
      000105 02                    4137 	.db #0x02	; 2
      000106 02                    4138 	.db #0x02	; 2
      000107 03                    4139 	.db #0x03	; 3
      000108 03                    4140 	.db #0x03	; 3
      000109 02                    4141 	.db #0x02	; 2
      00010A 02                    4142 	.db #0x02	; 2
      00010B 03                    4143 	.db #0x03	; 3
      00010C 03                    4144 	.db #0x03	; 3
      00010D 02                    4145 	.db #0x02	; 2
      00010E 02                    4146 	.db #0x02	; 2
      00010F 03                    4147 	.db #0x03	; 3
      000110 03                    4148 	.db #0x03	; 3
      000111 02                    4149 	.db #0x02	; 2
      000112 02                    4150 	.db #0x02	; 2
      000113 03                    4151 	.db #0x03	; 3
      000114 03                    4152 	.db #0x03	; 3
      000115 01                    4153 	.db #0x01	; 1
      000116 01                    4154 	.db #0x01	; 1
      000117 01                    4155 	.db #0x01	; 1
      000118 01                    4156 	.db #0x01	; 1
      000119 03                    4157 	.db #0x03	; 3
      00011A 03                    4158 	.db #0x03	; 3
      00011B 02                    4159 	.db #0x02	; 2
      00011C 02                    4160 	.db #0x02	; 2
      00011D 03                    4161 	.db #0x03	; 3
      00011E 03                    4162 	.db #0x03	; 3
      00011F 02                    4163 	.db #0x02	; 2
      000120 02                    4164 	.db #0x02	; 2
      000121 03                    4165 	.db #0x03	; 3
      000122 03                    4166 	.db #0x03	; 3
      000123 02                    4167 	.db #0x02	; 2
      000124 02                    4168 	.db #0x02	; 2
      000125 03                    4169 	.db #0x03	; 3
      000126 03                    4170 	.db #0x03	; 3
      000127 02                    4171 	.db #0x02	; 2
      000128 02                    4172 	.db #0x02	; 2
      000129 01                    4173 	.db #0x01	; 1
      00012A 01                    4174 	.db #0x01	; 1
      00012B 01                    4175 	.db #0x01	; 1
      00012C 01                    4176 	.db #0x01	; 1
      00012D 03                    4177 	.db #0x03	; 3
      00012E 03                    4178 	.db #0x03	; 3
      00012F 02                    4179 	.db #0x02	; 2
      000130 02                    4180 	.db #0x02	; 2
      000131 03                    4181 	.db #0x03	; 3
      000132 03                    4182 	.db #0x03	; 3
      000133 02                    4183 	.db #0x02	; 2
      000134 02                    4184 	.db #0x02	; 2
      000135 03                    4185 	.db #0x03	; 3
      000136 03                    4186 	.db #0x03	; 3
      000137 02                    4187 	.db #0x02	; 2
      000138 02                    4188 	.db #0x02	; 2
      000139 03                    4189 	.db #0x03	; 3
      00013A 03                    4190 	.db #0x03	; 3
      00013B 02                    4191 	.db #0x02	; 2
      00013C 02                    4192 	.db #0x02	; 2
      00013D 01                    4193 	.db #0x01	; 1
      00013E 01                    4194 	.db #0x01	; 1
      00013F 01                    4195 	.db #0x01	; 1
      000140 01                    4196 	.db #0x01	; 1
      000141 02                    4197 	.db #0x02	; 2
      000142 02                    4198 	.db #0x02	; 2
      000143 03                    4199 	.db #0x03	; 3
      000144 03                    4200 	.db #0x03	; 3
      000145 02                    4201 	.db #0x02	; 2
      000146 02                    4202 	.db #0x02	; 2
      000147 03                    4203 	.db #0x03	; 3
      000148 03                    4204 	.db #0x03	; 3
      000149 02                    4205 	.db #0x02	; 2
      00014A 02                    4206 	.db #0x02	; 2
      00014B 03                    4207 	.db #0x03	; 3
      00014C 03                    4208 	.db #0x03	; 3
      00014D 02                    4209 	.db #0x02	; 2
      00014E 02                    4210 	.db #0x02	; 2
      00014F 03                    4211 	.db #0x03	; 3
      000150 03                    4212 	.db #0x03	; 3
      000151 01                    4213 	.db #0x01	; 1
      000152 01                    4214 	.db #0x01	; 1
      000153 01                    4215 	.db #0x01	; 1
      000154 01                    4216 	.db #0x01	; 1
      000155 02                    4217 	.db #0x02	; 2
      000156 02                    4218 	.db #0x02	; 2
      000157 03                    4219 	.db #0x03	; 3
      000158 03                    4220 	.db #0x03	; 3
      000159 02                    4221 	.db #0x02	; 2
      00015A 02                    4222 	.db #0x02	; 2
      00015B 03                    4223 	.db #0x03	; 3
      00015C 03                    4224 	.db #0x03	; 3
      00015D 02                    4225 	.db #0x02	; 2
      00015E 02                    4226 	.db #0x02	; 2
      00015F 03                    4227 	.db #0x03	; 3
      000160 03                    4228 	.db #0x03	; 3
      000161 02                    4229 	.db #0x02	; 2
      000162 02                    4230 	.db #0x02	; 2
      000163 03                    4231 	.db #0x03	; 3
      000164 03                    4232 	.db #0x03	; 3
      000165 01                    4233 	.db #0x01	; 1
      000166 01                    4234 	.db #0x01	; 1
      000167 01                    4235 	.db #0x01	; 1
      000168 01                    4236 	.db #0x01	; 1
      000169 03                    4237 	.db #0x03	; 3
      00016A 03                    4238 	.db #0x03	; 3
      00016B 02                    4239 	.db #0x02	; 2
      00016C 02                    4240 	.db #0x02	; 2
      00016D 03                    4241 	.db #0x03	; 3
      00016E 03                    4242 	.db #0x03	; 3
      00016F 02                    4243 	.db #0x02	; 2
      000170 02                    4244 	.db #0x02	; 2
      000171 03                    4245 	.db #0x03	; 3
      000172 03                    4246 	.db #0x03	; 3
      000173 02                    4247 	.db #0x02	; 2
      000174 02                    4248 	.db #0x02	; 2
      000175 03                    4249 	.db #0x03	; 3
      000176 03                    4250 	.db #0x03	; 3
      000177 02                    4251 	.db #0x02	; 2
      000178 02                    4252 	.db #0x02	; 2
      000179 01                    4253 	.db #0x01	; 1
      00017A 01                    4254 	.db #0x01	; 1
      00017B 01                    4255 	.db #0x01	; 1
      00017C 01                    4256 	.db #0x01	; 1
      00017D 03                    4257 	.db #0x03	; 3
      00017E 03                    4258 	.db #0x03	; 3
      00017F 02                    4259 	.db #0x02	; 2
      000180 02                    4260 	.db #0x02	; 2
      000181 03                    4261 	.db #0x03	; 3
      000182 03                    4262 	.db #0x03	; 3
      000183 02                    4263 	.db #0x02	; 2
      000184 02                    4264 	.db #0x02	; 2
      000185 03                    4265 	.db #0x03	; 3
      000186 03                    4266 	.db #0x03	; 3
      000187 02                    4267 	.db #0x02	; 2
      000188 02                    4268 	.db #0x02	; 2
      000189 03                    4269 	.db #0x03	; 3
      00018A 03                    4270 	.db #0x03	; 3
      00018B 02                    4271 	.db #0x02	; 2
      00018C 02                    4272 	.db #0x02	; 2
      00018D 01                    4273 	.db #0x01	; 1
      00018E 01                    4274 	.db #0x01	; 1
      00018F 01                    4275 	.db #0x01	; 1
      000190 01                    4276 	.db #0x01	; 1
      000191 01                    4277 	.db #0x01	; 1
      000192 01                    4278 	.db #0x01	; 1
      000193 01                    4279 	.db #0x01	; 1
      000194 01                    4280 	.db #0x01	; 1
      000195 01                    4281 	.db #0x01	; 1
      000196 01                    4282 	.db #0x01	; 1
      000197 01                    4283 	.db #0x01	; 1
      000198 01                    4284 	.db #0x01	; 1
      000199 01                    4285 	.db #0x01	; 1
      00019A 01                    4286 	.db #0x01	; 1
      00019B 01                    4287 	.db #0x01	; 1
      00019C 01                    4288 	.db #0x01	; 1
      00019D 01                    4289 	.db #0x01	; 1
      00019E 01                    4290 	.db #0x01	; 1
      00019F 01                    4291 	.db #0x01	; 1
      0001A0 01                    4292 	.db #0x01	; 1
      0001A1 01                    4293 	.db #0x01	; 1
      0001A2 01                    4294 	.db #0x01	; 1
                           0001A3  4295 Fmain$__xinit_squareTL$0_0$0 == .
      0001A3                       4296 __xinit__squareTL:
      0001A3 FF                    4297 	.db #0xff	; 255
      0001A4 FF                    4298 	.db #0xff	; 255
      0001A5 FF                    4299 	.db #0xff	; 255
      0001A6 FF                    4300 	.db #0xff	; 255
      0001A7 C0                    4301 	.db #0xc0	; 192
      0001A8 C0                    4302 	.db #0xc0	; 192
      0001A9 C0                    4303 	.db #0xc0	; 192
      0001AA C0                    4304 	.db #0xc0	; 192
      0001AB C0                    4305 	.db #0xc0	; 192
      0001AC C0                    4306 	.db #0xc0	; 192
      0001AD C0                    4307 	.db #0xc0	; 192
      0001AE C0                    4308 	.db #0xc0	; 192
      0001AF C0                    4309 	.db #0xc0	; 192
      0001B0 C0                    4310 	.db #0xc0	; 192
      0001B1 C0                    4311 	.db #0xc0	; 192
      0001B2 C0                    4312 	.db #0xc0	; 192
                           0001B3  4313 Fmain$__xinit_squareTR$0_0$0 == .
      0001B3                       4314 __xinit__squareTR:
      0001B3 FF                    4315 	.db #0xff	; 255
      0001B4 FF                    4316 	.db #0xff	; 255
      0001B5 FF                    4317 	.db #0xff	; 255
      0001B6 FF                    4318 	.db #0xff	; 255
      0001B7 03                    4319 	.db #0x03	; 3
      0001B8 03                    4320 	.db #0x03	; 3
      0001B9 03                    4321 	.db #0x03	; 3
      0001BA 03                    4322 	.db #0x03	; 3
      0001BB 03                    4323 	.db #0x03	; 3
      0001BC 03                    4324 	.db #0x03	; 3
      0001BD 03                    4325 	.db #0x03	; 3
      0001BE 03                    4326 	.db #0x03	; 3
      0001BF 03                    4327 	.db #0x03	; 3
      0001C0 03                    4328 	.db #0x03	; 3
      0001C1 03                    4329 	.db #0x03	; 3
      0001C2 03                    4330 	.db #0x03	; 3
                           0001C3  4331 Fmain$__xinit_squareBL$0_0$0 == .
      0001C3                       4332 __xinit__squareBL:
      0001C3 C0                    4333 	.db #0xc0	; 192
      0001C4 C0                    4334 	.db #0xc0	; 192
      0001C5 C0                    4335 	.db #0xc0	; 192
      0001C6 C0                    4336 	.db #0xc0	; 192
      0001C7 C0                    4337 	.db #0xc0	; 192
      0001C8 C0                    4338 	.db #0xc0	; 192
      0001C9 C0                    4339 	.db #0xc0	; 192
      0001CA C0                    4340 	.db #0xc0	; 192
      0001CB C0                    4341 	.db #0xc0	; 192
      0001CC C0                    4342 	.db #0xc0	; 192
      0001CD C0                    4343 	.db #0xc0	; 192
      0001CE C0                    4344 	.db #0xc0	; 192
      0001CF FF                    4345 	.db #0xff	; 255
      0001D0 FF                    4346 	.db #0xff	; 255
      0001D1 FF                    4347 	.db #0xff	; 255
      0001D2 FF                    4348 	.db #0xff	; 255
                           0001D3  4349 Fmain$__xinit_squareBR$0_0$0 == .
      0001D3                       4350 __xinit__squareBR:
      0001D3 03                    4351 	.db #0x03	; 3
      0001D4 03                    4352 	.db #0x03	; 3
      0001D5 03                    4353 	.db #0x03	; 3
      0001D6 03                    4354 	.db #0x03	; 3
      0001D7 03                    4355 	.db #0x03	; 3
      0001D8 03                    4356 	.db #0x03	; 3
      0001D9 03                    4357 	.db #0x03	; 3
      0001DA 03                    4358 	.db #0x03	; 3
      0001DB 03                    4359 	.db #0x03	; 3
      0001DC 03                    4360 	.db #0x03	; 3
      0001DD 03                    4361 	.db #0x03	; 3
      0001DE 03                    4362 	.db #0x03	; 3
      0001DF FF                    4363 	.db #0xff	; 255
      0001E0 FF                    4364 	.db #0xff	; 255
      0001E1 FF                    4365 	.db #0xff	; 255
      0001E2 FF                    4366 	.db #0xff	; 255
                           0001E3  4367 Fmain$__xinit_black_piece$0_0$0 == .
      0001E3                       4368 __xinit__black_piece:
      0001E3 FF                    4369 	.db #0xff	; 255
      0001E4 FF                    4370 	.db #0xff	; 255
      0001E5 FF                    4371 	.db #0xff	; 255
      0001E6 FF                    4372 	.db #0xff	; 255
      0001E7 FF                    4373 	.db #0xff	; 255
      0001E8 FF                    4374 	.db #0xff	; 255
      0001E9 FF                    4375 	.db #0xff	; 255
      0001EA FF                    4376 	.db #0xff	; 255
      0001EB FF                    4377 	.db #0xff	; 255
      0001EC FF                    4378 	.db #0xff	; 255
      0001ED FF                    4379 	.db #0xff	; 255
      0001EE FF                    4380 	.db #0xff	; 255
      0001EF FF                    4381 	.db #0xff	; 255
      0001F0 FF                    4382 	.db #0xff	; 255
      0001F1 FF                    4383 	.db #0xff	; 255
      0001F2 FF                    4384 	.db #0xff	; 255
                           0001F3  4385 Fmain$__xinit_white_piece$0_0$0 == .
      0001F3                       4386 __xinit__white_piece:
      0001F3 FF                    4387 	.db #0xff	; 255
      0001F4 00                    4388 	.db #0x00	; 0
      0001F5 FF                    4389 	.db #0xff	; 255
      0001F6 00                    4390 	.db #0x00	; 0
      0001F7 FF                    4391 	.db #0xff	; 255
      0001F8 00                    4392 	.db #0x00	; 0
      0001F9 FF                    4393 	.db #0xff	; 255
      0001FA 00                    4394 	.db #0x00	; 0
      0001FB FF                    4395 	.db #0xff	; 255
      0001FC 00                    4396 	.db #0x00	; 0
      0001FD FF                    4397 	.db #0xff	; 255
      0001FE 00                    4398 	.db #0x00	; 0
      0001FF FF                    4399 	.db #0xff	; 255
      000200 00                    4400 	.db #0x00	; 0
      000201 FF                    4401 	.db #0xff	; 255
      000202 00                    4402 	.db #0x00	; 0
                           000203  4403 Fmain$__xinit_currentPlayerBlackText$0_0$0 == .
      000203                       4404 __xinit__currentPlayerBlackText:
      000203 00                    4405 	.db #0x00	; 0
      000204 00                    4406 	.db #0x00	; 0
      000205 50                    4407 	.db #0x50	; 80	'P'
      000206 6C                    4408 	.db #0x6c	; 108	'l'
      000207 61                    4409 	.db #0x61	; 97	'a'
      000208 79                    4410 	.db #0x79	; 121	'y'
      000209 65                    4411 	.db #0x65	; 101	'e'
      00020A 72                    4412 	.db #0x72	; 114	'r'
      00020B 00                    4413 	.db #0x00	; 0
      00020C 42                    4414 	.db #0x42	; 66	'B'
      00020D 6C                    4415 	.db #0x6c	; 108	'l'
      00020E 61                    4416 	.db #0x61	; 97	'a'
      00020F 63                    4417 	.db #0x63	; 99	'c'
      000210 6B                    4418 	.db #0x6b	; 107	'k'
      000211 00                    4419 	.db #0x00	; 0
      000212 00                    4420 	.db #0x00	; 0
                           000213  4421 Fmain$__xinit_currentPlayerWhiteText$0_0$0 == .
      000213                       4422 __xinit__currentPlayerWhiteText:
      000213 00                    4423 	.db #0x00	; 0
      000214 00                    4424 	.db #0x00	; 0
      000215 50                    4425 	.db #0x50	; 80	'P'
      000216 6C                    4426 	.db #0x6c	; 108	'l'
      000217 61                    4427 	.db #0x61	; 97	'a'
      000218 79                    4428 	.db #0x79	; 121	'y'
      000219 65                    4429 	.db #0x65	; 101	'e'
      00021A 72                    4430 	.db #0x72	; 114	'r'
      00021B 00                    4431 	.db #0x00	; 0
      00021C 57                    4432 	.db #0x57	; 87	'W'
      00021D 68                    4433 	.db #0x68	; 104	'h'
      00021E 69                    4434 	.db #0x69	; 105	'i'
      00021F 74                    4435 	.db #0x74	; 116	't'
      000220 65                    4436 	.db #0x65	; 101	'e'
      000221 00                    4437 	.db #0x00	; 0
      000222 00                    4438 	.db #0x00	; 0
                           000223  4439 Fmain$__xinit_blackKing$0_0$0 == .
      000223                       4440 __xinit__blackKing:
      000223 FF                    4441 	.db #0xff	; 255
      000224 FF                    4442 	.db #0xff	; 255
      000225 DB                    4443 	.db #0xdb	; 219
      000226 FF                    4444 	.db #0xff	; 255
      000227 66                    4445 	.db #0x66	; 102	'f'
      000228 FF                    4446 	.db #0xff	; 255
      000229 81                    4447 	.db #0x81	; 129
      00022A FF                    4448 	.db #0xff	; 255
      00022B 81                    4449 	.db #0x81	; 129
      00022C FF                    4450 	.db #0xff	; 255
      00022D C3                    4451 	.db #0xc3	; 195
      00022E FF                    4452 	.db #0xff	; 255
      00022F FF                    4453 	.db #0xff	; 255
      000230 FF                    4454 	.db #0xff	; 255
      000231 FF                    4455 	.db #0xff	; 255
      000232 FF                    4456 	.db #0xff	; 255
                           000233  4457 Fmain$__xinit_whiteKing$0_0$0 == .
      000233                       4458 __xinit__whiteKing:
      000233 FF                    4459 	.db #0xff	; 255
      000234 00                    4460 	.db #0x00	; 0
      000235 DB                    4461 	.db #0xdb	; 219
      000236 24                    4462 	.db #0x24	; 36
      000237 66                    4463 	.db #0x66	; 102	'f'
      000238 99                    4464 	.db #0x99	; 153
      000239 81                    4465 	.db #0x81	; 129
      00023A 7E                    4466 	.db #0x7e	; 126
      00023B 81                    4467 	.db #0x81	; 129
      00023C 7E                    4468 	.db #0x7e	; 126
      00023D C3                    4469 	.db #0xc3	; 195
      00023E 3C                    4470 	.db #0x3c	; 60
      00023F FF                    4471 	.db #0xff	; 255
      000240 00                    4472 	.db #0x00	; 0
      000241 FF                    4473 	.db #0xff	; 255
      000242 00                    4474 	.db #0x00	; 0
                           000243  4475 Fmain$__xinit_blackPieces$0_0$0 == .
      000243                       4476 __xinit__blackPieces:
      000243 2C                    4477 	.db #0x2c	; 44
      000244 1C                    4478 	.db #0x1c	; 28
      000245 00                    4479 	.db #0x00	;  0
      000246 4C                    4480 	.db #0x4c	; 76	'L'
      000247 1C                    4481 	.db #0x1c	; 28
      000248 00                    4482 	.db #0x00	;  0
      000249 6C                    4483 	.db #0x6c	; 108	'l'
      00024A 1C                    4484 	.db #0x1c	; 28
      00024B 00                    4485 	.db #0x00	;  0
      00024C 8C                    4486 	.db #0x8c	; 140
      00024D 1C                    4487 	.db #0x1c	; 28
      00024E 00                    4488 	.db #0x00	;  0
      00024F 1C                    4489 	.db #0x1c	; 28
      000250 2C                    4490 	.db #0x2c	; 44
      000251 00                    4491 	.db #0x00	;  0
      000252 3C                    4492 	.db #0x3c	; 60
      000253 2C                    4493 	.db #0x2c	; 44
      000254 00                    4494 	.db #0x00	;  0
      000255 5C                    4495 	.db #0x5c	; 92
      000256 2C                    4496 	.db #0x2c	; 44
      000257 00                    4497 	.db #0x00	;  0
      000258 7C                    4498 	.db #0x7c	; 124
      000259 2C                    4499 	.db #0x2c	; 44
      00025A 00                    4500 	.db #0x00	;  0
      00025B 2C                    4501 	.db #0x2c	; 44
      00025C 3C                    4502 	.db #0x3c	; 60
      00025D 00                    4503 	.db #0x00	;  0
      00025E 4C                    4504 	.db #0x4c	; 76	'L'
      00025F 3C                    4505 	.db #0x3c	; 60
      000260 00                    4506 	.db #0x00	;  0
      000261 6C                    4507 	.db #0x6c	; 108	'l'
      000262 3C                    4508 	.db #0x3c	; 60
      000263 00                    4509 	.db #0x00	;  0
      000264 8C                    4510 	.db #0x8c	; 140
      000265 3C                    4511 	.db #0x3c	; 60
      000266 00                    4512 	.db #0x00	;  0
                           000267  4513 Fmain$__xinit_whitePieces$0_0$0 == .
      000267                       4514 __xinit__whitePieces:
      000267 1C                    4515 	.db #0x1c	; 28
      000268 8C                    4516 	.db #0x8c	; 140
      000269 00                    4517 	.db #0x00	;  0
      00026A 3C                    4518 	.db #0x3c	; 60
      00026B 8C                    4519 	.db #0x8c	; 140
      00026C 00                    4520 	.db #0x00	;  0
      00026D 5C                    4521 	.db #0x5c	; 92
      00026E 8C                    4522 	.db #0x8c	; 140
      00026F 00                    4523 	.db #0x00	;  0
      000270 7C                    4524 	.db #0x7c	; 124
      000271 8C                    4525 	.db #0x8c	; 140
      000272 00                    4526 	.db #0x00	;  0
      000273 2C                    4527 	.db #0x2c	; 44
      000274 7C                    4528 	.db #0x7c	; 124
      000275 00                    4529 	.db #0x00	;  0
      000276 4C                    4530 	.db #0x4c	; 76	'L'
      000277 7C                    4531 	.db #0x7c	; 124
      000278 00                    4532 	.db #0x00	;  0
      000279 6C                    4533 	.db #0x6c	; 108	'l'
      00027A 7C                    4534 	.db #0x7c	; 124
      00027B 00                    4535 	.db #0x00	;  0
      00027C 8C                    4536 	.db #0x8c	; 140
      00027D 7C                    4537 	.db #0x7c	; 124
      00027E 00                    4538 	.db #0x00	;  0
      00027F 1C                    4539 	.db #0x1c	; 28
      000280 6C                    4540 	.db #0x6c	; 108	'l'
      000281 00                    4541 	.db #0x00	;  0
      000282 3C                    4542 	.db #0x3c	; 60
      000283 6C                    4543 	.db #0x6c	; 108	'l'
      000284 00                    4544 	.db #0x00	;  0
      000285 5C                    4545 	.db #0x5c	; 92
      000286 6C                    4546 	.db #0x6c	; 108	'l'
      000287 00                    4547 	.db #0x00	;  0
      000288 7C                    4548 	.db #0x7c	; 124
      000289 6C                    4549 	.db #0x6c	; 108	'l'
      00028A 00                    4550 	.db #0x00	;  0
                                   4551 	.area _CABS (ABS)
