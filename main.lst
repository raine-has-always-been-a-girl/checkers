                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.2 #13350 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _printTurn
                                     13 	.globl _hasValidMoves
                                     14 	.globl _hasValidNonCaptureMoves
                                     15 	.globl _hasValidCaptureMoves
                                     16 	.globl _checkCollision
                                     17 	.globl _isValidMove
                                     18 	.globl _getCaptureIndex
                                     19 	.globl _isMoveWithinBoard
                                     20 	.globl _printWhite
                                     21 	.globl _printBlack
                                     22 	.globl _printSquare
                                     23 	.globl _printbkg
                                     24 	.globl _font
                                     25 	.globl _dpad
                                     26 	.globl _promoteToKing
                                     27 	.globl _moveSquare
                                     28 	.globl _font_set
                                     29 	.globl _font_load
                                     30 	.globl _font_init
                                     31 	.globl _abs
                                     32 	.globl _set_sprite_data
                                     33 	.globl _set_win_tiles
                                     34 	.globl _set_bkg_tiles
                                     35 	.globl _set_bkg_data
                                     36 	.globl _joypad
                                     37 	.globl _delay
                                     38 	.globl _whitePieces
                                     39 	.globl _blackPieces
                                     40 	.globl _whiteKing
                                     41 	.globl _blackKing
                                     42 	.globl _blackWins
                                     43 	.globl _whiteWins
                                     44 	.globl _clearText
                                     45 	.globl _currentPlayerWhiteText
                                     46 	.globl _currentPlayerBlackText
                                     47 	.globl _white_piece
                                     48 	.globl _black_piece
                                     49 	.globl _squareBR
                                     50 	.globl _squareBL
                                     51 	.globl _squareTR
                                     52 	.globl _squareTL
                                     53 	.globl _map
                                     54 	.globl _tile3
                                     55 	.globl _tile2
                                     56 	.globl _tile1
                                     57 	.globl _pieceSelected
                                     58 	.globl _selectedCoords
                                     59 	.globl _currentPlayer
                                     60 	.globl _cursory
                                     61 	.globl _cursorx
                                     62 	.globl _selectedPieceIndex
                                     63 	.globl _debounceTimer
                                     64 	.globl _lastButtonState
                                     65 	.globl _joypad_input
                                     66 ;--------------------------------------------------------
                                     67 ; special function registers
                                     68 ;--------------------------------------------------------
                                     69 ;--------------------------------------------------------
                                     70 ; ram data
                                     71 ;--------------------------------------------------------
                                     72 	.area _DATA
                           000000    73 G$joypad_input$0_0$0==.
      000000                         74 _joypad_input::
      000000                         75 	.ds 1
                                     76 ;--------------------------------------------------------
                                     77 ; ram data
                                     78 ;--------------------------------------------------------
                                     79 	.area _INITIALIZED
                           000000    80 G$lastButtonState$0_0$0==.
      000000                         81 _lastButtonState::
      000000                         82 	.ds 1
                           000001    83 G$debounceTimer$0_0$0==.
      000001                         84 _debounceTimer::
      000001                         85 	.ds 2
                           000003    86 G$selectedPieceIndex$0_0$0==.
      000003                         87 _selectedPieceIndex::
      000003                         88 	.ds 2
                           000005    89 G$cursorx$0_0$0==.
      000005                         90 _cursorx::
      000005                         91 	.ds 1
                           000006    92 G$cursory$0_0$0==.
      000006                         93 _cursory::
      000006                         94 	.ds 1
                           000007    95 G$currentPlayer$0_0$0==.
      000007                         96 _currentPlayer::
      000007                         97 	.ds 1
                           000008    98 G$selectedCoords$0_0$0==.
      000008                         99 _selectedCoords::
      000008                        100 	.ds 2
                           00000A   101 G$pieceSelected$0_0$0==.
      00000A                        102 _pieceSelected::
      00000A                        103 	.ds 1
                           00000B   104 G$tile1$0_0$0==.
      00000B                        105 _tile1::
      00000B                        106 	.ds 16
                           00001B   107 G$tile2$0_0$0==.
      00001B                        108 _tile2::
      00001B                        109 	.ds 16
                           00002B   110 G$tile3$0_0$0==.
      00002B                        111 _tile3::
      00002B                        112 	.ds 16
                           00003B   113 G$map$0_0$0==.
      00003B                        114 _map::
      00003B                        115 	.ds 360
                           0001A3   116 G$squareTL$0_0$0==.
      0001A3                        117 _squareTL::
      0001A3                        118 	.ds 16
                           0001B3   119 G$squareTR$0_0$0==.
      0001B3                        120 _squareTR::
      0001B3                        121 	.ds 16
                           0001C3   122 G$squareBL$0_0$0==.
      0001C3                        123 _squareBL::
      0001C3                        124 	.ds 16
                           0001D3   125 G$squareBR$0_0$0==.
      0001D3                        126 _squareBR::
      0001D3                        127 	.ds 16
                           0001E3   128 G$black_piece$0_0$0==.
      0001E3                        129 _black_piece::
      0001E3                        130 	.ds 16
                           0001F3   131 G$white_piece$0_0$0==.
      0001F3                        132 _white_piece::
      0001F3                        133 	.ds 16
                           000203   134 G$currentPlayerBlackText$0_0$0==.
      000203                        135 _currentPlayerBlackText::
      000203                        136 	.ds 16
                           000213   137 G$currentPlayerWhiteText$0_0$0==.
      000213                        138 _currentPlayerWhiteText::
      000213                        139 	.ds 16
                           000223   140 G$clearText$0_0$0==.
      000223                        141 _clearText::
      000223                        142 	.ds 16
                           000233   143 G$whiteWins$0_0$0==.
      000233                        144 _whiteWins::
      000233                        145 	.ds 16
                           000243   146 G$blackWins$0_0$0==.
      000243                        147 _blackWins::
      000243                        148 	.ds 16
                           000253   149 G$blackKing$0_0$0==.
      000253                        150 _blackKing::
      000253                        151 	.ds 16
                           000263   152 G$whiteKing$0_0$0==.
      000263                        153 _whiteKing::
      000263                        154 	.ds 16
                           000273   155 G$blackPieces$0_0$0==.
      000273                        156 _blackPieces::
      000273                        157 	.ds 36
                           000297   158 G$whitePieces$0_0$0==.
      000297                        159 _whitePieces::
      000297                        160 	.ds 36
                                    161 ;--------------------------------------------------------
                                    162 ; absolute external ram data
                                    163 ;--------------------------------------------------------
                                    164 	.area _DABS (ABS)
                                    165 ;--------------------------------------------------------
                                    166 ; global & static initialisations
                                    167 ;--------------------------------------------------------
                                    168 	.area _HOME
                                    169 	.area _GSINIT
                                    170 	.area _GSFINAL
                                    171 	.area _GSINIT
                                    172 ;--------------------------------------------------------
                                    173 ; Home
                                    174 ;--------------------------------------------------------
                                    175 	.area _HOME
                                    176 	.area _HOME
                                    177 ;--------------------------------------------------------
                                    178 ; code
                                    179 ;--------------------------------------------------------
                                    180 	.area _CODE
                           000000   181 	G$moveSquare$0$0	= .
                                    182 	.globl	G$moveSquare$0$0
                           000000   183 	C$main.c$105$0_0$125	= .
                                    184 	.globl	C$main.c$105$0_0$125
                                    185 ;main.c:105: void moveSquare() {
                                    186 ;	---------------------------------
                                    187 ; Function moveSquare
                                    188 ; ---------------------------------
      000000                        189 _moveSquare::
                                    190 ;main.c:106: move_sprite(0, cursorx - 8, cursory - 8);
      000000 FAr06r00         [16]  191 	ld	a, (#_cursory)
      000003 C6 F8            [ 8]  192 	add	a, #0xf8
      000005 47               [ 4]  193 	ld	b, a
      000006 FAr05r00         [16]  194 	ld	a, (#_cursorx)
      000009 C6 F8            [ 8]  195 	add	a, #0xf8
      00000B 4F               [ 4]  196 	ld	c, a
                                    197 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      00000C 21r00r00         [12]  198 	ld	hl, #_shadow_OAM
                                    199 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      00000F 78               [ 4]  200 	ld	a, b
      000010 22               [ 8]  201 	ld	(hl+), a
      000011 71               [ 8]  202 	ld	(hl), c
                                    203 ;main.c:107: move_sprite(1, cursorx + 0, cursory - 8);
      000012 FAr06r00         [16]  204 	ld	a, (#_cursory)
      000015 C6 F8            [ 8]  205 	add	a, #0xf8
      000017 47               [ 4]  206 	ld	b, a
      000018 21r05r00         [12]  207 	ld	hl, #_cursorx
      00001B 4E               [ 8]  208 	ld	c, (hl)
                                    209 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      00001C 21r04r00         [12]  210 	ld	hl, #(_shadow_OAM + 4)
                                    211 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      00001F 78               [ 4]  212 	ld	a, b
      000020 22               [ 8]  213 	ld	(hl+), a
      000021 71               [ 8]  214 	ld	(hl), c
                                    215 ;main.c:108: move_sprite(2, cursorx - 8, cursory + 0);
      000022 21r06r00         [12]  216 	ld	hl, #_cursory
      000025 46               [ 8]  217 	ld	b, (hl)
      000026 FAr05r00         [16]  218 	ld	a, (#_cursorx)
      000029 C6 F8            [ 8]  219 	add	a, #0xf8
      00002B 4F               [ 4]  220 	ld	c, a
                                    221 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      00002C 21r08r00         [12]  222 	ld	hl, #(_shadow_OAM + 8)
                                    223 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      00002F 78               [ 4]  224 	ld	a, b
      000030 22               [ 8]  225 	ld	(hl+), a
      000031 71               [ 8]  226 	ld	(hl), c
                                    227 ;main.c:109: move_sprite(3, cursorx + 0, cursory + 0);
      000032 21r06r00         [12]  228 	ld	hl, #_cursory
      000035 46               [ 8]  229 	ld	b, (hl)
      000036 21r05r00         [12]  230 	ld	hl, #_cursorx
      000039 4E               [ 8]  231 	ld	c, (hl)
                                    232 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      00003A 21r0Cr00         [12]  233 	ld	hl, #(_shadow_OAM + 12)
                                    234 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      00003D 78               [ 4]  235 	ld	a, b
      00003E 22               [ 8]  236 	ld	(hl+), a
      00003F 71               [ 8]  237 	ld	(hl), c
                           000040   238 	C$main.c$109$3_0$125	= .
                                    239 	.globl	C$main.c$109$3_0$125
                                    240 ;main.c:109: move_sprite(3, cursorx + 0, cursory + 0);
                           000040   241 	C$main.c$110$3_0$125	= .
                                    242 	.globl	C$main.c$110$3_0$125
                                    243 ;main.c:110: }
                           000040   244 	C$main.c$110$3_0$125	= .
                                    245 	.globl	C$main.c$110$3_0$125
                           000040   246 	XG$moveSquare$0$0	= .
                                    247 	.globl	XG$moveSquare$0$0
      000040 C9               [16]  248 	ret
                           000041   249 	G$promoteToKing$0$0	= .
                                    250 	.globl	G$promoteToKing$0$0
                           000041   251 	C$main.c$126$3_0$140	= .
                                    252 	.globl	C$main.c$126$3_0$140
                                    253 ;main.c:126: void promoteToKing(Piece* pieces, int numPieces, UINT8 player) {
                                    254 ;	---------------------------------
                                    255 ; Function promoteToKing
                                    256 ; ---------------------------------
      000041                        257 _promoteToKing::
      000041 E8 F8            [16]  258 	add	sp, #-8
      000043 F8 06            [12]  259 	ldhl	sp,	#6
      000045 7B               [ 4]  260 	ld	a, e
      000046 22               [ 8]  261 	ld	(hl+), a
      000047 72               [ 8]  262 	ld	(hl), d
      000048 F8 04            [12]  263 	ldhl	sp,	#4
      00004A 79               [ 4]  264 	ld	a, c
      00004B 22               [ 8]  265 	ld	(hl+), a
      00004C 70               [ 8]  266 	ld	(hl), b
                           00004D   267 	C$main.c$127$3_0$141	= .
                                    268 	.globl	C$main.c$127$3_0$141
                                    269 ;main.c:127: for (int i = 0; i < numPieces; i++) {
      00004D F8 0A            [12]  270 	ldhl	sp,	#10
      00004F 7E               [ 8]  271 	ld	a, (hl)
      000050 3D               [ 4]  272 	dec	a
      000051 3E 01            [ 8]  273 	ld	a, #0x01
      000053 28 01            [12]  274 	jr	Z, 00146$
      000055 AF               [ 4]  275 	xor	a, a
      000056                        276 00146$:
      000056 F8 02            [12]  277 	ldhl	sp,	#2
      000058 77               [ 8]  278 	ld	(hl), a
      000059 01 00 00         [12]  279 	ld	bc, #0x0000
      00005C                        280 00110$:
      00005C F8 04            [12]  281 	ldhl	sp,	#4
      00005E 79               [ 4]  282 	ld	a, c
      00005F 96               [ 8]  283 	sub	a, (hl)
      000060 23               [ 8]  284 	inc	hl
      000061 78               [ 4]  285 	ld	a, b
      000062 9E               [ 8]  286 	sbc	a, (hl)
      000063 78               [ 4]  287 	ld	a, b
      000064 57               [ 4]  288 	ld	d, a
      000065 5E               [ 8]  289 	ld	e, (hl)
      000066 CB 7B            [ 8]  290 	bit	7, e
      000068 28 07            [12]  291 	jr	Z, 00147$
      00006A CB 7A            [ 8]  292 	bit	7, d
      00006C 20 08            [12]  293 	jr	NZ, 00148$
      00006E BF               [ 4]  294 	cp	a, a
      00006F 18 05            [12]  295 	jr	00148$
      000071                        296 00147$:
      000071 CB 7A            [ 8]  297 	bit	7, d
      000073 28 01            [12]  298 	jr	Z, 00148$
      000075 37               [ 4]  299 	scf
      000076                        300 00148$:
      000076 30 3D            [12]  301 	jr	NC, 00112$
                           000078   302 	C$main.c$128$2_0$140	= .
                                    303 	.globl	C$main.c$128$2_0$140
                                    304 ;main.c:128: if (pieces[i].y == 28 && player == WHITE_PLAYER) {
      000078 69               [ 4]  305 	ld	l, c
      000079 60               [ 4]  306 	ld	h, b
      00007A 29               [ 8]  307 	add	hl, hl
      00007B 09               [ 8]  308 	add	hl, bc
      00007C 33               [ 8]  309 	inc	sp
      00007D 33               [ 8]  310 	inc	sp
      00007E 5D               [ 4]  311 	ld	e, l
      00007F 54               [ 4]  312 	ld	d, h
      000080 D5               [16]  313 	push	de
      000081 F8 06            [12]  314 	ldhl	sp,	#6
      000083 2A               [ 8]  315 	ld	a,	(hl+)
      000084 66               [ 8]  316 	ld	h, (hl)
      000085 6F               [ 4]  317 	ld	l, a
      000086 19               [ 8]  318 	add	hl, de
                                    319 ;	spillPairReg hl
                                    320 ;	spillPairReg hl
      000087 5D               [ 4]  321 	ld	e,l
      000088 54               [ 4]  322 	ld	d,h
                                    323 ;	spillPairReg hl
                                    324 ;	spillPairReg hl
      000089 23               [ 8]  325 	inc	hl
      00008A 7E               [ 8]  326 	ld	a, (hl)
      00008B F8 03            [12]  327 	ldhl	sp,	#3
      00008D 77               [ 8]  328 	ld	(hl), a
                           00008E   329 	C$main.c$129$2_0$140	= .
                                    330 	.globl	C$main.c$129$2_0$140
                                    331 ;main.c:129: pieces[i].isKing = true;
      00008E 13               [ 8]  332 	inc	de
      00008F 13               [ 8]  333 	inc	de
                           000090   334 	C$main.c$128$3_0$141	= .
                                    335 	.globl	C$main.c$128$3_0$141
                                    336 ;main.c:128: if (pieces[i].y == 28 && player == WHITE_PLAYER) {
      000090 F8 03            [12]  337 	ldhl	sp,	#3
      000092 7E               [ 8]  338 	ld	a, (hl)
      000093 D6 1C            [ 8]  339 	sub	a, #0x1c
      000095 20 0B            [12]  340 	jr	NZ, 00105$
      000097 F8 02            [12]  341 	ldhl	sp,	#2
      000099 7E               [ 8]  342 	ld	a, (hl)
      00009A B7               [ 4]  343 	or	a, a
      00009B 28 05            [12]  344 	jr	Z, 00105$
                           00009D   345 	C$main.c$129$4_0$142	= .
                                    346 	.globl	C$main.c$129$4_0$142
                                    347 ;main.c:129: pieces[i].isKing = true;
      00009D 3E 01            [ 8]  348 	ld	a, #0x01
      00009F 12               [ 8]  349 	ld	(de), a
      0000A0 18 10            [12]  350 	jr	00111$
      0000A2                        351 00105$:
                           0000A2   352 	C$main.c$130$3_0$141	= .
                                    353 	.globl	C$main.c$130$3_0$141
                                    354 ;main.c:130: } else if (pieces[i].y == 140 && player == BLACK_PLAYER) {
      0000A2 F8 03            [12]  355 	ldhl	sp,	#3
      0000A4 7E               [ 8]  356 	ld	a, (hl)
      0000A5 D6 8C            [ 8]  357 	sub	a, #0x8c
      0000A7 20 09            [12]  358 	jr	NZ, 00111$
      0000A9 F8 0A            [12]  359 	ldhl	sp,	#10
      0000AB 7E               [ 8]  360 	ld	a, (hl)
      0000AC B7               [ 4]  361 	or	a, a
      0000AD 20 03            [12]  362 	jr	NZ, 00111$
                           0000AF   363 	C$main.c$131$4_0$143	= .
                                    364 	.globl	C$main.c$131$4_0$143
                                    365 ;main.c:131: pieces[i].isKing = true;
      0000AF 3E 01            [ 8]  366 	ld	a, #0x01
      0000B1 12               [ 8]  367 	ld	(de), a
      0000B2                        368 00111$:
                           0000B2   369 	C$main.c$127$2_0$140	= .
                                    370 	.globl	C$main.c$127$2_0$140
                                    371 ;main.c:127: for (int i = 0; i < numPieces; i++) {
      0000B2 03               [ 8]  372 	inc	bc
      0000B3 18 A7            [12]  373 	jr	00110$
      0000B5                        374 00112$:
                           0000B5   375 	C$main.c$134$2_0$140	= .
                                    376 	.globl	C$main.c$134$2_0$140
                                    377 ;main.c:134: }
      0000B5 E8 08            [16]  378 	add	sp, #8
      0000B7 E1               [12]  379 	pop	hl
      0000B8 33               [ 8]  380 	inc	sp
      0000B9 E9               [ 4]  381 	jp	(hl)
                           0000BA   382 	G$dpad$0$0	= .
                                    383 	.globl	G$dpad$0$0
                           0000BA   384 	C$main.c$135$2_0$144	= .
                                    385 	.globl	C$main.c$135$2_0$144
                                    386 ;main.c:135: void dpad() {
                                    387 ;	---------------------------------
                                    388 ; Function dpad
                                    389 ; ---------------------------------
      0000BA                        390 _dpad::
                           0000BA   391 	C$main.c$136$1_0$144	= .
                                    392 	.globl	C$main.c$136$1_0$144
                                    393 ;main.c:136: if (joypad_input & J_RIGHT) {
      0000BA 21r00r00         [12]  394 	ld	hl, #_joypad_input
      0000BD 4E               [ 8]  395 	ld	c, (hl)
      0000BE CB 41            [ 8]  396 	bit	0, c
      0000C0 28 07            [12]  397 	jr	Z, 00102$
                           0000C2   398 	C$main.c$137$2_0$145	= .
                                    399 	.globl	C$main.c$137$2_0$145
                                    400 ;main.c:137: cursorx = cursorx + SQUARE_SIZE;
      0000C2 21r05r00         [12]  401 	ld	hl, #_cursorx
      0000C5 7E               [ 8]  402 	ld	a, (hl)
      0000C6 C6 10            [ 8]  403 	add	a, #0x10
      0000C8 77               [ 8]  404 	ld	(hl), a
      0000C9                        405 00102$:
                           0000C9   406 	C$main.c$139$1_0$144	= .
                                    407 	.globl	C$main.c$139$1_0$144
                                    408 ;main.c:139: if (joypad_input & J_LEFT) {
      0000C9 CB 49            [ 8]  409 	bit	1, c
      0000CB 28 07            [12]  410 	jr	Z, 00104$
                           0000CD   411 	C$main.c$140$2_0$146	= .
                                    412 	.globl	C$main.c$140$2_0$146
                                    413 ;main.c:140: cursorx = cursorx - SQUARE_SIZE;
      0000CD 21r05r00         [12]  414 	ld	hl, #_cursorx
      0000D0 7E               [ 8]  415 	ld	a, (hl)
      0000D1 C6 F0            [ 8]  416 	add	a, #0xf0
      0000D3 77               [ 8]  417 	ld	(hl), a
      0000D4                        418 00104$:
                           0000D4   419 	C$main.c$142$1_0$144	= .
                                    420 	.globl	C$main.c$142$1_0$144
                                    421 ;main.c:142: if (joypad_input & J_UP) {
      0000D4 CB 51            [ 8]  422 	bit	2, c
      0000D6 28 07            [12]  423 	jr	Z, 00106$
                           0000D8   424 	C$main.c$143$2_0$147	= .
                                    425 	.globl	C$main.c$143$2_0$147
                                    426 ;main.c:143: cursory = cursory - SQUARE_SIZE;
      0000D8 21r06r00         [12]  427 	ld	hl, #_cursory
      0000DB 7E               [ 8]  428 	ld	a, (hl)
      0000DC C6 F0            [ 8]  429 	add	a, #0xf0
      0000DE 77               [ 8]  430 	ld	(hl), a
      0000DF                        431 00106$:
                           0000DF   432 	C$main.c$145$1_0$144	= .
                                    433 	.globl	C$main.c$145$1_0$144
                                    434 ;main.c:145: if (joypad_input & J_DOWN) {
      0000DF CB 59            [ 8]  435 	bit	3, c
      0000E1 CAr00r00         [16]  436 	jp	Z,_moveSquare
                           0000E4   437 	C$main.c$146$2_0$148	= .
                                    438 	.globl	C$main.c$146$2_0$148
                                    439 ;main.c:146: cursory = cursory + SQUARE_SIZE;
      0000E4 21r06r00         [12]  440 	ld	hl, #_cursory
      0000E7 7E               [ 8]  441 	ld	a, (hl)
      0000E8 C6 10            [ 8]  442 	add	a, #0x10
      0000EA 77               [ 8]  443 	ld	(hl), a
                           0000EB   444 	C$main.c$148$1_0$144	= .
                                    445 	.globl	C$main.c$148$1_0$144
                                    446 ;main.c:148: moveSquare();
                           0000EB   447 	C$main.c$149$1_0$144	= .
                                    448 	.globl	C$main.c$149$1_0$144
                                    449 ;main.c:149: }
                           0000EB   450 	C$main.c$149$1_0$144	= .
                                    451 	.globl	C$main.c$149$1_0$144
                           0000EB   452 	XG$dpad$0$0	= .
                                    453 	.globl	XG$dpad$0$0
      0000EB C3r00r00         [16]  454 	jp	_moveSquare
                           0000EE   455 	G$font$0$0	= .
                                    456 	.globl	G$font$0$0
                           0000EE   457 	C$main.c$150$1_0$149	= .
                                    458 	.globl	C$main.c$150$1_0$149
                                    459 ;main.c:150: void font() {
                                    460 ;	---------------------------------
                                    461 ; Function font
                                    462 ; ---------------------------------
      0000EE                        463 _font::
                           0000EE   464 	C$main.c$152$1_0$149	= .
                                    465 	.globl	C$main.c$152$1_0$149
                                    466 ;main.c:152: font_init();
      0000EE CDr00r00         [24]  467 	call	_font_init
                           0000F1   468 	C$main.c$153$1_0$149	= .
                                    469 	.globl	C$main.c$153$1_0$149
                                    470 ;main.c:153: min_font = font_load(font_ibm_fixed);
      0000F1 11r00r00         [12]  471 	ld	de, #_font_ibm_fixed
      0000F4 D5               [16]  472 	push	de
      0000F5 CDr00r00         [24]  473 	call	_font_load
      0000F8 E1               [12]  474 	pop	hl
                           0000F9   475 	C$main.c$154$1_0$149	= .
                                    476 	.globl	C$main.c$154$1_0$149
                                    477 ;main.c:154: font_set(min_font);
      0000F9 D5               [16]  478 	push	de
      0000FA CDr00r00         [24]  479 	call	_font_set
      0000FD E1               [12]  480 	pop	hl
                           0000FE   481 	C$main.c$155$1_0$149	= .
                                    482 	.globl	C$main.c$155$1_0$149
                                    483 ;main.c:155: }
                           0000FE   484 	C$main.c$155$1_0$149	= .
                                    485 	.globl	C$main.c$155$1_0$149
                           0000FE   486 	XG$font$0$0	= .
                                    487 	.globl	XG$font$0$0
      0000FE C9               [16]  488 	ret
                           0000FF   489 	G$printbkg$0$0	= .
                                    490 	.globl	G$printbkg$0$0
                           0000FF   491 	C$main.c$156$1_0$150	= .
                                    492 	.globl	C$main.c$156$1_0$150
                                    493 ;main.c:156: void printbkg() {
                                    494 ;	---------------------------------
                                    495 ; Function printbkg
                                    496 ; ---------------------------------
      0000FF                        497 _printbkg::
                           0000FF   498 	C$main.c$157$1_0$150	= .
                                    499 	.globl	C$main.c$157$1_0$150
                                    500 ;main.c:157: set_bkg_data(1, 1, tile1);
      0000FF 11r0Br00         [12]  501 	ld	de, #_tile1
      000102 D5               [16]  502 	push	de
      000103 21 01 01         [12]  503 	ld	hl, #0x101
      000106 E5               [16]  504 	push	hl
      000107 CDr00r00         [24]  505 	call	_set_bkg_data
      00010A E8 04            [16]  506 	add	sp, #4
                           00010C   507 	C$main.c$158$1_0$150	= .
                                    508 	.globl	C$main.c$158$1_0$150
                                    509 ;main.c:158: set_bkg_data(2, 1, tile2);
      00010C 11r1Br00         [12]  510 	ld	de, #_tile2
      00010F D5               [16]  511 	push	de
      000110 21 02 01         [12]  512 	ld	hl, #0x102
      000113 E5               [16]  513 	push	hl
      000114 CDr00r00         [24]  514 	call	_set_bkg_data
      000117 E8 04            [16]  515 	add	sp, #4
                           000119   516 	C$main.c$159$1_0$150	= .
                                    517 	.globl	C$main.c$159$1_0$150
                                    518 ;main.c:159: set_bkg_data(3, 1, tile3);
      000119 11r2Br00         [12]  519 	ld	de, #_tile3
      00011C D5               [16]  520 	push	de
      00011D 21 03 01         [12]  521 	ld	hl, #0x103
      000120 E5               [16]  522 	push	hl
      000121 CDr00r00         [24]  523 	call	_set_bkg_data
      000124 E8 04            [16]  524 	add	sp, #4
                           000126   525 	C$main.c$160$1_0$150	= .
                                    526 	.globl	C$main.c$160$1_0$150
                                    527 ;main.c:160: set_bkg_tiles(0, 0, 20, 18, map);
      000126 11r3Br00         [12]  528 	ld	de, #_map
      000129 D5               [16]  529 	push	de
      00012A 21 14 12         [12]  530 	ld	hl, #0x1214
      00012D E5               [16]  531 	push	hl
      00012E AF               [ 4]  532 	xor	a, a
      00012F 0F               [ 4]  533 	rrca
      000130 F5               [16]  534 	push	af
      000131 CDr00r00         [24]  535 	call	_set_bkg_tiles
      000134 E8 06            [16]  536 	add	sp, #6
                           000136   537 	C$main.c$161$1_0$150	= .
                                    538 	.globl	C$main.c$161$1_0$150
                                    539 ;main.c:161: }
                           000136   540 	C$main.c$161$1_0$150	= .
                                    541 	.globl	C$main.c$161$1_0$150
                           000136   542 	XG$printbkg$0$0	= .
                                    543 	.globl	XG$printbkg$0$0
      000136 C9               [16]  544 	ret
                           000137   545 	G$printSquare$0$0	= .
                                    546 	.globl	G$printSquare$0$0
                           000137   547 	C$main.c$162$1_0$151	= .
                                    548 	.globl	C$main.c$162$1_0$151
                                    549 ;main.c:162: void printSquare() {
                                    550 ;	---------------------------------
                                    551 ; Function printSquare
                                    552 ; ---------------------------------
      000137                        553 _printSquare::
                           000137   554 	C$main.c$163$1_0$151	= .
                                    555 	.globl	C$main.c$163$1_0$151
                                    556 ;main.c:163: set_sprite_data(0, 1, squareTL);
      000137 11rA3r01         [12]  557 	ld	de, #_squareTL
      00013A D5               [16]  558 	push	de
      00013B AF               [ 4]  559 	xor	a, a
      00013C 3C               [ 4]  560 	inc	a
      00013D F5               [16]  561 	push	af
      00013E CDr00r00         [24]  562 	call	_set_sprite_data
      000141 E8 04            [16]  563 	add	sp, #4
                           000143   564 	C$main.c$164$1_0$151	= .
                                    565 	.globl	C$main.c$164$1_0$151
                                    566 ;main.c:164: set_sprite_data(1, 1, squareTR);
      000143 11rB3r01         [12]  567 	ld	de, #_squareTR
      000146 D5               [16]  568 	push	de
      000147 21 01 01         [12]  569 	ld	hl, #0x101
      00014A E5               [16]  570 	push	hl
      00014B CDr00r00         [24]  571 	call	_set_sprite_data
      00014E E8 04            [16]  572 	add	sp, #4
                           000150   573 	C$main.c$165$1_0$151	= .
                                    574 	.globl	C$main.c$165$1_0$151
                                    575 ;main.c:165: set_sprite_data(2, 1, squareBL);
      000150 11rC3r01         [12]  576 	ld	de, #_squareBL
      000153 D5               [16]  577 	push	de
      000154 21 02 01         [12]  578 	ld	hl, #0x102
      000157 E5               [16]  579 	push	hl
      000158 CDr00r00         [24]  580 	call	_set_sprite_data
      00015B E8 04            [16]  581 	add	sp, #4
                           00015D   582 	C$main.c$166$1_0$151	= .
                                    583 	.globl	C$main.c$166$1_0$151
                                    584 ;main.c:166: set_sprite_data(3, 1, squareBR);
      00015D 11rD3r01         [12]  585 	ld	de, #_squareBR
      000160 D5               [16]  586 	push	de
      000161 3E 01            [ 8]  587 	ld	a, #0x01
      000163 F5               [16]  588 	push	af
      000164 33               [ 8]  589 	inc	sp
      000165 3E 03            [ 8]  590 	ld	a, #0x03
      000167 F5               [16]  591 	push	af
      000168 33               [ 8]  592 	inc	sp
      000169 CDr00r00         [24]  593 	call	_set_sprite_data
      00016C E8 04            [16]  594 	add	sp, #4
                                    595 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      00016E 21r02r00         [12]  596 	ld	hl, #(_shadow_OAM + 2)
      000171 36 00            [12]  597 	ld	(hl), #0x00
      000173 21r06r00         [12]  598 	ld	hl, #(_shadow_OAM + 6)
      000176 36 01            [12]  599 	ld	(hl), #0x01
      000178 21r0Ar00         [12]  600 	ld	hl, #(_shadow_OAM + 10)
      00017B 36 02            [12]  601 	ld	(hl), #0x02
      00017D 21r0Er00         [12]  602 	ld	hl, #(_shadow_OAM + 14)
      000180 36 03            [12]  603 	ld	(hl), #0x03
                           000182   604 	C$main.c$171$1_0$151	= .
                                    605 	.globl	C$main.c$171$1_0$151
                                    606 ;main.c:171: moveSquare();
                           000182   607 	C$main.c$172$1_0$151	= .
                                    608 	.globl	C$main.c$172$1_0$151
                                    609 ;main.c:172: }
                           000182   610 	C$main.c$172$1_0$151	= .
                                    611 	.globl	C$main.c$172$1_0$151
                           000182   612 	XG$printSquare$0$0	= .
                                    613 	.globl	XG$printSquare$0$0
      000182 C3r00r00         [16]  614 	jp	_moveSquare
                           000185   615 	G$printBlack$0$0	= .
                                    616 	.globl	G$printBlack$0$0
                           000185   617 	C$main.c$173$1_0$164	= .
                                    618 	.globl	C$main.c$173$1_0$164
                                    619 ;main.c:173: void printBlack() {
                                    620 ;	---------------------------------
                                    621 ; Function printBlack
                                    622 ; ---------------------------------
      000185                        623 _printBlack::
      000185 E8 FA            [16]  624 	add	sp, #-6
                           000187   625 	C$main.c$174$1_0$164	= .
                                    626 	.globl	C$main.c$174$1_0$164
                                    627 ;main.c:174: set_sprite_data(4, 12, black_piece);
      000187 11rE3r01         [12]  628 	ld	de, #_black_piece
      00018A D5               [16]  629 	push	de
      00018B 21 04 0C         [12]  630 	ld	hl, #0xc04
      00018E E5               [16]  631 	push	hl
      00018F CDr00r00         [24]  632 	call	_set_sprite_data
      000192 E8 04            [16]  633 	add	sp, #4
                           000194   634 	C$main.c$175$1_0$164	= .
                                    635 	.globl	C$main.c$175$1_0$164
                                    636 ;main.c:175: set_sprite_data(8, 12, blackKing);
      000194 11r53r02         [12]  637 	ld	de, #_blackKing
      000197 D5               [16]  638 	push	de
      000198 21 08 0C         [12]  639 	ld	hl, #0xc08
      00019B E5               [16]  640 	push	hl
      00019C CDr00r00         [24]  641 	call	_set_sprite_data
      00019F E8 04            [16]  642 	add	sp, #4
                           0001A1   643 	C$main.c$177$3_0$166	= .
                                    644 	.globl	C$main.c$177$3_0$166
                                    645 ;main.c:177: for (int i = 0; i < 12; i++){
      0001A1 AF               [ 4]  646 	xor	a, a
      0001A2 F8 04            [12]  647 	ldhl	sp,	#4
      0001A4 22               [ 8]  648 	ld	(hl+), a
      0001A5 77               [ 8]  649 	ld	(hl), a
      0001A6                        650 00109$:
      0001A6 F8 04            [12]  651 	ldhl	sp,	#4
      0001A8 2A               [ 8]  652 	ld	a, (hl+)
      0001A9 D6 0C            [ 8]  653 	sub	a, #0x0c
      0001AB 7E               [ 8]  654 	ld	a, (hl)
      0001AC DE 00            [ 8]  655 	sbc	a, #0x00
      0001AE 56               [ 8]  656 	ld	d, (hl)
      0001AF 3E 00            [ 8]  657 	ld	a, #0x00
      0001B1 CB 7F            [ 8]  658 	bit	7,a
      0001B3 28 07            [12]  659 	jr	Z, 00129$
      0001B5 CB 7A            [ 8]  660 	bit	7, d
      0001B7 20 08            [12]  661 	jr	NZ, 00130$
      0001B9 BF               [ 4]  662 	cp	a, a
      0001BA 18 05            [12]  663 	jr	00130$
      0001BC                        664 00129$:
      0001BC CB 7A            [ 8]  665 	bit	7, d
      0001BE 28 01            [12]  666 	jr	Z, 00130$
      0001C0 37               [ 4]  667 	scf
      0001C1                        668 00130$:
      0001C1 D2r77r02         [16]  669 	jp	NC, 00111$
                           0001C4   670 	C$main.c$178$3_0$166	= .
                                    671 	.globl	C$main.c$178$3_0$166
                                    672 ;main.c:178: if (blackPieces[i].isKing) {
      0001C4 F8 04            [12]  673 	ldhl	sp,#4
      0001C6 2A               [ 8]  674 	ld	a, (hl+)
      0001C7 4F               [ 4]  675 	ld	c, a
      0001C8 46               [ 8]  676 	ld	b, (hl)
      0001C9 69               [ 4]  677 	ld	l, c
      0001CA 60               [ 4]  678 	ld	h, b
      0001CB 29               [ 8]  679 	add	hl, hl
      0001CC 09               [ 8]  680 	add	hl, bc
      0001CD 11r73r02         [12]  681 	ld	de, #_blackPieces
      0001D0 19               [ 8]  682 	add	hl, de
      0001D1 23               [ 8]  683 	inc	hl
      0001D2 23               [ 8]  684 	inc	hl
      0001D3 7E               [ 8]  685 	ld	a, (hl)
      0001D4 F8 02            [12]  686 	ldhl	sp,	#2
      0001D6 77               [ 8]  687 	ld	(hl), a
                           0001D7   688 	C$main.c$179$2_0$164	= .
                                    689 	.globl	C$main.c$179$2_0$164
                                    690 ;main.c:179: set_sprite_tile(i + 4, 8); // Use the black king sprite tile
      0001D7 F8 04            [12]  691 	ldhl	sp,	#4
      0001D9 3A               [ 8]  692 	ld	a, (hl-)
      0001DA C6 04            [ 8]  693 	add	a, #0x04
                           0001DC   694 	C$main.c$178$3_0$166	= .
                                    695 	.globl	C$main.c$178$3_0$166
                                    696 ;main.c:178: if (blackPieces[i].isKing) {
      0001DC 32               [ 8]  697 	ld	(hl-), a
      0001DD CB 46            [12]  698 	bit	0, (hl)
      0001DF 28 33            [12]  699 	jr	Z, 00102$
                                    700 ;main.c:179: set_sprite_tile(i + 4, 8); // Use the black king sprite tile
                                    701 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      0001E1 23               [ 8]  702 	inc	hl
      0001E2 3A               [ 8]  703 	ld	a, (hl-)
      0001E3 22               [ 8]  704 	ld	(hl+), a
      0001E4 36 00            [12]  705 	ld	(hl), #0x00
      0001E6 3E 02            [ 8]  706 	ld	a, #0x02
      0001E8                        707 00131$:
      0001E8 F8 02            [12]  708 	ldhl	sp,	#2
      0001EA CB 26            [16]  709 	sla	(hl)
      0001EC 23               [ 8]  710 	inc	hl
      0001ED CB 16            [16]  711 	rl	(hl)
      0001EF 3D               [ 4]  712 	dec	a
      0001F0 20 F6            [12]  713 	jr	NZ, 00131$
      0001F2 2B               [ 8]  714 	dec	hl
      0001F3 2A               [ 8]  715 	ld	a, (hl+)
      0001F4 5F               [ 4]  716 	ld	e, a
      0001F5 56               [ 8]  717 	ld	d, (hl)
      0001F6 21r00r00         [12]  718 	ld	hl, #_shadow_OAM
      0001F9 19               [ 8]  719 	add	hl, de
      0001FA 33               [ 8]  720 	inc	sp
      0001FB 33               [ 8]  721 	inc	sp
      0001FC 5D               [ 4]  722 	ld	e, l
      0001FD 54               [ 4]  723 	ld	d, h
      0001FE D5               [16]  724 	push	de
      0001FF 21 02 00         [12]  725 	ld	hl, #0x0002
      000202 19               [ 8]  726 	add	hl, de
      000203 E5               [16]  727 	push	hl
      000204 7D               [ 4]  728 	ld	a, l
      000205 F8 04            [12]  729 	ldhl	sp,	#4
      000207 77               [ 8]  730 	ld	(hl), a
      000208 E1               [12]  731 	pop	hl
      000209 7C               [ 4]  732 	ld	a, h
      00020A F8 03            [12]  733 	ldhl	sp,	#3
      00020C 32               [ 8]  734 	ld	(hl-), a
      00020D 2A               [ 8]  735 	ld	a,	(hl+)
      00020E 66               [ 8]  736 	ld	h, (hl)
      00020F 6F               [ 4]  737 	ld	l, a
      000210 36 08            [12]  738 	ld	(hl), #0x08
                           000212   739 	C$main.c$179$3_0$166	= .
                                    740 	.globl	C$main.c$179$3_0$166
                                    741 ;main.c:179: set_sprite_tile(i + 4, 8); // Use the black king sprite tile
      000212 18 32            [12]  742 	jr	00103$
      000214                        743 00102$:
                                    744 ;main.c:181: set_sprite_tile(i + 4, 4); // Use the black regular piece sprite tile
                                    745 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      000214 F8 03            [12]  746 	ldhl	sp,	#3
      000216 3A               [ 8]  747 	ld	a, (hl-)
      000217 22               [ 8]  748 	ld	(hl+), a
      000218 36 00            [12]  749 	ld	(hl), #0x00
      00021A 3E 02            [ 8]  750 	ld	a, #0x02
      00021C                        751 00132$:
      00021C F8 02            [12]  752 	ldhl	sp,	#2
      00021E CB 26            [16]  753 	sla	(hl)
      000220 23               [ 8]  754 	inc	hl
      000221 CB 16            [16]  755 	rl	(hl)
      000223 3D               [ 4]  756 	dec	a
      000224 20 F6            [12]  757 	jr	NZ, 00132$
      000226 2B               [ 8]  758 	dec	hl
      000227 2A               [ 8]  759 	ld	a, (hl+)
      000228 5F               [ 4]  760 	ld	e, a
      000229 56               [ 8]  761 	ld	d, (hl)
      00022A 21r00r00         [12]  762 	ld	hl, #_shadow_OAM
      00022D 19               [ 8]  763 	add	hl, de
      00022E 33               [ 8]  764 	inc	sp
      00022F 33               [ 8]  765 	inc	sp
      000230 5D               [ 4]  766 	ld	e, l
      000231 54               [ 4]  767 	ld	d, h
      000232 D5               [16]  768 	push	de
      000233 21 02 00         [12]  769 	ld	hl, #0x0002
      000236 19               [ 8]  770 	add	hl, de
      000237 E5               [16]  771 	push	hl
      000238 7D               [ 4]  772 	ld	a, l
      000239 F8 04            [12]  773 	ldhl	sp,	#4
      00023B 77               [ 8]  774 	ld	(hl), a
      00023C E1               [12]  775 	pop	hl
      00023D 7C               [ 4]  776 	ld	a, h
      00023E F8 03            [12]  777 	ldhl	sp,	#3
      000240 32               [ 8]  778 	ld	(hl-), a
      000241 2A               [ 8]  779 	ld	a,	(hl+)
      000242 66               [ 8]  780 	ld	h, (hl)
      000243 6F               [ 4]  781 	ld	l, a
      000244 36 04            [12]  782 	ld	(hl), #0x04
                           000246   783 	C$main.c$181$3_0$166	= .
                                    784 	.globl	C$main.c$181$3_0$166
                                    785 ;main.c:181: set_sprite_tile(i + 4, 4); // Use the black regular piece sprite tile
      000246                        786 00103$:
                                    787 ;main.c:183: move_sprite(i + 4, blackPieces[i].x, blackPieces[i].y);
      000246 F8 04            [12]  788 	ldhl	sp,#4
      000248 2A               [ 8]  789 	ld	a, (hl+)
      000249 4F               [ 4]  790 	ld	c, a
      00024A 46               [ 8]  791 	ld	b, (hl)
      00024B 69               [ 4]  792 	ld	l, c
      00024C 60               [ 4]  793 	ld	h, b
      00024D 29               [ 8]  794 	add	hl, hl
      00024E 09               [ 8]  795 	add	hl, bc
      00024F 11r73r02         [12]  796 	ld	de, #_blackPieces
      000252 19               [ 8]  797 	add	hl, de
      000253 4D               [ 4]  798 	ld	c, l
      000254 44               [ 4]  799 	ld	b, h
      000255 03               [ 8]  800 	inc	bc
      000256 0A               [ 8]  801 	ld	a, (bc)
      000257 5F               [ 4]  802 	ld	e, a
      000258 4E               [ 8]  803 	ld	c, (hl)
      000259 F8 04            [12]  804 	ldhl	sp,	#4
      00025B 7E               [ 8]  805 	ld	a, (hl)
      00025C C6 04            [ 8]  806 	add	a, #0x04
                                    807 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      00025E 6F               [ 4]  808 	ld	l, a
                                    809 ;	spillPairReg hl
                                    810 ;	spillPairReg hl
      00025F 26 00            [ 8]  811 	ld	h, #0x00
                                    812 ;	spillPairReg hl
                                    813 ;	spillPairReg hl
      000261 29               [ 8]  814 	add	hl, hl
      000262 29               [ 8]  815 	add	hl, hl
      000263 D5               [16]  816 	push	de
      000264 11r00r00         [12]  817 	ld	de, #_shadow_OAM
      000267 19               [ 8]  818 	add	hl, de
      000268 D1               [12]  819 	pop	de
                                    820 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      000269 7B               [ 4]  821 	ld	a, e
      00026A 22               [ 8]  822 	ld	(hl+), a
      00026B 71               [ 8]  823 	ld	(hl), c
                           00026C   824 	C$main.c$177$2_0$165	= .
                                    825 	.globl	C$main.c$177$2_0$165
                                    826 ;main.c:177: for (int i = 0; i < 12; i++){
      00026C F8 04            [12]  827 	ldhl	sp,	#4
      00026E 34               [12]  828 	inc	(hl)
      00026F C2rA6r01         [16]  829 	jp	NZ,00109$
      000272 23               [ 8]  830 	inc	hl
      000273 34               [12]  831 	inc	(hl)
      000274 C3rA6r01         [16]  832 	jp	00109$
      000277                        833 00111$:
                           000277   834 	C$main.c$185$2_0$164	= .
                                    835 	.globl	C$main.c$185$2_0$164
                                    836 ;main.c:185: }
      000277 E8 06            [16]  837 	add	sp, #6
                           000279   838 	C$main.c$185$2_0$164	= .
                                    839 	.globl	C$main.c$185$2_0$164
                           000279   840 	XG$printBlack$0$0	= .
                                    841 	.globl	XG$printBlack$0$0
      000279 C9               [16]  842 	ret
                           00027A   843 	G$printWhite$0$0	= .
                                    844 	.globl	G$printWhite$0$0
                           00027A   845 	C$main.c$186$2_0$178	= .
                                    846 	.globl	C$main.c$186$2_0$178
                                    847 ;main.c:186: void printWhite() {
                                    848 ;	---------------------------------
                                    849 ; Function printWhite
                                    850 ; ---------------------------------
      00027A                        851 _printWhite::
      00027A E8 FA            [16]  852 	add	sp, #-6
                           00027C   853 	C$main.c$187$1_0$178	= .
                                    854 	.globl	C$main.c$187$1_0$178
                                    855 ;main.c:187: set_sprite_data(5, 12, white_piece);
      00027C 11rF3r01         [12]  856 	ld	de, #_white_piece
      00027F D5               [16]  857 	push	de
      000280 21 05 0C         [12]  858 	ld	hl, #0xc05
      000283 E5               [16]  859 	push	hl
      000284 CDr00r00         [24]  860 	call	_set_sprite_data
      000287 E8 04            [16]  861 	add	sp, #4
                           000289   862 	C$main.c$188$1_0$178	= .
                                    863 	.globl	C$main.c$188$1_0$178
                                    864 ;main.c:188: set_sprite_data(20, 12, whiteKing);
      000289 11r63r02         [12]  865 	ld	de, #_whiteKing
      00028C D5               [16]  866 	push	de
      00028D 21 14 0C         [12]  867 	ld	hl, #0xc14
      000290 E5               [16]  868 	push	hl
      000291 CDr00r00         [24]  869 	call	_set_sprite_data
      000294 E8 04            [16]  870 	add	sp, #4
                           000296   871 	C$main.c$190$3_0$180	= .
                                    872 	.globl	C$main.c$190$3_0$180
                                    873 ;main.c:190: for (int i = 0; i < 12; i++){
      000296 AF               [ 4]  874 	xor	a, a
      000297 F8 04            [12]  875 	ldhl	sp,	#4
      000299 22               [ 8]  876 	ld	(hl+), a
      00029A 77               [ 8]  877 	ld	(hl), a
      00029B                        878 00109$:
      00029B F8 04            [12]  879 	ldhl	sp,	#4
      00029D 2A               [ 8]  880 	ld	a, (hl+)
      00029E D6 0C            [ 8]  881 	sub	a, #0x0c
      0002A0 7E               [ 8]  882 	ld	a, (hl)
      0002A1 DE 00            [ 8]  883 	sbc	a, #0x00
      0002A3 56               [ 8]  884 	ld	d, (hl)
      0002A4 3E 00            [ 8]  885 	ld	a, #0x00
      0002A6 CB 7F            [ 8]  886 	bit	7,a
      0002A8 28 07            [12]  887 	jr	Z, 00129$
      0002AA CB 7A            [ 8]  888 	bit	7, d
      0002AC 20 08            [12]  889 	jr	NZ, 00130$
      0002AE BF               [ 4]  890 	cp	a, a
      0002AF 18 05            [12]  891 	jr	00130$
      0002B1                        892 00129$:
      0002B1 CB 7A            [ 8]  893 	bit	7, d
      0002B3 28 01            [12]  894 	jr	Z, 00130$
      0002B5 37               [ 4]  895 	scf
      0002B6                        896 00130$:
      0002B6 D2r6Cr03         [16]  897 	jp	NC, 00111$
                           0002B9   898 	C$main.c$191$3_0$180	= .
                                    899 	.globl	C$main.c$191$3_0$180
                                    900 ;main.c:191: if (whitePieces[i].isKing) {
      0002B9 F8 04            [12]  901 	ldhl	sp,#4
      0002BB 2A               [ 8]  902 	ld	a, (hl+)
      0002BC 4F               [ 4]  903 	ld	c, a
      0002BD 46               [ 8]  904 	ld	b, (hl)
      0002BE 69               [ 4]  905 	ld	l, c
      0002BF 60               [ 4]  906 	ld	h, b
      0002C0 29               [ 8]  907 	add	hl, hl
      0002C1 09               [ 8]  908 	add	hl, bc
      0002C2 11r97r02         [12]  909 	ld	de, #_whitePieces
      0002C5 19               [ 8]  910 	add	hl, de
      0002C6 23               [ 8]  911 	inc	hl
      0002C7 23               [ 8]  912 	inc	hl
      0002C8 7E               [ 8]  913 	ld	a, (hl)
      0002C9 F8 02            [12]  914 	ldhl	sp,	#2
      0002CB 77               [ 8]  915 	ld	(hl), a
                           0002CC   916 	C$main.c$192$2_0$178	= .
                                    917 	.globl	C$main.c$192$2_0$178
                                    918 ;main.c:192: set_sprite_tile(i + 16, 20); // Use the white king sprite tile
      0002CC F8 04            [12]  919 	ldhl	sp,	#4
      0002CE 3A               [ 8]  920 	ld	a, (hl-)
      0002CF C6 10            [ 8]  921 	add	a, #0x10
                           0002D1   922 	C$main.c$191$3_0$180	= .
                                    923 	.globl	C$main.c$191$3_0$180
                                    924 ;main.c:191: if (whitePieces[i].isKing) {
      0002D1 32               [ 8]  925 	ld	(hl-), a
      0002D2 CB 46            [12]  926 	bit	0, (hl)
      0002D4 28 33            [12]  927 	jr	Z, 00102$
                                    928 ;main.c:192: set_sprite_tile(i + 16, 20); // Use the white king sprite tile
                                    929 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      0002D6 23               [ 8]  930 	inc	hl
      0002D7 3A               [ 8]  931 	ld	a, (hl-)
      0002D8 22               [ 8]  932 	ld	(hl+), a
      0002D9 36 00            [12]  933 	ld	(hl), #0x00
      0002DB 3E 02            [ 8]  934 	ld	a, #0x02
      0002DD                        935 00131$:
      0002DD F8 02            [12]  936 	ldhl	sp,	#2
      0002DF CB 26            [16]  937 	sla	(hl)
      0002E1 23               [ 8]  938 	inc	hl
      0002E2 CB 16            [16]  939 	rl	(hl)
      0002E4 3D               [ 4]  940 	dec	a
      0002E5 20 F6            [12]  941 	jr	NZ, 00131$
      0002E7 2B               [ 8]  942 	dec	hl
      0002E8 2A               [ 8]  943 	ld	a, (hl+)
      0002E9 5F               [ 4]  944 	ld	e, a
      0002EA 56               [ 8]  945 	ld	d, (hl)
      0002EB 21r00r00         [12]  946 	ld	hl, #_shadow_OAM
      0002EE 19               [ 8]  947 	add	hl, de
      0002EF 33               [ 8]  948 	inc	sp
      0002F0 33               [ 8]  949 	inc	sp
      0002F1 5D               [ 4]  950 	ld	e, l
      0002F2 54               [ 4]  951 	ld	d, h
      0002F3 D5               [16]  952 	push	de
      0002F4 21 02 00         [12]  953 	ld	hl, #0x0002
      0002F7 19               [ 8]  954 	add	hl, de
      0002F8 E5               [16]  955 	push	hl
      0002F9 7D               [ 4]  956 	ld	a, l
      0002FA F8 04            [12]  957 	ldhl	sp,	#4
      0002FC 77               [ 8]  958 	ld	(hl), a
      0002FD E1               [12]  959 	pop	hl
      0002FE 7C               [ 4]  960 	ld	a, h
      0002FF F8 03            [12]  961 	ldhl	sp,	#3
      000301 32               [ 8]  962 	ld	(hl-), a
      000302 2A               [ 8]  963 	ld	a,	(hl+)
      000303 66               [ 8]  964 	ld	h, (hl)
      000304 6F               [ 4]  965 	ld	l, a
      000305 36 14            [12]  966 	ld	(hl), #0x14
                           000307   967 	C$main.c$192$3_0$180	= .
                                    968 	.globl	C$main.c$192$3_0$180
                                    969 ;main.c:192: set_sprite_tile(i + 16, 20); // Use the white king sprite tile
      000307 18 32            [12]  970 	jr	00103$
      000309                        971 00102$:
                                    972 ;main.c:194: set_sprite_tile(i + 16, 5); // Use the white regular piece sprite tile
                                    973 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      000309 F8 03            [12]  974 	ldhl	sp,	#3
      00030B 3A               [ 8]  975 	ld	a, (hl-)
      00030C 22               [ 8]  976 	ld	(hl+), a
      00030D 36 00            [12]  977 	ld	(hl), #0x00
      00030F 3E 02            [ 8]  978 	ld	a, #0x02
      000311                        979 00132$:
      000311 F8 02            [12]  980 	ldhl	sp,	#2
      000313 CB 26            [16]  981 	sla	(hl)
      000315 23               [ 8]  982 	inc	hl
      000316 CB 16            [16]  983 	rl	(hl)
      000318 3D               [ 4]  984 	dec	a
      000319 20 F6            [12]  985 	jr	NZ, 00132$
      00031B 2B               [ 8]  986 	dec	hl
      00031C 2A               [ 8]  987 	ld	a, (hl+)
      00031D 5F               [ 4]  988 	ld	e, a
      00031E 56               [ 8]  989 	ld	d, (hl)
      00031F 21r00r00         [12]  990 	ld	hl, #_shadow_OAM
      000322 19               [ 8]  991 	add	hl, de
      000323 33               [ 8]  992 	inc	sp
      000324 33               [ 8]  993 	inc	sp
      000325 5D               [ 4]  994 	ld	e, l
      000326 54               [ 4]  995 	ld	d, h
      000327 D5               [16]  996 	push	de
      000328 21 02 00         [12]  997 	ld	hl, #0x0002
      00032B 19               [ 8]  998 	add	hl, de
      00032C E5               [16]  999 	push	hl
      00032D 7D               [ 4] 1000 	ld	a, l
      00032E F8 04            [12] 1001 	ldhl	sp,	#4
      000330 77               [ 8] 1002 	ld	(hl), a
      000331 E1               [12] 1003 	pop	hl
      000332 7C               [ 4] 1004 	ld	a, h
      000333 F8 03            [12] 1005 	ldhl	sp,	#3
      000335 32               [ 8] 1006 	ld	(hl-), a
      000336 2A               [ 8] 1007 	ld	a,	(hl+)
      000337 66               [ 8] 1008 	ld	h, (hl)
      000338 6F               [ 4] 1009 	ld	l, a
      000339 36 05            [12] 1010 	ld	(hl), #0x05
                           00033B  1011 	C$main.c$194$3_0$180	= .
                                   1012 	.globl	C$main.c$194$3_0$180
                                   1013 ;main.c:194: set_sprite_tile(i + 16, 5); // Use the white regular piece sprite tile
      00033B                       1014 00103$:
                                   1015 ;main.c:196: move_sprite(i + 16, whitePieces[i].x, whitePieces[i].y);
      00033B F8 04            [12] 1016 	ldhl	sp,#4
      00033D 2A               [ 8] 1017 	ld	a, (hl+)
      00033E 4F               [ 4] 1018 	ld	c, a
      00033F 46               [ 8] 1019 	ld	b, (hl)
      000340 69               [ 4] 1020 	ld	l, c
      000341 60               [ 4] 1021 	ld	h, b
      000342 29               [ 8] 1022 	add	hl, hl
      000343 09               [ 8] 1023 	add	hl, bc
      000344 11r97r02         [12] 1024 	ld	de, #_whitePieces
      000347 19               [ 8] 1025 	add	hl, de
      000348 4D               [ 4] 1026 	ld	c, l
      000349 44               [ 4] 1027 	ld	b, h
      00034A 03               [ 8] 1028 	inc	bc
      00034B 0A               [ 8] 1029 	ld	a, (bc)
      00034C 5F               [ 4] 1030 	ld	e, a
      00034D 4E               [ 8] 1031 	ld	c, (hl)
      00034E F8 04            [12] 1032 	ldhl	sp,	#4
      000350 7E               [ 8] 1033 	ld	a, (hl)
      000351 C6 10            [ 8] 1034 	add	a, #0x10
                                   1035 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      000353 6F               [ 4] 1036 	ld	l, a
                                   1037 ;	spillPairReg hl
                                   1038 ;	spillPairReg hl
      000354 26 00            [ 8] 1039 	ld	h, #0x00
                                   1040 ;	spillPairReg hl
                                   1041 ;	spillPairReg hl
      000356 29               [ 8] 1042 	add	hl, hl
      000357 29               [ 8] 1043 	add	hl, hl
      000358 D5               [16] 1044 	push	de
      000359 11r00r00         [12] 1045 	ld	de, #_shadow_OAM
      00035C 19               [ 8] 1046 	add	hl, de
      00035D D1               [12] 1047 	pop	de
                                   1048 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      00035E 7B               [ 4] 1049 	ld	a, e
      00035F 22               [ 8] 1050 	ld	(hl+), a
      000360 71               [ 8] 1051 	ld	(hl), c
                           000361  1052 	C$main.c$190$2_0$179	= .
                                   1053 	.globl	C$main.c$190$2_0$179
                                   1054 ;main.c:190: for (int i = 0; i < 12; i++){
      000361 F8 04            [12] 1055 	ldhl	sp,	#4
      000363 34               [12] 1056 	inc	(hl)
      000364 C2r9Br02         [16] 1057 	jp	NZ,00109$
      000367 23               [ 8] 1058 	inc	hl
      000368 34               [12] 1059 	inc	(hl)
      000369 C3r9Br02         [16] 1060 	jp	00109$
      00036C                       1061 00111$:
                           00036C  1062 	C$main.c$198$2_0$178	= .
                                   1063 	.globl	C$main.c$198$2_0$178
                                   1064 ;main.c:198: }
      00036C E8 06            [16] 1065 	add	sp, #6
                           00036E  1066 	C$main.c$198$2_0$178	= .
                                   1067 	.globl	C$main.c$198$2_0$178
                           00036E  1068 	XG$printWhite$0$0	= .
                                   1069 	.globl	XG$printWhite$0$0
      00036E C9               [16] 1070 	ret
                           00036F  1071 	G$isMoveWithinBoard$0$0	= .
                                   1072 	.globl	G$isMoveWithinBoard$0$0
                           00036F  1073 	C$main.c$199$2_0$193	= .
                                   1074 	.globl	C$main.c$199$2_0$193
                                   1075 ;main.c:199: bool isMoveWithinBoard(UINT8 x, UINT8 y) {
                                   1076 ;	---------------------------------
                                   1077 ; Function isMoveWithinBoard
                                   1078 ; ---------------------------------
      00036F                       1079 _isMoveWithinBoard::
                           00036F  1080 	C$main.c$200$1_0$193	= .
                                   1081 	.globl	C$main.c$200$1_0$193
                                   1082 ;main.c:200: return (x >= 20 && x <=148 && y >= 20 && y <= 148);
      00036F 4F               [ 4] 1083 	ld	c, a
      000370 D6 14            [ 8] 1084 	sub	a, #0x14
      000372 38 0F            [12] 1085 	jr	C, 00103$
      000374 3E 94            [ 8] 1086 	ld	a, #0x94
      000376 91               [ 4] 1087 	sub	a, c
      000377 38 0A            [12] 1088 	jr	C, 00103$
      000379 7B               [ 4] 1089 	ld	a, e
      00037A D6 14            [ 8] 1090 	sub	a, #0x14
      00037C 38 05            [12] 1091 	jr	C, 00103$
      00037E 3E 94            [ 8] 1092 	ld	a, #0x94
      000380 93               [ 4] 1093 	sub	a, e
      000381 30 02            [12] 1094 	jr	NC, 00104$
      000383                       1095 00103$:
      000383 AF               [ 4] 1096 	xor	a, a
      000384 C9               [16] 1097 	ret
      000385                       1098 00104$:
      000385 3E 01            [ 8] 1099 	ld	a, #0x01
                           000387  1100 	C$main.c$201$1_0$193	= .
                                   1101 	.globl	C$main.c$201$1_0$193
                                   1102 ;main.c:201: }
                           000387  1103 	C$main.c$201$1_0$193	= .
                                   1104 	.globl	C$main.c$201$1_0$193
                           000387  1105 	XG$isMoveWithinBoard$0$0	= .
                                   1106 	.globl	XG$isMoveWithinBoard$0$0
      000387 C9               [16] 1107 	ret
                           000388  1108 	G$getCaptureIndex$0$0	= .
                                   1109 	.globl	G$getCaptureIndex$0$0
                           000388  1110 	C$main.c$202$1_0$195	= .
                                   1111 	.globl	C$main.c$202$1_0$195
                                   1112 ;main.c:202: int getCaptureIndex(UINT8 capturedX, UINT8 capturedY, Piece* opponentPieces, int numOpponentPieces) {
                                   1113 ;	---------------------------------
                                   1114 ; Function getCaptureIndex
                                   1115 ; ---------------------------------
      000388                       1116 _getCaptureIndex::
      000388 E8 F9            [16] 1117 	add	sp, #-7
      00038A F8 06            [12] 1118 	ldhl	sp,	#6
      00038C 32               [ 8] 1119 	ld	(hl-), a
      00038D 73               [ 8] 1120 	ld	(hl), e
                           00038E  1121 	C$main.c$204$3_0$196	= .
                                   1122 	.globl	C$main.c$204$3_0$196
                                   1123 ;main.c:204: for (int i = 0; i < numOpponentPieces; i++) {
      00038E AF               [ 4] 1124 	xor	a, a
      00038F F8 02            [12] 1125 	ldhl	sp,	#2
      000391 22               [ 8] 1126 	ld	(hl+), a
      000392 77               [ 8] 1127 	ld	(hl), a
      000393 01 00 00         [12] 1128 	ld	bc, #0x0000
      000396                       1129 00106$:
      000396 F8 0B            [12] 1130 	ldhl	sp,	#11
      000398 79               [ 4] 1131 	ld	a, c
      000399 96               [ 8] 1132 	sub	a, (hl)
      00039A 23               [ 8] 1133 	inc	hl
      00039B 78               [ 4] 1134 	ld	a, b
      00039C 9E               [ 8] 1135 	sbc	a, (hl)
      00039D 78               [ 4] 1136 	ld	a, b
      00039E 57               [ 4] 1137 	ld	d, a
      00039F 5E               [ 8] 1138 	ld	e, (hl)
      0003A0 CB 7B            [ 8] 1139 	bit	7, e
      0003A2 28 07            [12] 1140 	jr	Z, 00130$
      0003A4 CB 7A            [ 8] 1141 	bit	7, d
      0003A6 20 08            [12] 1142 	jr	NZ, 00131$
      0003A8 BF               [ 4] 1143 	cp	a, a
      0003A9 18 05            [12] 1144 	jr	00131$
      0003AB                       1145 00130$:
      0003AB CB 7A            [ 8] 1146 	bit	7, d
      0003AD 28 01            [12] 1147 	jr	Z, 00131$
      0003AF 37               [ 4] 1148 	scf
      0003B0                       1149 00131$:
      0003B0 30 33            [12] 1150 	jr	NC, 00104$
                           0003B2  1151 	C$main.c$205$3_0$197	= .
                                   1152 	.globl	C$main.c$205$3_0$197
                                   1153 ;main.c:205: UINT8 pieceX = opponentPieces[i].x;
      0003B2 69               [ 4] 1154 	ld	l, c
      0003B3 60               [ 4] 1155 	ld	h, b
      0003B4 29               [ 8] 1156 	add	hl, hl
      0003B5 09               [ 8] 1157 	add	hl, bc
      0003B6 33               [ 8] 1158 	inc	sp
      0003B7 33               [ 8] 1159 	inc	sp
      0003B8 5D               [ 4] 1160 	ld	e, l
      0003B9 54               [ 4] 1161 	ld	d, h
      0003BA D5               [16] 1162 	push	de
      0003BB F8 09            [12] 1163 	ldhl	sp,	#9
      0003BD 2A               [ 8] 1164 	ld	a,	(hl+)
      0003BE 66               [ 8] 1165 	ld	h, (hl)
      0003BF 6F               [ 4] 1166 	ld	l, a
      0003C0 19               [ 8] 1167 	add	hl, de
      0003C1 5D               [ 4] 1168 	ld	e, l
      0003C2 54               [ 4] 1169 	ld	d, h
      0003C3 1A               [ 8] 1170 	ld	a, (de)
      0003C4 F8 04            [12] 1171 	ldhl	sp,	#4
                           0003C6  1172 	C$main.c$206$3_0$197	= .
                                   1173 	.globl	C$main.c$206$3_0$197
                                   1174 ;main.c:206: UINT8 pieceY = opponentPieces[i].y;
                           0003C6  1175 	C$main.c$207$3_0$197	= .
                                   1176 	.globl	C$main.c$207$3_0$197
                                   1177 ;main.c:207: if (capturedX == pieceX && capturedY == pieceY) {
      0003C6 22               [ 8] 1178 	ld	(hl+), a
      0003C7 23               [ 8] 1179 	inc	hl
      0003C8 13               [ 8] 1180 	inc	de
      0003C9 1A               [ 8] 1181 	ld	a, (de)
      0003CA 5F               [ 4] 1182 	ld	e, a
      0003CB 3A               [ 8] 1183 	ld	a, (hl-)
      0003CC 2B               [ 8] 1184 	dec	hl
      0003CD 96               [ 8] 1185 	sub	a, (hl)
      0003CE 20 0D            [12] 1186 	jr	NZ, 00107$
      0003D0 F8 05            [12] 1187 	ldhl	sp,	#5
      0003D2 7E               [ 8] 1188 	ld	a, (hl)
      0003D3 93               [ 4] 1189 	sub	a, e
      0003D4 20 07            [12] 1190 	jr	NZ, 00107$
                           0003D6  1191 	C$main.c$209$4_0$198	= .
                                   1192 	.globl	C$main.c$209$4_0$198
                                   1193 ;main.c:209: return i;
      0003D6 F8 02            [12] 1194 	ldhl	sp,	#2
      0003D8 4E               [ 8] 1195 	ld	c, (hl)
      0003D9 23               [ 8] 1196 	inc	hl
      0003DA 46               [ 8] 1197 	ld	b, (hl)
      0003DB 18 0B            [12] 1198 	jr	00108$
      0003DD                       1199 00107$:
                           0003DD  1200 	C$main.c$204$2_0$196	= .
                                   1201 	.globl	C$main.c$204$2_0$196
                                   1202 ;main.c:204: for (int i = 0; i < numOpponentPieces; i++) {
      0003DD 03               [ 8] 1203 	inc	bc
      0003DE F8 02            [12] 1204 	ldhl	sp,	#2
      0003E0 79               [ 4] 1205 	ld	a, c
      0003E1 22               [ 8] 1206 	ld	(hl+), a
      0003E2 70               [ 8] 1207 	ld	(hl), b
      0003E3 18 B1            [12] 1208 	jr	00106$
      0003E5                       1209 00104$:
                           0003E5  1210 	C$main.c$213$1_0$195	= .
                                   1211 	.globl	C$main.c$213$1_0$195
                                   1212 ;main.c:213: return -1;
      0003E5 01 FF FF         [12] 1213 	ld	bc, #0xffff
      0003E8                       1214 00108$:
                           0003E8  1215 	C$main.c$214$1_0$195	= .
                                   1216 	.globl	C$main.c$214$1_0$195
                                   1217 ;main.c:214: }
      0003E8 E8 07            [16] 1218 	add	sp, #7
      0003EA E1               [12] 1219 	pop	hl
      0003EB E8 04            [16] 1220 	add	sp, #4
      0003ED E9               [ 4] 1221 	jp	(hl)
                           0003EE  1222 	G$isValidMove$0$0	= .
                                   1223 	.globl	G$isValidMove$0$0
                           0003EE  1224 	C$main.c$216$1_0$200	= .
                                   1225 	.globl	C$main.c$216$1_0$200
                                   1226 ;main.c:216: bool isValidMove(UINT8 cursorx, UINT8 cursory, UINT8 currentPlayer, int selectedCoords) {
                                   1227 ;	---------------------------------
                                   1228 ; Function isValidMove
                                   1229 ; ---------------------------------
      0003EE                       1230 _isValidMove::
      0003EE E8 F5            [16] 1231 	add	sp, #-11
      0003F0 F8 0A            [12] 1232 	ldhl	sp,	#10
      0003F2 32               [ 8] 1233 	ld	(hl-), a
      0003F3 73               [ 8] 1234 	ld	(hl), e
                           0003F4  1235 	C$main.c$222$1_0$200	= .
                                   1236 	.globl	C$main.c$222$1_0$200
                                   1237 ;main.c:222: if (currentPlayer == BLACK_PLAYER) {
      0003F4 F8 0D            [12] 1238 	ldhl	sp,	#13
      0003F6 7E               [ 8] 1239 	ld	a, (hl)
      0003F7 B7               [ 4] 1240 	or	a, a
      0003F8 20 0C            [12] 1241 	jr	NZ, 00102$
                           0003FA  1242 	C$main.c$223$2_0$201	= .
                                   1243 	.globl	C$main.c$223$2_0$201
                                   1244 ;main.c:223: pieces = blackPieces;
      0003FA 01r73r02         [12] 1245 	ld	bc, #_blackPieces+0
                           0003FD  1246 	C$main.c$225$2_0$201	= .
                                   1247 	.globl	C$main.c$225$2_0$201
                                   1248 ;main.c:225: numPieces = MAX_BLACK_PIECES;
      0003FD F8 00            [12] 1249 	ldhl	sp,	#0
      0003FF 3E 0C            [ 8] 1250 	ld	a, #0x0c
      000401 22               [ 8] 1251 	ld	(hl+), a
      000402 AF               [ 4] 1252 	xor	a, a
      000403 77               [ 8] 1253 	ld	(hl), a
                           000404  1254 	C$main.c$226$1_0$200	= .
                                   1255 	.globl	C$main.c$226$1_0$200
                                   1256 ;main.c:226: numOpponentPieces = MAX_WHITE_PIECES;
      000404 18 0A            [12] 1257 	jr	00103$
      000406                       1258 00102$:
                           000406  1259 	C$main.c$228$2_0$202	= .
                                   1260 	.globl	C$main.c$228$2_0$202
                                   1261 ;main.c:228: pieces = whitePieces;
      000406 01r97r02         [12] 1262 	ld	bc, #_whitePieces
                           000409  1263 	C$main.c$230$2_0$202	= .
                                   1264 	.globl	C$main.c$230$2_0$202
                                   1265 ;main.c:230: numPieces = MAX_WHITE_PIECES;
      000409 F8 00            [12] 1266 	ldhl	sp,	#0
      00040B 3E 0C            [ 8] 1267 	ld	a, #0x0c
      00040D 22               [ 8] 1268 	ld	(hl+), a
      00040E AF               [ 4] 1269 	xor	a, a
      00040F 77               [ 8] 1270 	ld	(hl), a
                           000410  1271 	C$main.c$231$1_0$200	= .
                                   1272 	.globl	C$main.c$231$1_0$200
                                   1273 ;main.c:231: numOpponentPieces = MAX_BLACK_PIECES;
      000410                       1274 00103$:
                           000410  1275 	C$main.c$234$1_1$203	= .
                                   1276 	.globl	C$main.c$234$1_1$203
                                   1277 ;main.c:234: int dx = cursorx - pieces[selectedCoords].x;
      000410 F8 0A            [12] 1278 	ldhl	sp,	#10
      000412 7E               [ 8] 1279 	ld	a, (hl)
      000413 F8 03            [12] 1280 	ldhl	sp,	#3
      000415 22               [ 8] 1281 	ld	(hl+), a
      000416 36 00            [12] 1282 	ld	(hl), #0x00
      000418 F8 0E            [12] 1283 	ldhl	sp,#14
      00041A 2A               [ 8] 1284 	ld	a, (hl+)
      00041B 5F               [ 4] 1285 	ld	e, a
      00041C 56               [ 8] 1286 	ld	d, (hl)
      00041D 6B               [ 4] 1287 	ld	l, e
      00041E 62               [ 4] 1288 	ld	h, d
      00041F 29               [ 8] 1289 	add	hl, hl
      000420 19               [ 8] 1290 	add	hl, de
      000421 E5               [16] 1291 	push	hl
      000422 7D               [ 4] 1292 	ld	a, l
      000423 F8 07            [12] 1293 	ldhl	sp,	#7
      000425 77               [ 8] 1294 	ld	(hl), a
      000426 E1               [12] 1295 	pop	hl
      000427 7C               [ 4] 1296 	ld	a, h
      000428 F8 06            [12] 1297 	ldhl	sp,	#6
      00042A 32               [ 8] 1298 	ld	(hl-), a
      00042B 2A               [ 8] 1299 	ld	a,	(hl+)
      00042C 66               [ 8] 1300 	ld	h, (hl)
      00042D 6F               [ 4] 1301 	ld	l, a
      00042E 09               [ 8] 1302 	add	hl, bc
      00042F E5               [16] 1303 	push	hl
      000430 7D               [ 4] 1304 	ld	a, l
      000431 F8 09            [12] 1305 	ldhl	sp,	#9
      000433 77               [ 8] 1306 	ld	(hl), a
      000434 E1               [12] 1307 	pop	hl
      000435 7C               [ 4] 1308 	ld	a, h
      000436 F8 08            [12] 1309 	ldhl	sp,	#8
      000438 32               [ 8] 1310 	ld	(hl-), a
      000439 2A               [ 8] 1311 	ld	a, (hl+)
      00043A 5F               [ 4] 1312 	ld	e, a
      00043B 56               [ 8] 1313 	ld	d, (hl)
      00043C 1A               [ 8] 1314 	ld	a, (de)
      00043D 4F               [ 4] 1315 	ld	c, a
      00043E 06 00            [ 8] 1316 	ld	b, #0x00
      000440 F8 03            [12] 1317 	ldhl	sp,#3
      000442 2A               [ 8] 1318 	ld	a, (hl+)
      000443 5F               [ 4] 1319 	ld	e, a
      000444 3A               [ 8] 1320 	ld	a, (hl-)
      000445 2B               [ 8] 1321 	dec	hl
      000446 57               [ 4] 1322 	ld	d, a
      000447 7B               [ 4] 1323 	ld	a, e
      000448 91               [ 4] 1324 	sub	a, c
      000449 5F               [ 4] 1325 	ld	e, a
      00044A 7A               [ 4] 1326 	ld	a, d
      00044B 98               [ 4] 1327 	sbc	a, b
      00044C 73               [ 8] 1328 	ld	(hl), e
      00044D 23               [ 8] 1329 	inc	hl
      00044E 77               [ 8] 1330 	ld	(hl), a
                           00044F  1331 	C$main.c$235$1_1$203	= .
                                   1332 	.globl	C$main.c$235$1_1$203
                                   1333 ;main.c:235: int dy = cursory - pieces[selectedCoords].y;
      00044F F8 09            [12] 1334 	ldhl	sp,	#9
      000451 3A               [ 8] 1335 	ld	a, (hl-)
      000452 2B               [ 8] 1336 	dec	hl
      000453 4F               [ 4] 1337 	ld	c, a
      000454 06 00            [ 8] 1338 	ld	b, #0x00
      000456 2A               [ 8] 1339 	ld	a, (hl+)
      000457 5F               [ 4] 1340 	ld	e, a
      000458 56               [ 8] 1341 	ld	d, (hl)
      000459 13               [ 8] 1342 	inc	de
      00045A 1A               [ 8] 1343 	ld	a, (de)
      00045B 5F               [ 4] 1344 	ld	e, a
      00045C 16 00            [ 8] 1345 	ld	d, #0x00
      00045E 79               [ 4] 1346 	ld	a, c
      00045F 93               [ 4] 1347 	sub	a, e
      000460 4F               [ 4] 1348 	ld	c, a
      000461 78               [ 4] 1349 	ld	a, b
      000462 9A               [ 4] 1350 	sbc	a, d
      000463 F8 04            [12] 1351 	ldhl	sp,	#4
      000465 71               [ 8] 1352 	ld	(hl), c
      000466 23               [ 8] 1353 	inc	hl
      000467 77               [ 8] 1354 	ld	(hl), a
                           000468  1355 	C$main.c$237$1_1$203	= .
                                   1356 	.globl	C$main.c$237$1_1$203
                                   1357 ;main.c:237: if (!(isMoveWithinBoard(cursorx, cursory))) {
      000468 F8 09            [12] 1358 	ldhl	sp,	#9
      00046A 2A               [ 8] 1359 	ld	a, (hl+)
      00046B 5F               [ 4] 1360 	ld	e, a
      00046C 7E               [ 8] 1361 	ld	a, (hl)
      00046D CDr6Fr03         [24] 1362 	call	_isMoveWithinBoard
      000470 4F               [ 4] 1363 	ld	c, a
      000471 CB 41            [ 8] 1364 	bit	0, c
      000473 20 04            [12] 1365 	jr	NZ, 00105$
                           000475  1366 	C$main.c$238$2_1$204	= .
                                   1367 	.globl	C$main.c$238$2_1$204
                                   1368 ;main.c:238: return false;
      000475 AF               [ 4] 1369 	xor	a, a
      000476 C3rCFr05         [16] 1370 	jp	00131$
      000479                       1371 00105$:
                           000479  1372 	C$main.c$241$1_1$203	= .
                                   1373 	.globl	C$main.c$241$1_1$203
                                   1374 ;main.c:241: if (selectedCoords < 0 || selectedCoords >= numPieces) {
      000479 F8 0F            [12] 1375 	ldhl	sp,	#15
      00047B CB 7E            [12] 1376 	bit	7, (hl)
      00047D 20 21            [12] 1377 	jr	NZ, 00106$
      00047F F8 0E            [12] 1378 	ldhl	sp,	#14
      000481 5D               [ 4] 1379 	ld	e, l
      000482 54               [ 4] 1380 	ld	d, h
      000483 F8 00            [12] 1381 	ldhl	sp,	#0
      000485 1A               [ 8] 1382 	ld	a, (de)
      000486 13               [ 8] 1383 	inc	de
      000487 96               [ 8] 1384 	sub	a, (hl)
      000488 23               [ 8] 1385 	inc	hl
      000489 1A               [ 8] 1386 	ld	a, (de)
      00048A 9E               [ 8] 1387 	sbc	a, (hl)
      00048B 1A               [ 8] 1388 	ld	a, (de)
      00048C 57               [ 4] 1389 	ld	d, a
      00048D 5E               [ 8] 1390 	ld	e, (hl)
      00048E CB 7B            [ 8] 1391 	bit	7, e
      000490 28 07            [12] 1392 	jr	Z, 00208$
      000492 CB 7A            [ 8] 1393 	bit	7, d
      000494 20 08            [12] 1394 	jr	NZ, 00209$
      000496 BF               [ 4] 1395 	cp	a, a
      000497 18 05            [12] 1396 	jr	00209$
      000499                       1397 00208$:
      000499 CB 7A            [ 8] 1398 	bit	7, d
      00049B 28 01            [12] 1399 	jr	Z, 00209$
      00049D 37               [ 4] 1400 	scf
      00049E                       1401 00209$:
      00049E 38 04            [12] 1402 	jr	C, 00107$
      0004A0                       1403 00106$:
                           0004A0  1404 	C$main.c$242$2_1$205	= .
                                   1405 	.globl	C$main.c$242$2_1$205
                                   1406 ;main.c:242: return false;
      0004A0 AF               [ 4] 1407 	xor	a, a
      0004A1 C3rCFr05         [16] 1408 	jp	00131$
      0004A4                       1409 00107$:
                           0004A4  1410 	C$main.c$245$1_1$203	= .
                                   1411 	.globl	C$main.c$245$1_1$203
                                   1412 ;main.c:245: if (abs(dx) != abs(dy)) {
      0004A4 F8 02            [12] 1413 	ldhl	sp,	#2
      0004A6 2A               [ 8] 1414 	ld	a, (hl+)
      0004A7 5F               [ 4] 1415 	ld	e, a
      0004A8 56               [ 8] 1416 	ld	d, (hl)
      0004A9 D5               [16] 1417 	push	de
      0004AA CDr00r00         [24] 1418 	call	_abs
      0004AD E1               [12] 1419 	pop	hl
      0004AE D5               [16] 1420 	push	de
      0004AF F8 06            [12] 1421 	ldhl	sp,	#6
      0004B1 2A               [ 8] 1422 	ld	a, (hl+)
      0004B2 5F               [ 4] 1423 	ld	e, a
      0004B3 56               [ 8] 1424 	ld	d, (hl)
      0004B4 D5               [16] 1425 	push	de
      0004B5 CDr00r00         [24] 1426 	call	_abs
      0004B8 E1               [12] 1427 	pop	hl
      0004B9 C1               [12] 1428 	pop	bc
      0004BA 7B               [ 4] 1429 	ld	a, e
      0004BB 91               [ 4] 1430 	sub	a, c
      0004BC 20 04            [12] 1431 	jr	NZ, 00210$
      0004BE 7A               [ 4] 1432 	ld	a, d
      0004BF 90               [ 4] 1433 	sub	a, b
      0004C0 28 04            [12] 1434 	jr	Z, 00110$
      0004C2                       1435 00210$:
                           0004C2  1436 	C$main.c$246$2_1$206	= .
                                   1437 	.globl	C$main.c$246$2_1$206
                                   1438 ;main.c:246: return false;
      0004C2 AF               [ 4] 1439 	xor	a, a
      0004C3 C3rCFr05         [16] 1440 	jp	00131$
      0004C6                       1441 00110$:
                           0004C6  1442 	C$main.c$249$1_1$200	= .
                                   1443 	.globl	C$main.c$249$1_1$200
                                   1444 ;main.c:249: if ((currentPlayer == BLACK_PLAYER && dy < 0 && !pieces[selectedCoords].isKing) ||
      0004C6 F8 07            [12] 1445 	ldhl	sp,	#7
      0004C8 2A               [ 8] 1446 	ld	a, (hl+)
      0004C9 4F               [ 4] 1447 	ld	c, a
      0004CA 46               [ 8] 1448 	ld	b, (hl)
      0004CB 03               [ 8] 1449 	inc	bc
      0004CC 03               [ 8] 1450 	inc	bc
      0004CD F8 0D            [12] 1451 	ldhl	sp,	#13
      0004CF 7E               [ 8] 1452 	ld	a, (hl)
      0004D0 B7               [ 4] 1453 	or	a, a
      0004D1 20 0C            [12] 1454 	jr	NZ, 00117$
      0004D3 F8 05            [12] 1455 	ldhl	sp,	#5
      0004D5 CB 7E            [12] 1456 	bit	7, (hl)
      0004D7 28 06            [12] 1457 	jr	Z, 00117$
      0004D9 0A               [ 8] 1458 	ld	a, (bc)
      0004DA 5F               [ 4] 1459 	ld	e, a
      0004DB CB 43            [ 8] 1460 	bit	0, e
      0004DD 28 2A            [12] 1461 	jr	Z, 00111$
      0004DF                       1462 00117$:
                           0004DF  1463 	C$main.c$250$1_1$203	= .
                                   1464 	.globl	C$main.c$250$1_1$203
                                   1465 ;main.c:250: (currentPlayer == WHITE_PLAYER && dy > 0 && !pieces[selectedCoords].isKing)) {
      0004DF F8 0D            [12] 1466 	ldhl	sp,	#13
      0004E1 7E               [ 8] 1467 	ld	a, (hl)
      0004E2 3D               [ 4] 1468 	dec	a
      0004E3 20 28            [12] 1469 	jr	NZ, 00146$
      0004E5 F8 04            [12] 1470 	ldhl	sp,	#4
      0004E7 AF               [ 4] 1471 	xor	a, a
      0004E8 96               [ 8] 1472 	sub	a, (hl)
      0004E9 23               [ 8] 1473 	inc	hl
      0004EA 3E 00            [ 8] 1474 	ld	a, #0x00
      0004EC 9E               [ 8] 1475 	sbc	a, (hl)
      0004ED 3E 00            [ 8] 1476 	ld	a, #0x00
      0004EF 57               [ 4] 1477 	ld	d, a
      0004F0 5E               [ 8] 1478 	ld	e, (hl)
      0004F1 CB 7B            [ 8] 1479 	bit	7, e
      0004F3 28 07            [12] 1480 	jr	Z, 00213$
      0004F5 CB 7A            [ 8] 1481 	bit	7, d
      0004F7 20 08            [12] 1482 	jr	NZ, 00214$
      0004F9 BF               [ 4] 1483 	cp	a, a
      0004FA 18 05            [12] 1484 	jr	00214$
      0004FC                       1485 00213$:
      0004FC CB 7A            [ 8] 1486 	bit	7, d
      0004FE 28 01            [12] 1487 	jr	Z, 00214$
      000500 37               [ 4] 1488 	scf
      000501                       1489 00214$:
      000501 30 0A            [12] 1490 	jr	NC, 00146$
      000503 0A               [ 8] 1491 	ld	a, (bc)
      000504 4F               [ 4] 1492 	ld	c, a
      000505 CB 41            [ 8] 1493 	bit	0, c
      000507 20 04            [12] 1494 	jr	NZ, 00146$
      000509                       1495 00111$:
                           000509  1496 	C$main.c$251$2_1$207	= .
                                   1497 	.globl	C$main.c$251$2_1$207
                                   1498 ;main.c:251: return false;
      000509 AF               [ 4] 1499 	xor	a, a
      00050A C3rCFr05         [16] 1500 	jp	00131$
                           00050D  1501 	C$main.c$254$1_1$200	= .
                                   1502 	.globl	C$main.c$254$1_1$200
                                   1503 ;main.c:254: for (int i = 0; i < numPieces; i++) {
      00050D                       1504 00146$:
      00050D 01 00 00         [12] 1505 	ld	bc, #0x0000
      000510                       1506 00129$:
      000510 F8 00            [12] 1507 	ldhl	sp,	#0
      000512 79               [ 4] 1508 	ld	a, c
      000513 96               [ 8] 1509 	sub	a, (hl)
      000514 23               [ 8] 1510 	inc	hl
      000515 78               [ 4] 1511 	ld	a, b
      000516 9E               [ 8] 1512 	sbc	a, (hl)
      000517 78               [ 4] 1513 	ld	a, b
      000518 57               [ 4] 1514 	ld	d, a
      000519 CB 7E            [12] 1515 	bit	7, (hl)
      00051B 28 07            [12] 1516 	jr	Z, 00215$
      00051D CB 7A            [ 8] 1517 	bit	7, d
      00051F 20 08            [12] 1518 	jr	NZ, 00216$
      000521 BF               [ 4] 1519 	cp	a, a
      000522 18 05            [12] 1520 	jr	00216$
      000524                       1521 00215$:
      000524 CB 7A            [ 8] 1522 	bit	7, d
      000526 28 01            [12] 1523 	jr	Z, 00216$
      000528 37               [ 4] 1524 	scf
      000529                       1525 00216$:
      000529 30 51            [12] 1526 	jr	NC, 00124$
                           00052B  1527 	C$main.c$255$1_1$200	= .
                                   1528 	.globl	C$main.c$255$1_1$200
                                   1529 ;main.c:255: if (whitePieces[i].x == cursorx && whitePieces[i].y == cursory) {
      00052B 69               [ 4] 1530 	ld	l, c
      00052C 60               [ 4] 1531 	ld	h, b
      00052D 29               [ 8] 1532 	add	hl, hl
      00052E 09               [ 8] 1533 	add	hl, bc
      00052F E5               [16] 1534 	push	hl
      000530 7D               [ 4] 1535 	ld	a, l
      000531 F8 08            [12] 1536 	ldhl	sp,	#8
      000533 77               [ 8] 1537 	ld	(hl), a
      000534 E1               [12] 1538 	pop	hl
      000535 7C               [ 4] 1539 	ld	a, h
      000536 F8 07            [12] 1540 	ldhl	sp,	#7
      000538 77               [ 8] 1541 	ld	(hl), a
      000539 11r97r02         [12] 1542 	ld	de, #_whitePieces
      00053C 3A               [ 8] 1543 	ld	a, (hl-)
      00053D 6E               [ 8] 1544 	ld	l, (hl)
      00053E 67               [ 4] 1545 	ld	h, a
      00053F 19               [ 8] 1546 	add	hl, de
      000540 5D               [ 4] 1547 	ld	e, l
      000541 54               [ 4] 1548 	ld	d, h
      000542 1A               [ 8] 1549 	ld	a, (de)
      000543 F8 08            [12] 1550 	ldhl	sp,	#8
      000545 22               [ 8] 1551 	ld	(hl+), a
      000546 23               [ 8] 1552 	inc	hl
      000547 3A               [ 8] 1553 	ld	a, (hl-)
      000548 2B               [ 8] 1554 	dec	hl
      000549 96               [ 8] 1555 	sub	a, (hl)
      00054A 20 0C            [12] 1556 	jr	NZ, 00119$
      00054C 13               [ 8] 1557 	inc	de
      00054D 1A               [ 8] 1558 	ld	a, (de)
      00054E 5F               [ 4] 1559 	ld	e, a
      00054F F8 09            [12] 1560 	ldhl	sp,	#9
      000551 7E               [ 8] 1561 	ld	a, (hl)
      000552 93               [ 4] 1562 	sub	a, e
      000553 20 03            [12] 1563 	jr	NZ, 00119$
                           000555  1564 	C$main.c$256$4_1$210	= .
                                   1565 	.globl	C$main.c$256$4_1$210
                                   1566 ;main.c:256: return false;
      000555 AF               [ 4] 1567 	xor	a, a
      000556 18 77            [12] 1568 	jr	00131$
      000558                       1569 00119$:
                           000558  1570 	C$main.c$258$1_1$200	= .
                                   1571 	.globl	C$main.c$258$1_1$200
                                   1572 ;main.c:258: if (blackPieces[i].x == cursorx && blackPieces[i].y == cursory) {
      000558 11r73r02         [12] 1573 	ld	de, #_blackPieces
      00055B F8 06            [12] 1574 	ldhl	sp,	#6
      00055D 2A               [ 8] 1575 	ld	a,	(hl+)
      00055E 66               [ 8] 1576 	ld	h, (hl)
      00055F 6F               [ 4] 1577 	ld	l, a
      000560 19               [ 8] 1578 	add	hl, de
      000561 5D               [ 4] 1579 	ld	e, l
      000562 54               [ 4] 1580 	ld	d, h
      000563 1A               [ 8] 1581 	ld	a, (de)
      000564 F8 08            [12] 1582 	ldhl	sp,	#8
      000566 22               [ 8] 1583 	ld	(hl+), a
      000567 23               [ 8] 1584 	inc	hl
      000568 3A               [ 8] 1585 	ld	a, (hl-)
      000569 2B               [ 8] 1586 	dec	hl
      00056A 96               [ 8] 1587 	sub	a, (hl)
      00056B 20 0C            [12] 1588 	jr	NZ, 00130$
      00056D 13               [ 8] 1589 	inc	de
      00056E 1A               [ 8] 1590 	ld	a, (de)
      00056F 5F               [ 4] 1591 	ld	e, a
      000570 F8 09            [12] 1592 	ldhl	sp,	#9
      000572 7E               [ 8] 1593 	ld	a, (hl)
      000573 93               [ 4] 1594 	sub	a, e
      000574 20 03            [12] 1595 	jr	NZ, 00130$
                           000576  1596 	C$main.c$259$4_1$211	= .
                                   1597 	.globl	C$main.c$259$4_1$211
                                   1598 ;main.c:259: return false;
      000576 AF               [ 4] 1599 	xor	a, a
      000577 18 56            [12] 1600 	jr	00131$
      000579                       1601 00130$:
                           000579  1602 	C$main.c$254$2_1$208	= .
                                   1603 	.globl	C$main.c$254$2_1$208
                                   1604 ;main.c:254: for (int i = 0; i < numPieces; i++) {
      000579 03               [ 8] 1605 	inc	bc
      00057A 18 94            [12] 1606 	jr	00129$
      00057C                       1607 00124$:
                           00057C  1608 	C$main.c$262$1_1$203	= .
                                   1609 	.globl	C$main.c$262$1_1$203
                                   1610 ;main.c:262: if (abs(dx) > 2 * SQUARE_SIZE || abs(dy) > 2 * SQUARE_SIZE) {
      00057C F8 02            [12] 1611 	ldhl	sp,	#2
      00057E 2A               [ 8] 1612 	ld	a, (hl+)
      00057F 5F               [ 4] 1613 	ld	e, a
      000580 56               [ 8] 1614 	ld	d, (hl)
      000581 D5               [16] 1615 	push	de
      000582 CDr00r00         [24] 1616 	call	_abs
      000585 E1               [12] 1617 	pop	hl
      000586 4B               [ 4] 1618 	ld	c, e
      000587 42               [ 4] 1619 	ld	b, d
      000588 58               [ 4] 1620 	ld	e, b
      000589 16 00            [ 8] 1621 	ld	d, #0x00
      00058B 3E 20            [ 8] 1622 	ld	a, #0x20
      00058D B9               [ 4] 1623 	cp	a, c
      00058E 3E 00            [ 8] 1624 	ld	a, #0x00
      000590 98               [ 4] 1625 	sbc	a, b
      000591 CB 7B            [ 8] 1626 	bit	7, e
      000593 28 07            [12] 1627 	jr	Z, 00225$
      000595 CB 7A            [ 8] 1628 	bit	7, d
      000597 20 08            [12] 1629 	jr	NZ, 00226$
      000599 BF               [ 4] 1630 	cp	a, a
      00059A 18 05            [12] 1631 	jr	00226$
      00059C                       1632 00225$:
      00059C CB 7A            [ 8] 1633 	bit	7, d
      00059E 28 01            [12] 1634 	jr	Z, 00226$
      0005A0 37               [ 4] 1635 	scf
      0005A1                       1636 00226$:
      0005A1 38 27            [12] 1637 	jr	C, 00125$
      0005A3 F8 04            [12] 1638 	ldhl	sp,	#4
      0005A5 2A               [ 8] 1639 	ld	a, (hl+)
      0005A6 5F               [ 4] 1640 	ld	e, a
      0005A7 56               [ 8] 1641 	ld	d, (hl)
      0005A8 D5               [16] 1642 	push	de
      0005A9 CDr00r00         [24] 1643 	call	_abs
      0005AC E1               [12] 1644 	pop	hl
      0005AD 4B               [ 4] 1645 	ld	c, e
      0005AE 42               [ 4] 1646 	ld	b, d
      0005AF 58               [ 4] 1647 	ld	e, b
      0005B0 16 00            [ 8] 1648 	ld	d, #0x00
      0005B2 3E 20            [ 8] 1649 	ld	a, #0x20
      0005B4 B9               [ 4] 1650 	cp	a, c
      0005B5 3E 00            [ 8] 1651 	ld	a, #0x00
      0005B7 98               [ 4] 1652 	sbc	a, b
      0005B8 CB 7B            [ 8] 1653 	bit	7, e
      0005BA 28 07            [12] 1654 	jr	Z, 00227$
      0005BC CB 7A            [ 8] 1655 	bit	7, d
      0005BE 20 08            [12] 1656 	jr	NZ, 00228$
      0005C0 BF               [ 4] 1657 	cp	a, a
      0005C1 18 05            [12] 1658 	jr	00228$
      0005C3                       1659 00227$:
      0005C3 CB 7A            [ 8] 1660 	bit	7, d
      0005C5 28 01            [12] 1661 	jr	Z, 00228$
      0005C7 37               [ 4] 1662 	scf
      0005C8                       1663 00228$:
      0005C8 30 03            [12] 1664 	jr	NC, 00126$
      0005CA                       1665 00125$:
                           0005CA  1666 	C$main.c$263$2_1$212	= .
                                   1667 	.globl	C$main.c$263$2_1$212
                                   1668 ;main.c:263: return false;
      0005CA AF               [ 4] 1669 	xor	a, a
      0005CB 18 02            [12] 1670 	jr	00131$
      0005CD                       1671 00126$:
                           0005CD  1672 	C$main.c$266$1_1$203	= .
                                   1673 	.globl	C$main.c$266$1_1$203
                                   1674 ;main.c:266: return true;
      0005CD 3E 01            [ 8] 1675 	ld	a, #0x01
      0005CF                       1676 00131$:
                           0005CF  1677 	C$main.c$267$1_1$200	= .
                                   1678 	.globl	C$main.c$267$1_1$200
                                   1679 ;main.c:267: }
      0005CF E8 0B            [16] 1680 	add	sp, #11
      0005D1 E1               [12] 1681 	pop	hl
      0005D2 E8 03            [16] 1682 	add	sp, #3
      0005D4 E9               [ 4] 1683 	jp	(hl)
                           0005D5  1684 	G$checkCollision$0$0	= .
                                   1685 	.globl	G$checkCollision$0$0
                           0005D5  1686 	C$main.c$269$1_1$214	= .
                                   1687 	.globl	C$main.c$269$1_1$214
                                   1688 ;main.c:269: bool checkCollision(UINT8 cursorx, UINT8 cursory, int currentPlayer) {
                                   1689 ;	---------------------------------
                                   1690 ; Function checkCollision
                                   1691 ; ---------------------------------
      0005D5                       1692 _checkCollision::
      0005D5 E8 F5            [16] 1693 	add	sp, #-11
      0005D7 F8 0A            [12] 1694 	ldhl	sp,	#10
      0005D9 32               [ 8] 1695 	ld	(hl-), a
      0005DA 73               [ 8] 1696 	ld	(hl), e
                           0005DB  1697 	C$main.c$273$1_0$214	= .
                                   1698 	.globl	C$main.c$273$1_0$214
                                   1699 ;main.c:273: if (currentPlayer == BLACK_PLAYER) {
      0005DB F8 0E            [12] 1700 	ldhl	sp,	#14
      0005DD 3A               [ 8] 1701 	ld	a, (hl-)
      0005DE B6               [ 8] 1702 	or	a, (hl)
      0005DF 20 0F            [12] 1703 	jr	NZ, 00102$
                           0005E1  1704 	C$main.c$274$2_0$215	= .
                                   1705 	.globl	C$main.c$274$2_0$215
                                   1706 ;main.c:274: pieces = blackPieces;
      0005E1 F8 02            [12] 1707 	ldhl	sp,	#2
      0005E3 3Er73            [ 8] 1708 	ld	a, #<(_blackPieces)
      0005E5 22               [ 8] 1709 	ld	(hl+), a
                           0005E6  1710 	C$main.c$275$2_0$215	= .
                                   1711 	.globl	C$main.c$275$2_0$215
                                   1712 ;main.c:275: numPieces = 12;
      0005E6 3Es02            [ 8] 1713 	ld	a, #>(_blackPieces)
      0005E8 22               [ 8] 1714 	ld	(hl+), a
      0005E9 3E 0C            [ 8] 1715 	ld	a, #0x0c
      0005EB 22               [ 8] 1716 	ld	(hl+), a
      0005EC AF               [ 4] 1717 	xor	a, a
      0005ED 77               [ 8] 1718 	ld	(hl), a
      0005EE 18 0D            [12] 1719 	jr	00103$
      0005F0                       1720 00102$:
                           0005F0  1721 	C$main.c$277$2_0$216	= .
                                   1722 	.globl	C$main.c$277$2_0$216
                                   1723 ;main.c:277: pieces = whitePieces;
      0005F0 F8 02            [12] 1724 	ldhl	sp,	#2
      0005F2 3Er97            [ 8] 1725 	ld	a, #<(_whitePieces)
      0005F4 22               [ 8] 1726 	ld	(hl+), a
                           0005F5  1727 	C$main.c$278$2_0$216	= .
                                   1728 	.globl	C$main.c$278$2_0$216
                                   1729 ;main.c:278: numPieces = 12;
      0005F5 3Es02            [ 8] 1730 	ld	a, #>(_whitePieces)
      0005F7 22               [ 8] 1731 	ld	(hl+), a
      0005F8 3E 0C            [ 8] 1732 	ld	a, #0x0c
      0005FA 22               [ 8] 1733 	ld	(hl+), a
      0005FB AF               [ 4] 1734 	xor	a, a
      0005FC 77               [ 8] 1735 	ld	(hl), a
      0005FD                       1736 00103$:
                           0005FD  1737 	C$main.c$281$3_0$217	= .
                                   1738 	.globl	C$main.c$281$3_0$217
                                   1739 ;main.c:281: for (int i = 0; i < numPieces; i++) {
      0005FD AF               [ 4] 1740 	xor	a, a
      0005FE F8 06            [12] 1741 	ldhl	sp,	#6
      000600 22               [ 8] 1742 	ld	(hl+), a
      000601 77               [ 8] 1743 	ld	(hl), a
      000602 01 00 00         [12] 1744 	ld	bc, #0x0000
      000605                       1745 00112$:
      000605 F8 04            [12] 1746 	ldhl	sp,	#4
      000607 79               [ 4] 1747 	ld	a, c
      000608 96               [ 8] 1748 	sub	a, (hl)
      000609 23               [ 8] 1749 	inc	hl
      00060A 78               [ 4] 1750 	ld	a, b
      00060B 9E               [ 8] 1751 	sbc	a, (hl)
      00060C 78               [ 4] 1752 	ld	a, b
      00060D 57               [ 4] 1753 	ld	d, a
      00060E 5E               [ 8] 1754 	ld	e, (hl)
      00060F CB 7B            [ 8] 1755 	bit	7, e
      000611 28 07            [12] 1756 	jr	Z, 00146$
      000613 CB 7A            [ 8] 1757 	bit	7, d
      000615 20 08            [12] 1758 	jr	NZ, 00147$
      000617 BF               [ 4] 1759 	cp	a, a
      000618 18 05            [12] 1760 	jr	00147$
      00061A                       1761 00146$:
      00061A CB 7A            [ 8] 1762 	bit	7, d
      00061C 28 01            [12] 1763 	jr	Z, 00147$
      00061E 37               [ 4] 1764 	scf
      00061F                       1765 00147$:
      00061F 30 73            [12] 1766 	jr	NC, 00110$
                           000621  1767 	C$main.c$282$3_0$218	= .
                                   1768 	.globl	C$main.c$282$3_0$218
                                   1769 ;main.c:282: UINT8 pieceX = pieces[i].x;
      000621 69               [ 4] 1770 	ld	l, c
      000622 60               [ 4] 1771 	ld	h, b
      000623 29               [ 8] 1772 	add	hl, hl
      000624 09               [ 8] 1773 	add	hl, bc
      000625 33               [ 8] 1774 	inc	sp
      000626 33               [ 8] 1775 	inc	sp
      000627 5D               [ 4] 1776 	ld	e, l
      000628 54               [ 4] 1777 	ld	d, h
      000629 D5               [16] 1778 	push	de
      00062A F8 02            [12] 1779 	ldhl	sp,	#2
      00062C 2A               [ 8] 1780 	ld	a,	(hl+)
      00062D 66               [ 8] 1781 	ld	h, (hl)
      00062E 6F               [ 4] 1782 	ld	l, a
      00062F 19               [ 8] 1783 	add	hl, de
      000630 5D               [ 4] 1784 	ld	e, l
      000631 54               [ 4] 1785 	ld	d, h
      000632 1A               [ 8] 1786 	ld	a, (de)
      000633 F8 08            [12] 1787 	ldhl	sp,	#8
                           000635  1788 	C$main.c$283$3_0$218	= .
                                   1789 	.globl	C$main.c$283$3_0$218
                                   1790 ;main.c:283: UINT8 pieceY = pieces[i].y;
                           000635  1791 	C$main.c$285$3_0$218	= .
                                   1792 	.globl	C$main.c$285$3_0$218
                                   1793 ;main.c:285: if (cursorx == (pieceX) &&
      000635 22               [ 8] 1794 	ld	(hl+), a
      000636 23               [ 8] 1795 	inc	hl
      000637 13               [ 8] 1796 	inc	de
      000638 1A               [ 8] 1797 	ld	a, (de)
      000639 5F               [ 4] 1798 	ld	e, a
      00063A 3A               [ 8] 1799 	ld	a, (hl-)
      00063B 2B               [ 8] 1800 	dec	hl
      00063C 96               [ 8] 1801 	sub	a, (hl)
      00063D 20 4C            [12] 1802 	jr	NZ, 00113$
                           00063F  1803 	C$main.c$286$3_0$218	= .
                                   1804 	.globl	C$main.c$286$3_0$218
                                   1805 ;main.c:286: cursory == (pieceY)) {
      00063F F8 09            [12] 1806 	ldhl	sp,	#9
      000641 7E               [ 8] 1807 	ld	a, (hl)
      000642 93               [ 4] 1808 	sub	a, e
      000643 20 46            [12] 1809 	jr	NZ, 00113$
                           000645  1810 	C$main.c$287$4_0$219	= .
                                   1811 	.globl	C$main.c$287$4_0$219
                                   1812 ;main.c:287: if (currentPlayer == BLACK_PLAYER) {
      000645 F8 0E            [12] 1813 	ldhl	sp,	#14
      000647 3A               [ 8] 1814 	ld	a, (hl-)
      000648 B6               [ 8] 1815 	or	a, (hl)
      000649 20 1F            [12] 1816 	jr	NZ, 00105$
                           00064B  1817 	C$main.c$288$5_0$220	= .
                                   1818 	.globl	C$main.c$288$5_0$220
                                   1819 ;main.c:288: selectedCoords = i;
      00064B F8 06            [12] 1820 	ldhl	sp,	#6
      00064D 7E               [ 8] 1821 	ld	a, (hl)
      00064E EAr08r00         [16] 1822 	ld	(#_selectedCoords),a
      000651 F8 07            [12] 1823 	ldhl	sp,	#7
      000653 7E               [ 8] 1824 	ld	a, (hl)
      000654 EAr09r00         [16] 1825 	ld	(#_selectedCoords + 1),a
                           000657  1826 	C$main.c$289$5_0$220	= .
                                   1827 	.globl	C$main.c$289$5_0$220
                                   1828 ;main.c:289: selectedPieceIndex = i + 4;
      000657 F8 06            [12] 1829 	ldhl	sp,#6
      000659 2A               [ 8] 1830 	ld	a, (hl+)
      00065A 5F               [ 4] 1831 	ld	e, a
      00065B 56               [ 8] 1832 	ld	d, (hl)
      00065C 21 04 00         [12] 1833 	ld	hl, #0x0004
      00065F 19               [ 8] 1834 	add	hl, de
      000660 5D               [ 4] 1835 	ld	e, l
      000661 54               [ 4] 1836 	ld	d, h
      000662 21r03r00         [12] 1837 	ld	hl, #_selectedPieceIndex
      000665 7B               [ 4] 1838 	ld	a, e
      000666 22               [ 8] 1839 	ld	(hl+), a
      000667 72               [ 8] 1840 	ld	(hl), d
      000668 18 1D            [12] 1841 	jr	00106$
      00066A                       1842 00105$:
                           00066A  1843 	C$main.c$291$5_0$221	= .
                                   1844 	.globl	C$main.c$291$5_0$221
                                   1845 ;main.c:291: selectedCoords = i;
      00066A F8 06            [12] 1846 	ldhl	sp,	#6
      00066C 7E               [ 8] 1847 	ld	a, (hl)
      00066D EAr08r00         [16] 1848 	ld	(#_selectedCoords),a
      000670 F8 07            [12] 1849 	ldhl	sp,	#7
      000672 7E               [ 8] 1850 	ld	a, (hl)
      000673 EAr09r00         [16] 1851 	ld	(#_selectedCoords + 1),a
                           000676  1852 	C$main.c$292$5_0$221	= .
                                   1853 	.globl	C$main.c$292$5_0$221
                                   1854 ;main.c:292: selectedPieceIndex = i + 16;
      000676 F8 06            [12] 1855 	ldhl	sp,#6
      000678 2A               [ 8] 1856 	ld	a, (hl+)
      000679 5F               [ 4] 1857 	ld	e, a
      00067A 56               [ 8] 1858 	ld	d, (hl)
      00067B 21 10 00         [12] 1859 	ld	hl, #0x0010
      00067E 19               [ 8] 1860 	add	hl, de
      00067F 5D               [ 4] 1861 	ld	e, l
      000680 54               [ 4] 1862 	ld	d, h
      000681 21r03r00         [12] 1863 	ld	hl, #_selectedPieceIndex
      000684 7B               [ 4] 1864 	ld	a, e
      000685 22               [ 8] 1865 	ld	(hl+), a
      000686 72               [ 8] 1866 	ld	(hl), d
      000687                       1867 00106$:
                           000687  1868 	C$main.c$294$4_0$219	= .
                                   1869 	.globl	C$main.c$294$4_0$219
                                   1870 ;main.c:294: return true;
      000687 3E 01            [ 8] 1871 	ld	a, #0x01
      000689 18 12            [12] 1872 	jr	00114$
      00068B                       1873 00113$:
                           00068B  1874 	C$main.c$281$2_0$217	= .
                                   1875 	.globl	C$main.c$281$2_0$217
                                   1876 ;main.c:281: for (int i = 0; i < numPieces; i++) {
      00068B 03               [ 8] 1877 	inc	bc
      00068C F8 06            [12] 1878 	ldhl	sp,	#6
      00068E 79               [ 4] 1879 	ld	a, c
      00068F 22               [ 8] 1880 	ld	(hl+), a
      000690 70               [ 8] 1881 	ld	(hl), b
      000691 C3r05r06         [16] 1882 	jp	00112$
      000694                       1883 00110$:
                           000694  1884 	C$main.c$298$1_0$214	= .
                                   1885 	.globl	C$main.c$298$1_0$214
                                   1886 ;main.c:298: selectedPieceIndex = -1;
      000694 21r03r00         [12] 1887 	ld	hl, #_selectedPieceIndex
      000697 3E FF            [ 8] 1888 	ld	a, #0xff
      000699 22               [ 8] 1889 	ld	(hl+), a
      00069A 36 FF            [12] 1890 	ld	(hl), #0xff
                           00069C  1891 	C$main.c$299$1_0$214	= .
                                   1892 	.globl	C$main.c$299$1_0$214
                                   1893 ;main.c:299: return false;
      00069C AF               [ 4] 1894 	xor	a, a
      00069D                       1895 00114$:
                           00069D  1896 	C$main.c$300$1_0$214	= .
                                   1897 	.globl	C$main.c$300$1_0$214
                                   1898 ;main.c:300: }
      00069D E8 0B            [16] 1899 	add	sp, #11
      00069F E1               [12] 1900 	pop	hl
      0006A0 C1               [12] 1901 	pop	bc
      0006A1 E9               [ 4] 1902 	jp	(hl)
                           0006A2  1903 	G$hasValidCaptureMoves$0$0	= .
                                   1904 	.globl	G$hasValidCaptureMoves$0$0
                           0006A2  1905 	C$main.c$301$1_0$223	= .
                                   1906 	.globl	C$main.c$301$1_0$223
                                   1907 ;main.c:301: bool hasValidCaptureMoves(UINT8 currentPlayer) {
                                   1908 ;	---------------------------------
                                   1909 ; Function hasValidCaptureMoves
                                   1910 ; ---------------------------------
      0006A2                       1911 _hasValidCaptureMoves::
      0006A2 E8 F2            [16] 1912 	add	sp, #-14
      0006A4 F8 0B            [12] 1913 	ldhl	sp,	#11
                           0006A6  1914 	C$main.c$302$1_0$223	= .
                                   1915 	.globl	C$main.c$302$1_0$223
                                   1916 ;main.c:302: Piece* pieces = (currentPlayer == BLACK_PLAYER) ? blackPieces : whitePieces;
      0006A6 77               [ 8] 1917 	ld	(hl), a
      0006A7 B7               [ 4] 1918 	or	a, a
      0006A8 20 05            [12] 1919 	jr	NZ, 00116$
      0006AA 01r73r02         [12] 1920 	ld	bc, #_blackPieces+0
      0006AD 18 03            [12] 1921 	jr	00117$
      0006AF                       1922 00116$:
      0006AF 01r97r02         [12] 1923 	ld	bc, #_whitePieces+0
      0006B2                       1924 00117$:
      0006B2 F8 02            [12] 1925 	ldhl	sp,	#2
      0006B4 79               [ 4] 1926 	ld	a, c
      0006B5 22               [ 8] 1927 	ld	(hl+), a
      0006B6 70               [ 8] 1928 	ld	(hl), b
                           0006B7  1929 	C$main.c$303$1_0$223	= .
                                   1930 	.globl	C$main.c$303$1_0$223
                                   1931 ;main.c:303: Piece* opponentPieces = (currentPlayer == BLACK_PLAYER) ? whitePieces : blackPieces;
      0006B7 F8 0B            [12] 1932 	ldhl	sp,	#11
      0006B9 7E               [ 8] 1933 	ld	a, (hl)
      0006BA B7               [ 4] 1934 	or	a, a
      0006BB 20 05            [12] 1935 	jr	NZ, 00118$
      0006BD 01r97r02         [12] 1936 	ld	bc, #_whitePieces+0
      0006C0 18 03            [12] 1937 	jr	00119$
      0006C2                       1938 00118$:
      0006C2 01r73r02         [12] 1939 	ld	bc, #_blackPieces+0
      0006C5                       1940 00119$:
      0006C5 F8 04            [12] 1941 	ldhl	sp,	#4
      0006C7 79               [ 4] 1942 	ld	a, c
      0006C8 22               [ 8] 1943 	ld	(hl+), a
      0006C9 70               [ 8] 1944 	ld	(hl), b
                           0006CA  1945 	C$main.c$306$1_0$223	= .
                                   1946 	.globl	C$main.c$306$1_0$223
                                   1947 ;main.c:306: for (int i = 0; i < numPieces; i++) {
      0006CA AF               [ 4] 1948 	xor	a, a
      0006CB F8 0C            [12] 1949 	ldhl	sp,	#12
      0006CD 22               [ 8] 1950 	ld	(hl+), a
      0006CE 77               [ 8] 1951 	ld	(hl), a
      0006CF                       1952 00112$:
      0006CF F8 0C            [12] 1953 	ldhl	sp,	#12
      0006D1 2A               [ 8] 1954 	ld	a, (hl+)
      0006D2 D6 0C            [ 8] 1955 	sub	a, #0x0c
      0006D4 7E               [ 8] 1956 	ld	a, (hl)
      0006D5 DE 00            [ 8] 1957 	sbc	a, #0x00
      0006D7 56               [ 8] 1958 	ld	d, (hl)
      0006D8 3E 00            [ 8] 1959 	ld	a, #0x00
      0006DA 5F               [ 4] 1960 	ld	e, a
      0006DB CB 7B            [ 8] 1961 	bit	7, e
      0006DD 28 07            [12] 1962 	jr	Z, 00208$
      0006DF CB 7A            [ 8] 1963 	bit	7, d
      0006E1 20 08            [12] 1964 	jr	NZ, 00209$
      0006E3 BF               [ 4] 1965 	cp	a, a
      0006E4 18 05            [12] 1966 	jr	00209$
      0006E6                       1967 00208$:
      0006E6 CB 7A            [ 8] 1968 	bit	7, d
      0006E8 28 01            [12] 1969 	jr	Z, 00209$
      0006EA 37               [ 4] 1970 	scf
      0006EB                       1971 00209$:
      0006EB D2r56r09         [16] 1972 	jp	NC, 00110$
                           0006EE  1973 	C$main.c$307$1_0$223	= .
                                   1974 	.globl	C$main.c$307$1_0$223
                                   1975 ;main.c:307: if (isValidMove(pieces[i].x - 2 * SQUARE_SIZE, pieces[i].y + 2 * SQUARE_SIZE, currentPlayer, i) && (getCaptureIndex((((pieces[i].x - 2 * SQUARE_SIZE) + (pieces[i].x)) / 2), (((pieces[i].y + 2 * SQUARE_SIZE) + (pieces[i].y)) / 2), opponentPieces, numOpponentPieces) != -1) ||
      0006EE F8 0C            [12] 1976 	ldhl	sp,#12
      0006F0 2A               [ 8] 1977 	ld	a, (hl+)
      0006F1 4F               [ 4] 1978 	ld	c, a
      0006F2 46               [ 8] 1979 	ld	b, (hl)
      0006F3 69               [ 4] 1980 	ld	l, c
      0006F4 60               [ 4] 1981 	ld	h, b
      0006F5 29               [ 8] 1982 	add	hl, hl
      0006F6 09               [ 8] 1983 	add	hl, bc
      0006F7 4D               [ 4] 1984 	ld	c, l
      0006F8 44               [ 4] 1985 	ld	b, h
      0006F9 F8 02            [12] 1986 	ldhl	sp,	#2
      0006FB 2A               [ 8] 1987 	ld	a,	(hl+)
      0006FC 66               [ 8] 1988 	ld	h, (hl)
      0006FD 6F               [ 4] 1989 	ld	l, a
      0006FE 09               [ 8] 1990 	add	hl, bc
      0006FF E5               [16] 1991 	push	hl
      000700 7D               [ 4] 1992 	ld	a, l
      000701 F8 0B            [12] 1993 	ldhl	sp,	#11
      000703 77               [ 8] 1994 	ld	(hl), a
      000704 E1               [12] 1995 	pop	hl
      000705 7C               [ 4] 1996 	ld	a, h
      000706 F8 0A            [12] 1997 	ldhl	sp,	#10
      000708 32               [ 8] 1998 	ld	(hl-), a
      000709 2A               [ 8] 1999 	ld	a, (hl+)
      00070A 5F               [ 4] 2000 	ld	e, a
      00070B 56               [ 8] 2001 	ld	d, (hl)
      00070C 6B               [ 4] 2002 	ld	l, e
      00070D 62               [ 4] 2003 	ld	h, d
      00070E 23               [ 8] 2004 	inc	hl
      00070F E5               [16] 2005 	push	hl
      000710 7D               [ 4] 2006 	ld	a, l
      000711 F8 08            [12] 2007 	ldhl	sp,	#8
      000713 77               [ 8] 2008 	ld	(hl), a
      000714 E1               [12] 2009 	pop	hl
      000715 7C               [ 4] 2010 	ld	a, h
      000716 F8 07            [12] 2011 	ldhl	sp,	#7
      000718 32               [ 8] 2012 	ld	(hl-), a
      000719 2A               [ 8] 2013 	ld	a, (hl+)
      00071A 5F               [ 4] 2014 	ld	e, a
      00071B 56               [ 8] 2015 	ld	d, (hl)
      00071C 1A               [ 8] 2016 	ld	a, (de)
      00071D C6 20            [ 8] 2017 	add	a, #0x20
      00071F 47               [ 4] 2018 	ld	b, a
      000720 F8 09            [12] 2019 	ldhl	sp,#9
      000722 2A               [ 8] 2020 	ld	a, (hl+)
      000723 5F               [ 4] 2021 	ld	e, a
      000724 2A               [ 8] 2022 	ld	a, (hl+)
      000725 23               [ 8] 2023 	inc	hl
      000726 57               [ 4] 2024 	ld	d, a
      000727 1A               [ 8] 2025 	ld	a, (de)
      000728 C6 E0            [ 8] 2026 	add	a, #0xe0
      00072A 4F               [ 4] 2027 	ld	c, a
      00072B 2A               [ 8] 2028 	ld	a, (hl+)
      00072C 5F               [ 4] 2029 	ld	e, a
      00072D 3A               [ 8] 2030 	ld	a, (hl-)
      00072E 2B               [ 8] 2031 	dec	hl
      00072F 57               [ 4] 2032 	ld	d, a
      000730 D5               [16] 2033 	push	de
      000731 7E               [ 8] 2034 	ld	a, (hl)
      000732 F5               [16] 2035 	push	af
      000733 33               [ 8] 2036 	inc	sp
      000734 58               [ 4] 2037 	ld	e, b
      000735 79               [ 4] 2038 	ld	a, c
      000736 CDrEEr03         [24] 2039 	call	_isValidMove
      000739 CB 47            [ 8] 2040 	bit	0,a
      00073B 28 56            [12] 2041 	jr	Z, 00105$
      00073D F8 06            [12] 2042 	ldhl	sp,#6
      00073F 2A               [ 8] 2043 	ld	a, (hl+)
      000740 5F               [ 4] 2044 	ld	e, a
      000741 56               [ 8] 2045 	ld	d, (hl)
      000742 1A               [ 8] 2046 	ld	a, (de)
      000743 4F               [ 4] 2047 	ld	c, a
      000744 06 00            [ 8] 2048 	ld	b, #0x00
      000746 21 20 00         [12] 2049 	ld	hl, #0x0020
      000749 09               [ 8] 2050 	add	hl, bc
      00074A 09               [ 8] 2051 	add	hl, bc
                                   2052 ;	spillPairReg hl
                                   2053 ;	spillPairReg hl
      00074B 4D               [ 4] 2054 	ld	c,l
      00074C 44               [ 4] 2055 	ld	b,h
                                   2056 ;	spillPairReg hl
                                   2057 ;	spillPairReg hl
      00074D CB 78            [ 8] 2058 	bit	7, b
      00074F 28 03            [12] 2059 	jr	Z, 00120$
      000751 69               [ 4] 2060 	ld	l, c
                                   2061 ;	spillPairReg hl
                                   2062 ;	spillPairReg hl
      000752 60               [ 4] 2063 	ld	h, b
                                   2064 ;	spillPairReg hl
                                   2065 ;	spillPairReg hl
      000753 23               [ 8] 2066 	inc	hl
      000754                       2067 00120$:
      000754 4D               [ 4] 2068 	ld	c, l
      000755 44               [ 4] 2069 	ld	b, h
      000756 CB 28            [ 8] 2070 	sra	b
      000758 CB 19            [ 8] 2071 	rr	c
      00075A F8 08            [12] 2072 	ldhl	sp,	#8
      00075C 79               [ 4] 2073 	ld	a, c
      00075D 22               [ 8] 2074 	ld	(hl+), a
      00075E 2A               [ 8] 2075 	ld	a, (hl+)
      00075F 5F               [ 4] 2076 	ld	e, a
      000760 56               [ 8] 2077 	ld	d, (hl)
      000761 1A               [ 8] 2078 	ld	a, (de)
      000762 4F               [ 4] 2079 	ld	c, a
      000763 06 00            [ 8] 2080 	ld	b, #0x00
      000765 79               [ 4] 2081 	ld	a, c
      000766 C6 E0            [ 8] 2082 	add	a, #0xe0
      000768 6F               [ 4] 2083 	ld	l, a
                                   2084 ;	spillPairReg hl
                                   2085 ;	spillPairReg hl
      000769 78               [ 4] 2086 	ld	a, b
      00076A CE FF            [ 8] 2087 	adc	a, #0xff
      00076C 67               [ 4] 2088 	ld	h, a
                                   2089 ;	spillPairReg hl
                                   2090 ;	spillPairReg hl
      00076D 09               [ 8] 2091 	add	hl, bc
                                   2092 ;	spillPairReg hl
                                   2093 ;	spillPairReg hl
      00076E 4D               [ 4] 2094 	ld	c,l
      00076F 44               [ 4] 2095 	ld	b,h
                                   2096 ;	spillPairReg hl
                                   2097 ;	spillPairReg hl
      000770 CB 78            [ 8] 2098 	bit	7, b
      000772 28 03            [12] 2099 	jr	Z, 00121$
      000774 69               [ 4] 2100 	ld	l, c
                                   2101 ;	spillPairReg hl
                                   2102 ;	spillPairReg hl
      000775 60               [ 4] 2103 	ld	h, b
                                   2104 ;	spillPairReg hl
                                   2105 ;	spillPairReg hl
      000776 23               [ 8] 2106 	inc	hl
      000777                       2107 00121$:
      000777 4D               [ 4] 2108 	ld	c, l
      000778 CB 2C            [ 8] 2109 	sra	h
      00077A CB 19            [ 8] 2110 	rr	c
      00077C 11 0C 00         [12] 2111 	ld	de, #0x000c
      00077F D5               [16] 2112 	push	de
      000780 F8 06            [12] 2113 	ldhl	sp,	#6
      000782 2A               [ 8] 2114 	ld	a, (hl+)
      000783 5F               [ 4] 2115 	ld	e, a
      000784 56               [ 8] 2116 	ld	d, (hl)
      000785 D5               [16] 2117 	push	de
      000786 F8 0C            [12] 2118 	ldhl	sp,	#12
      000788 5E               [ 8] 2119 	ld	e, (hl)
      000789 79               [ 4] 2120 	ld	a, c
      00078A CDr88r03         [24] 2121 	call	_getCaptureIndex
      00078D 79               [ 4] 2122 	ld	a, c
      00078E A0               [ 4] 2123 	and	a, b
      00078F 3C               [ 4] 2124 	inc	a
      000790 C2r47r09         [16] 2125 	jp	NZ,00101$
      000793                       2126 00105$:
                           000793  2127 	C$main.c$308$3_0$225	= .
                                   2128 	.globl	C$main.c$308$3_0$225
                                   2129 ;main.c:308: isValidMove(pieces[i].x + 2 * SQUARE_SIZE, pieces[i].y + 2 * SQUARE_SIZE, currentPlayer, i) && (getCaptureIndex((((pieces[i].x + 2 * SQUARE_SIZE) + (pieces[i].x)) / 2), (((pieces[i].y + 2 * SQUARE_SIZE) + (pieces[i].y)) / 2), opponentPieces, numOpponentPieces) != -1) ||
      000793 F8 06            [12] 2130 	ldhl	sp,#6
      000795 2A               [ 8] 2131 	ld	a, (hl+)
      000796 5F               [ 4] 2132 	ld	e, a
      000797 56               [ 8] 2133 	ld	d, (hl)
      000798 1A               [ 8] 2134 	ld	a, (de)
      000799 C6 20            [ 8] 2135 	add	a, #0x20
      00079B 47               [ 4] 2136 	ld	b, a
      00079C F8 09            [12] 2137 	ldhl	sp,#9
      00079E 2A               [ 8] 2138 	ld	a, (hl+)
      00079F 5F               [ 4] 2139 	ld	e, a
      0007A0 2A               [ 8] 2140 	ld	a, (hl+)
      0007A1 23               [ 8] 2141 	inc	hl
      0007A2 57               [ 4] 2142 	ld	d, a
      0007A3 1A               [ 8] 2143 	ld	a, (de)
      0007A4 C6 20            [ 8] 2144 	add	a, #0x20
      0007A6 4F               [ 4] 2145 	ld	c, a
      0007A7 2A               [ 8] 2146 	ld	a, (hl+)
      0007A8 5F               [ 4] 2147 	ld	e, a
      0007A9 3A               [ 8] 2148 	ld	a, (hl-)
      0007AA 2B               [ 8] 2149 	dec	hl
      0007AB 57               [ 4] 2150 	ld	d, a
      0007AC D5               [16] 2151 	push	de
      0007AD 7E               [ 8] 2152 	ld	a, (hl)
      0007AE F5               [16] 2153 	push	af
      0007AF 33               [ 8] 2154 	inc	sp
      0007B0 58               [ 4] 2155 	ld	e, b
      0007B1 79               [ 4] 2156 	ld	a, c
      0007B2 CDrEEr03         [24] 2157 	call	_isValidMove
      0007B5 CB 47            [ 8] 2158 	bit	0,a
      0007B7 28 52            [12] 2159 	jr	Z, 00107$
      0007B9 F8 06            [12] 2160 	ldhl	sp,#6
      0007BB 2A               [ 8] 2161 	ld	a, (hl+)
      0007BC 5F               [ 4] 2162 	ld	e, a
      0007BD 56               [ 8] 2163 	ld	d, (hl)
      0007BE 1A               [ 8] 2164 	ld	a, (de)
      0007BF 4F               [ 4] 2165 	ld	c, a
      0007C0 06 00            [ 8] 2166 	ld	b, #0x00
      0007C2 21 20 00         [12] 2167 	ld	hl, #0x0020
      0007C5 09               [ 8] 2168 	add	hl, bc
      0007C6 09               [ 8] 2169 	add	hl, bc
                                   2170 ;	spillPairReg hl
                                   2171 ;	spillPairReg hl
      0007C7 4D               [ 4] 2172 	ld	c,l
      0007C8 44               [ 4] 2173 	ld	b,h
                                   2174 ;	spillPairReg hl
                                   2175 ;	spillPairReg hl
      0007C9 CB 78            [ 8] 2176 	bit	7, b
      0007CB 28 03            [12] 2177 	jr	Z, 00122$
      0007CD 69               [ 4] 2178 	ld	l, c
                                   2179 ;	spillPairReg hl
                                   2180 ;	spillPairReg hl
      0007CE 60               [ 4] 2181 	ld	h, b
                                   2182 ;	spillPairReg hl
                                   2183 ;	spillPairReg hl
      0007CF 23               [ 8] 2184 	inc	hl
      0007D0                       2185 00122$:
      0007D0 4D               [ 4] 2186 	ld	c, l
      0007D1 44               [ 4] 2187 	ld	b, h
      0007D2 CB 28            [ 8] 2188 	sra	b
      0007D4 CB 19            [ 8] 2189 	rr	c
      0007D6 F8 08            [12] 2190 	ldhl	sp,	#8
      0007D8 79               [ 4] 2191 	ld	a, c
      0007D9 22               [ 8] 2192 	ld	(hl+), a
      0007DA 2A               [ 8] 2193 	ld	a, (hl+)
      0007DB 5F               [ 4] 2194 	ld	e, a
      0007DC 56               [ 8] 2195 	ld	d, (hl)
      0007DD 1A               [ 8] 2196 	ld	a, (de)
      0007DE 4F               [ 4] 2197 	ld	c, a
      0007DF 06 00            [ 8] 2198 	ld	b, #0x00
      0007E1 21 20 00         [12] 2199 	ld	hl, #0x0020
      0007E4 09               [ 8] 2200 	add	hl, bc
      0007E5 09               [ 8] 2201 	add	hl, bc
                                   2202 ;	spillPairReg hl
                                   2203 ;	spillPairReg hl
      0007E6 4D               [ 4] 2204 	ld	c,l
      0007E7 44               [ 4] 2205 	ld	b,h
                                   2206 ;	spillPairReg hl
                                   2207 ;	spillPairReg hl
      0007E8 CB 78            [ 8] 2208 	bit	7, b
      0007EA 28 03            [12] 2209 	jr	Z, 00123$
      0007EC 69               [ 4] 2210 	ld	l, c
                                   2211 ;	spillPairReg hl
                                   2212 ;	spillPairReg hl
      0007ED 60               [ 4] 2213 	ld	h, b
                                   2214 ;	spillPairReg hl
                                   2215 ;	spillPairReg hl
      0007EE 23               [ 8] 2216 	inc	hl
      0007EF                       2217 00123$:
      0007EF 4D               [ 4] 2218 	ld	c, l
      0007F0 CB 2C            [ 8] 2219 	sra	h
      0007F2 CB 19            [ 8] 2220 	rr	c
      0007F4 11 0C 00         [12] 2221 	ld	de, #0x000c
      0007F7 D5               [16] 2222 	push	de
      0007F8 F8 06            [12] 2223 	ldhl	sp,	#6
      0007FA 2A               [ 8] 2224 	ld	a, (hl+)
      0007FB 5F               [ 4] 2225 	ld	e, a
      0007FC 56               [ 8] 2226 	ld	d, (hl)
      0007FD D5               [16] 2227 	push	de
      0007FE F8 0C            [12] 2228 	ldhl	sp,	#12
      000800 5E               [ 8] 2229 	ld	e, (hl)
      000801 79               [ 4] 2230 	ld	a, c
      000802 CDr88r03         [24] 2231 	call	_getCaptureIndex
      000805 79               [ 4] 2232 	ld	a, c
      000806 A0               [ 4] 2233 	and	a, b
      000807 3C               [ 4] 2234 	inc	a
      000808 C2r47r09         [16] 2235 	jp	NZ,00101$
      00080B                       2236 00107$:
                           00080B  2237 	C$main.c$309$3_0$225	= .
                                   2238 	.globl	C$main.c$309$3_0$225
                                   2239 ;main.c:309: isValidMove(pieces[i].x - 2 * SQUARE_SIZE, pieces[i].y - 2 * SQUARE_SIZE, currentPlayer, i) && (getCaptureIndex((((pieces[i].x - 2 * SQUARE_SIZE) + (pieces[i].x)) / 2), (((pieces[i].y - 2 * SQUARE_SIZE) + (pieces[i].y)) / 2), opponentPieces, numOpponentPieces) != -1) ||
      00080B F8 06            [12] 2240 	ldhl	sp,#6
      00080D 2A               [ 8] 2241 	ld	a, (hl+)
      00080E 5F               [ 4] 2242 	ld	e, a
      00080F 56               [ 8] 2243 	ld	d, (hl)
      000810 1A               [ 8] 2244 	ld	a, (de)
      000811 C6 E0            [ 8] 2245 	add	a, #0xe0
      000813 47               [ 4] 2246 	ld	b, a
      000814 F8 09            [12] 2247 	ldhl	sp,#9
      000816 2A               [ 8] 2248 	ld	a, (hl+)
      000817 5F               [ 4] 2249 	ld	e, a
      000818 2A               [ 8] 2250 	ld	a, (hl+)
      000819 23               [ 8] 2251 	inc	hl
      00081A 57               [ 4] 2252 	ld	d, a
      00081B 1A               [ 8] 2253 	ld	a, (de)
      00081C C6 E0            [ 8] 2254 	add	a, #0xe0
      00081E 4F               [ 4] 2255 	ld	c, a
      00081F 2A               [ 8] 2256 	ld	a, (hl+)
      000820 5F               [ 4] 2257 	ld	e, a
      000821 3A               [ 8] 2258 	ld	a, (hl-)
      000822 2B               [ 8] 2259 	dec	hl
      000823 57               [ 4] 2260 	ld	d, a
      000824 D5               [16] 2261 	push	de
      000825 7E               [ 8] 2262 	ld	a, (hl)
      000826 F5               [16] 2263 	push	af
      000827 33               [ 8] 2264 	inc	sp
      000828 58               [ 4] 2265 	ld	e, b
      000829 79               [ 4] 2266 	ld	a, c
      00082A CDrEEr03         [24] 2267 	call	_isValidMove
      00082D CB 47            [ 8] 2268 	bit	0,a
      00082F 28 59            [12] 2269 	jr	Z, 00109$
      000831 F8 06            [12] 2270 	ldhl	sp,#6
      000833 2A               [ 8] 2271 	ld	a, (hl+)
      000834 5F               [ 4] 2272 	ld	e, a
      000835 56               [ 8] 2273 	ld	d, (hl)
      000836 1A               [ 8] 2274 	ld	a, (de)
      000837 4F               [ 4] 2275 	ld	c, a
      000838 06 00            [ 8] 2276 	ld	b, #0x00
      00083A 79               [ 4] 2277 	ld	a, c
      00083B C6 E0            [ 8] 2278 	add	a, #0xe0
      00083D 6F               [ 4] 2279 	ld	l, a
                                   2280 ;	spillPairReg hl
                                   2281 ;	spillPairReg hl
      00083E 78               [ 4] 2282 	ld	a, b
      00083F CE FF            [ 8] 2283 	adc	a, #0xff
      000841 67               [ 4] 2284 	ld	h, a
                                   2285 ;	spillPairReg hl
                                   2286 ;	spillPairReg hl
      000842 09               [ 8] 2287 	add	hl, bc
                                   2288 ;	spillPairReg hl
                                   2289 ;	spillPairReg hl
      000843 4D               [ 4] 2290 	ld	c,l
      000844 44               [ 4] 2291 	ld	b,h
                                   2292 ;	spillPairReg hl
                                   2293 ;	spillPairReg hl
      000845 CB 78            [ 8] 2294 	bit	7, b
      000847 28 03            [12] 2295 	jr	Z, 00124$
      000849 69               [ 4] 2296 	ld	l, c
                                   2297 ;	spillPairReg hl
                                   2298 ;	spillPairReg hl
      00084A 60               [ 4] 2299 	ld	h, b
                                   2300 ;	spillPairReg hl
                                   2301 ;	spillPairReg hl
      00084B 23               [ 8] 2302 	inc	hl
      00084C                       2303 00124$:
      00084C 4D               [ 4] 2304 	ld	c, l
      00084D 44               [ 4] 2305 	ld	b, h
      00084E CB 28            [ 8] 2306 	sra	b
      000850 CB 19            [ 8] 2307 	rr	c
      000852 F8 08            [12] 2308 	ldhl	sp,	#8
      000854 79               [ 4] 2309 	ld	a, c
      000855 22               [ 8] 2310 	ld	(hl+), a
      000856 2A               [ 8] 2311 	ld	a, (hl+)
      000857 5F               [ 4] 2312 	ld	e, a
      000858 56               [ 8] 2313 	ld	d, (hl)
      000859 1A               [ 8] 2314 	ld	a, (de)
      00085A 4F               [ 4] 2315 	ld	c, a
      00085B 06 00            [ 8] 2316 	ld	b, #0x00
      00085D 79               [ 4] 2317 	ld	a, c
      00085E C6 E0            [ 8] 2318 	add	a, #0xe0
      000860 6F               [ 4] 2319 	ld	l, a
                                   2320 ;	spillPairReg hl
                                   2321 ;	spillPairReg hl
      000861 78               [ 4] 2322 	ld	a, b
      000862 CE FF            [ 8] 2323 	adc	a, #0xff
      000864 67               [ 4] 2324 	ld	h, a
                                   2325 ;	spillPairReg hl
                                   2326 ;	spillPairReg hl
      000865 09               [ 8] 2327 	add	hl, bc
      000866 4D               [ 4] 2328 	ld	c, l
      000867 44               [ 4] 2329 	ld	b, h
      000868 CB 7C            [ 8] 2330 	bit	7, h
      00086A 28 03            [12] 2331 	jr	Z, 00125$
      00086C 23               [ 8] 2332 	inc	hl
      00086D 4D               [ 4] 2333 	ld	c, l
      00086E 44               [ 4] 2334 	ld	b, h
      00086F                       2335 00125$:
      00086F CB 28            [ 8] 2336 	sra	b
      000871 CB 19            [ 8] 2337 	rr	c
      000873 11 0C 00         [12] 2338 	ld	de, #0x000c
      000876 D5               [16] 2339 	push	de
      000877 F8 06            [12] 2340 	ldhl	sp,	#6
      000879 2A               [ 8] 2341 	ld	a, (hl+)
      00087A 5F               [ 4] 2342 	ld	e, a
      00087B 56               [ 8] 2343 	ld	d, (hl)
      00087C D5               [16] 2344 	push	de
      00087D F8 0C            [12] 2345 	ldhl	sp,	#12
      00087F 5E               [ 8] 2346 	ld	e, (hl)
      000880 79               [ 4] 2347 	ld	a, c
      000881 CDr88r03         [24] 2348 	call	_getCaptureIndex
      000884 79               [ 4] 2349 	ld	a, c
      000885 A0               [ 4] 2350 	and	a, b
      000886 3C               [ 4] 2351 	inc	a
      000887 C2r47r09         [16] 2352 	jp	NZ,00101$
      00088A                       2353 00109$:
                           00088A  2354 	C$main.c$310$3_0$225	= .
                                   2355 	.globl	C$main.c$310$3_0$225
                                   2356 ;main.c:310: isValidMove(pieces[i].x + 2 * SQUARE_SIZE, pieces[i].y - 2 * SQUARE_SIZE, currentPlayer, i) && (getCaptureIndex((((pieces[i].x + 2 * SQUARE_SIZE) + (pieces[i].x)) / 2), (((pieces[i].y - 2 * SQUARE_SIZE) + (pieces[i].y)) / 2), opponentPieces, numOpponentPieces) != -1)) {
      00088A F8 06            [12] 2357 	ldhl	sp,#6
      00088C 2A               [ 8] 2358 	ld	a, (hl+)
      00088D 5F               [ 4] 2359 	ld	e, a
      00088E 56               [ 8] 2360 	ld	d, (hl)
      00088F 1A               [ 8] 2361 	ld	a, (de)
      000890 C6 E0            [ 8] 2362 	add	a, #0xe0
      000892 4F               [ 4] 2363 	ld	c, a
      000893 F8 09            [12] 2364 	ldhl	sp,#9
      000895 2A               [ 8] 2365 	ld	a, (hl+)
      000896 5F               [ 4] 2366 	ld	e, a
      000897 2A               [ 8] 2367 	ld	a, (hl+)
      000898 23               [ 8] 2368 	inc	hl
      000899 57               [ 4] 2369 	ld	d, a
      00089A 1A               [ 8] 2370 	ld	a, (de)
      00089B C6 20            [ 8] 2371 	add	a, #0x20
      00089D 47               [ 4] 2372 	ld	b, a
      00089E 2A               [ 8] 2373 	ld	a, (hl+)
      00089F 5F               [ 4] 2374 	ld	e, a
      0008A0 3A               [ 8] 2375 	ld	a, (hl-)
      0008A1 2B               [ 8] 2376 	dec	hl
      0008A2 57               [ 4] 2377 	ld	d, a
      0008A3 D5               [16] 2378 	push	de
      0008A4 7E               [ 8] 2379 	ld	a, (hl)
      0008A5 F5               [16] 2380 	push	af
      0008A6 33               [ 8] 2381 	inc	sp
      0008A7 59               [ 4] 2382 	ld	e, c
      0008A8 78               [ 4] 2383 	ld	a, b
      0008A9 CDrEEr03         [24] 2384 	call	_isValidMove
      0008AC CB 47            [ 8] 2385 	bit	0,a
      0008AE CAr4Br09         [16] 2386 	jp	Z, 00113$
      0008B1 F8 06            [12] 2387 	ldhl	sp,#6
      0008B3 2A               [ 8] 2388 	ld	a, (hl+)
      0008B4 5F               [ 4] 2389 	ld	e, a
      0008B5 56               [ 8] 2390 	ld	d, (hl)
      0008B6 1A               [ 8] 2391 	ld	a, (de)
      0008B7 4F               [ 4] 2392 	ld	c, a
      0008B8 06 00            [ 8] 2393 	ld	b, #0x00
      0008BA 79               [ 4] 2394 	ld	a, c
      0008BB C6 E0            [ 8] 2395 	add	a, #0xe0
      0008BD 5F               [ 4] 2396 	ld	e, a
      0008BE 78               [ 4] 2397 	ld	a, b
      0008BF CE FF            [ 8] 2398 	adc	a, #0xff
      0008C1 57               [ 4] 2399 	ld	d, a
      0008C2 6B               [ 4] 2400 	ld	l, e
      0008C3 62               [ 4] 2401 	ld	h, d
      0008C4 09               [ 8] 2402 	add	hl, bc
      0008C5 33               [ 8] 2403 	inc	sp
      0008C6 33               [ 8] 2404 	inc	sp
      0008C7 E5               [16] 2405 	push	hl
      0008C8 F8 00            [12] 2406 	ldhl	sp,	#0
      0008CA 7E               [ 8] 2407 	ld	a, (hl)
      0008CB F8 07            [12] 2408 	ldhl	sp,	#7
      0008CD 77               [ 8] 2409 	ld	(hl), a
      0008CE F8 01            [12] 2410 	ldhl	sp,	#1
      0008D0 7E               [ 8] 2411 	ld	a, (hl)
      0008D1 F8 08            [12] 2412 	ldhl	sp,	#8
      0008D3 77               [ 8] 2413 	ld	(hl), a
      0008D4 F8 01            [12] 2414 	ldhl	sp,	#1
      0008D6 CB 7E            [12] 2415 	bit	7, (hl)
      0008D8 28 0F            [12] 2416 	jr	Z, 00126$
      0008DA D1               [12] 2417 	pop	de
      0008DB D5               [16] 2418 	push	de
      0008DC 6B               [ 4] 2419 	ld	l, e
      0008DD 62               [ 4] 2420 	ld	h, d
      0008DE 23               [ 8] 2421 	inc	hl
      0008DF E5               [16] 2422 	push	hl
      0008E0 7D               [ 4] 2423 	ld	a, l
      0008E1 F8 09            [12] 2424 	ldhl	sp,	#9
      0008E3 77               [ 8] 2425 	ld	(hl), a
      0008E4 E1               [12] 2426 	pop	hl
      0008E5 7C               [ 4] 2427 	ld	a, h
      0008E6 F8 08            [12] 2428 	ldhl	sp,	#8
      0008E8 77               [ 8] 2429 	ld	(hl), a
      0008E9                       2430 00126$:
      0008E9 F8 07            [12] 2431 	ldhl	sp,#7
      0008EB 2A               [ 8] 2432 	ld	a, (hl+)
      0008EC 4F               [ 4] 2433 	ld	c, a
      0008ED 3A               [ 8] 2434 	ld	a, (hl-)
      0008EE 2B               [ 8] 2435 	dec	hl
      0008EF 47               [ 4] 2436 	ld	b, a
      0008F0 CB 28            [ 8] 2437 	sra	b
      0008F2 CB 19            [ 8] 2438 	rr	c
      0008F4 71               [ 8] 2439 	ld	(hl), c
      0008F5 F8 09            [12] 2440 	ldhl	sp,#9
      0008F7 2A               [ 8] 2441 	ld	a, (hl+)
      0008F8 5F               [ 4] 2442 	ld	e, a
      0008F9 56               [ 8] 2443 	ld	d, (hl)
      0008FA 1A               [ 8] 2444 	ld	a, (de)
      0008FB 4F               [ 4] 2445 	ld	c, a
      0008FC 06 00            [ 8] 2446 	ld	b, #0x00
      0008FE 21 20 00         [12] 2447 	ld	hl, #0x0020
      000901 09               [ 8] 2448 	add	hl, bc
      000902 09               [ 8] 2449 	add	hl, bc
      000903 E5               [16] 2450 	push	hl
      000904 7D               [ 4] 2451 	ld	a, l
      000905 F8 09            [12] 2452 	ldhl	sp,	#9
      000907 77               [ 8] 2453 	ld	(hl), a
      000908 E1               [12] 2454 	pop	hl
      000909 7C               [ 4] 2455 	ld	a, h
      00090A F8 08            [12] 2456 	ldhl	sp,	#8
      00090C 32               [ 8] 2457 	ld	(hl-), a
      00090D 2A               [ 8] 2458 	ld	a, (hl+)
      00090E 23               [ 8] 2459 	inc	hl
      00090F 32               [ 8] 2460 	ld	(hl-), a
      000910 2A               [ 8] 2461 	ld	a, (hl+)
      000911 23               [ 8] 2462 	inc	hl
      000912 32               [ 8] 2463 	ld	(hl-), a
      000913 2B               [ 8] 2464 	dec	hl
      000914 CB 7E            [12] 2465 	bit	7, (hl)
      000916 28 11            [12] 2466 	jr	Z, 00127$
      000918 2B               [ 8] 2467 	dec	hl
      000919 2A               [ 8] 2468 	ld	a, (hl+)
      00091A 5F               [ 4] 2469 	ld	e, a
      00091B 56               [ 8] 2470 	ld	d, (hl)
      00091C 6B               [ 4] 2471 	ld	l, e
      00091D 62               [ 4] 2472 	ld	h, d
      00091E 23               [ 8] 2473 	inc	hl
      00091F E5               [16] 2474 	push	hl
      000920 7D               [ 4] 2475 	ld	a, l
      000921 F8 0B            [12] 2476 	ldhl	sp,	#11
      000923 77               [ 8] 2477 	ld	(hl), a
      000924 E1               [12] 2478 	pop	hl
      000925 7C               [ 4] 2479 	ld	a, h
      000926 F8 0A            [12] 2480 	ldhl	sp,	#10
      000928 77               [ 8] 2481 	ld	(hl), a
      000929                       2482 00127$:
      000929 F8 09            [12] 2483 	ldhl	sp,#9
      00092B 2A               [ 8] 2484 	ld	a, (hl+)
      00092C 4F               [ 4] 2485 	ld	c, a
      00092D 46               [ 8] 2486 	ld	b, (hl)
      00092E CB 28            [ 8] 2487 	sra	b
      000930 CB 19            [ 8] 2488 	rr	c
      000932 11 0C 00         [12] 2489 	ld	de, #0x000c
      000935 D5               [16] 2490 	push	de
      000936 F8 06            [12] 2491 	ldhl	sp,	#6
      000938 2A               [ 8] 2492 	ld	a, (hl+)
      000939 5F               [ 4] 2493 	ld	e, a
      00093A 2A               [ 8] 2494 	ld	a, (hl+)
      00093B 57               [ 4] 2495 	ld	d, a
      00093C D5               [16] 2496 	push	de
      00093D 5E               [ 8] 2497 	ld	e, (hl)
      00093E 79               [ 4] 2498 	ld	a, c
      00093F CDr88r03         [24] 2499 	call	_getCaptureIndex
      000942 79               [ 4] 2500 	ld	a, c
      000943 A0               [ 4] 2501 	and	a, b
      000944 3C               [ 4] 2502 	inc	a
      000945 28 04            [12] 2503 	jr	Z, 00113$
      000947                       2504 00101$:
                           000947  2505 	C$main.c$311$4_0$226	= .
                                   2506 	.globl	C$main.c$311$4_0$226
                                   2507 ;main.c:311: return true; // Found at least one valid capture move
      000947 3E 01            [ 8] 2508 	ld	a, #0x01
      000949 18 0C            [12] 2509 	jr	00114$
      00094B                       2510 00113$:
                           00094B  2511 	C$main.c$306$2_0$224	= .
                                   2512 	.globl	C$main.c$306$2_0$224
                                   2513 ;main.c:306: for (int i = 0; i < numPieces; i++) {
      00094B F8 0C            [12] 2514 	ldhl	sp,	#12
      00094D 34               [12] 2515 	inc	(hl)
      00094E C2rCFr06         [16] 2516 	jp	NZ,00112$
      000951 23               [ 8] 2517 	inc	hl
      000952 34               [12] 2518 	inc	(hl)
      000953 C3rCFr06         [16] 2519 	jp	00112$
      000956                       2520 00110$:
                           000956  2521 	C$main.c$314$1_0$223	= .
                                   2522 	.globl	C$main.c$314$1_0$223
                                   2523 ;main.c:314: return false; // No valid capture moves found for any piece
      000956 AF               [ 4] 2524 	xor	a, a
      000957                       2525 00114$:
                           000957  2526 	C$main.c$315$1_0$223	= .
                                   2527 	.globl	C$main.c$315$1_0$223
                                   2528 ;main.c:315: }
      000957 E8 0E            [16] 2529 	add	sp, #14
                           000959  2530 	C$main.c$315$1_0$223	= .
                                   2531 	.globl	C$main.c$315$1_0$223
                           000959  2532 	XG$hasValidCaptureMoves$0$0	= .
                                   2533 	.globl	XG$hasValidCaptureMoves$0$0
      000959 C9               [16] 2534 	ret
                           00095A  2535 	G$hasValidNonCaptureMoves$0$0	= .
                                   2536 	.globl	G$hasValidNonCaptureMoves$0$0
                           00095A  2537 	C$main.c$316$1_0$228	= .
                                   2538 	.globl	C$main.c$316$1_0$228
                                   2539 ;main.c:316: bool hasValidNonCaptureMoves(UINT8 currentPlayer) {
                                   2540 ;	---------------------------------
                                   2541 ; Function hasValidNonCaptureMoves
                                   2542 ; ---------------------------------
      00095A                       2543 _hasValidNonCaptureMoves::
      00095A E8 F8            [16] 2544 	add	sp, #-8
      00095C F8 07            [12] 2545 	ldhl	sp,	#7
                           00095E  2546 	C$main.c$317$1_0$228	= .
                                   2547 	.globl	C$main.c$317$1_0$228
                                   2548 ;main.c:317: Piece* pieces = (currentPlayer == BLACK_PLAYER) ? blackPieces : whitePieces;
      00095E 77               [ 8] 2549 	ld	(hl), a
      00095F B7               [ 4] 2550 	or	a, a
      000960 20 05            [12] 2551 	jr	NZ, 00112$
      000962 01r73r02         [12] 2552 	ld	bc, #_blackPieces+0
      000965 18 03            [12] 2553 	jr	00113$
      000967                       2554 00112$:
      000967 01r97r02         [12] 2555 	ld	bc, #_whitePieces+0
      00096A                       2556 00113$:
      00096A 33               [ 8] 2557 	inc	sp
      00096B 33               [ 8] 2558 	inc	sp
      00096C C5               [16] 2559 	push	bc
                           00096D  2560 	C$main.c$319$1_0$228	= .
                                   2561 	.globl	C$main.c$319$1_0$228
                                   2562 ;main.c:319: for (int i = 0; i < numPieces; i++) {
      00096D 01 00 00         [12] 2563 	ld	bc, #0x0000
      000970                       2564 00108$:
      000970 79               [ 4] 2565 	ld	a, c
      000971 D6 0C            [ 8] 2566 	sub	a, #0x0c
      000973 78               [ 4] 2567 	ld	a, b
      000974 17               [ 4] 2568 	rla
      000975 3F               [ 4] 2569 	ccf
      000976 1F               [ 4] 2570 	rra
      000977 DE 80            [ 8] 2571 	sbc	a, #0x80
      000979 D2r44r0A         [16] 2572 	jp	NC, 00106$
                           00097C  2573 	C$main.c$320$3_0$230	= .
                                   2574 	.globl	C$main.c$320$3_0$230
                                   2575 ;main.c:320: if (isValidMove(pieces[i].x - SQUARE_SIZE, pieces[i].y - SQUARE_SIZE, currentPlayer, i) ||
      00097C 69               [ 4] 2576 	ld	l, c
      00097D 60               [ 4] 2577 	ld	h, b
      00097E 29               [ 8] 2578 	add	hl, hl
      00097F 09               [ 8] 2579 	add	hl, bc
      000980 E5               [16] 2580 	push	hl
      000981 7D               [ 4] 2581 	ld	a, l
      000982 F8 07            [12] 2582 	ldhl	sp,	#7
      000984 77               [ 8] 2583 	ld	(hl), a
      000985 E1               [12] 2584 	pop	hl
      000986 7C               [ 4] 2585 	ld	a, h
      000987 F8 06            [12] 2586 	ldhl	sp,	#6
      000989 32               [ 8] 2587 	ld	(hl-), a
      00098A 2A               [ 8] 2588 	ld	a, (hl+)
      00098B 5F               [ 4] 2589 	ld	e, a
      00098C 56               [ 8] 2590 	ld	d, (hl)
      00098D E1               [12] 2591 	pop	hl
      00098E E5               [16] 2592 	push	hl
      00098F 19               [ 8] 2593 	add	hl, de
      000990 E5               [16] 2594 	push	hl
      000991 7D               [ 4] 2595 	ld	a, l
      000992 F8 04            [12] 2596 	ldhl	sp,	#4
      000994 77               [ 8] 2597 	ld	(hl), a
      000995 E1               [12] 2598 	pop	hl
      000996 7C               [ 4] 2599 	ld	a, h
      000997 F8 03            [12] 2600 	ldhl	sp,	#3
      000999 32               [ 8] 2601 	ld	(hl-), a
      00099A 2A               [ 8] 2602 	ld	a, (hl+)
      00099B 5F               [ 4] 2603 	ld	e, a
      00099C 56               [ 8] 2604 	ld	d, (hl)
      00099D 6B               [ 4] 2605 	ld	l, e
      00099E 62               [ 4] 2606 	ld	h, d
      00099F 23               [ 8] 2607 	inc	hl
      0009A0 E5               [16] 2608 	push	hl
      0009A1 7D               [ 4] 2609 	ld	a, l
      0009A2 F8 06            [12] 2610 	ldhl	sp,	#6
      0009A4 77               [ 8] 2611 	ld	(hl), a
      0009A5 E1               [12] 2612 	pop	hl
      0009A6 7C               [ 4] 2613 	ld	a, h
      0009A7 F8 05            [12] 2614 	ldhl	sp,	#5
      0009A9 32               [ 8] 2615 	ld	(hl-), a
      0009AA 2A               [ 8] 2616 	ld	a, (hl+)
      0009AB 5F               [ 4] 2617 	ld	e, a
      0009AC 2A               [ 8] 2618 	ld	a, (hl+)
      0009AD 57               [ 4] 2619 	ld	d, a
      0009AE 1A               [ 8] 2620 	ld	a, (de)
      0009AF C6 F0            [ 8] 2621 	add	a, #0xf0
      0009B1 77               [ 8] 2622 	ld	(hl), a
      0009B2 F8 02            [12] 2623 	ldhl	sp,#2
      0009B4 2A               [ 8] 2624 	ld	a, (hl+)
      0009B5 5F               [ 4] 2625 	ld	e, a
      0009B6 56               [ 8] 2626 	ld	d, (hl)
      0009B7 1A               [ 8] 2627 	ld	a, (de)
      0009B8 C6 F0            [ 8] 2628 	add	a, #0xf0
      0009BA 57               [ 4] 2629 	ld	d, a
      0009BB C5               [16] 2630 	push	bc
      0009BC C5               [16] 2631 	push	bc
      0009BD F8 0B            [12] 2632 	ldhl	sp,	#11
      0009BF 3A               [ 8] 2633 	ld	a, (hl-)
      0009C0 F5               [16] 2634 	push	af
      0009C1 33               [ 8] 2635 	inc	sp
      0009C2 5E               [ 8] 2636 	ld	e, (hl)
      0009C3 7A               [ 4] 2637 	ld	a, d
      0009C4 CDrEEr03         [24] 2638 	call	_isValidMove
      0009C7 5F               [ 4] 2639 	ld	e, a
      0009C8 C1               [12] 2640 	pop	bc
      0009C9 CB 43            [ 8] 2641 	bit	0, e
      0009CB 20 6F            [12] 2642 	jr	NZ, 00101$
                           0009CD  2643 	C$main.c$321$3_0$230	= .
                                   2644 	.globl	C$main.c$321$3_0$230
                                   2645 ;main.c:321: isValidMove(pieces[i].x + SQUARE_SIZE, pieces[i].y - SQUARE_SIZE, currentPlayer, i) ||
      0009CD F8 04            [12] 2646 	ldhl	sp,#4
      0009CF 2A               [ 8] 2647 	ld	a, (hl+)
      0009D0 5F               [ 4] 2648 	ld	e, a
      0009D1 2A               [ 8] 2649 	ld	a, (hl+)
      0009D2 57               [ 4] 2650 	ld	d, a
      0009D3 1A               [ 8] 2651 	ld	a, (de)
      0009D4 C6 F0            [ 8] 2652 	add	a, #0xf0
      0009D6 77               [ 8] 2653 	ld	(hl), a
      0009D7 F8 02            [12] 2654 	ldhl	sp,#2
      0009D9 2A               [ 8] 2655 	ld	a, (hl+)
      0009DA 5F               [ 4] 2656 	ld	e, a
      0009DB 56               [ 8] 2657 	ld	d, (hl)
      0009DC 1A               [ 8] 2658 	ld	a, (de)
      0009DD C6 10            [ 8] 2659 	add	a, #0x10
      0009DF 57               [ 4] 2660 	ld	d, a
      0009E0 C5               [16] 2661 	push	bc
      0009E1 C5               [16] 2662 	push	bc
      0009E2 F8 0B            [12] 2663 	ldhl	sp,	#11
      0009E4 3A               [ 8] 2664 	ld	a, (hl-)
      0009E5 F5               [16] 2665 	push	af
      0009E6 33               [ 8] 2666 	inc	sp
      0009E7 5E               [ 8] 2667 	ld	e, (hl)
      0009E8 7A               [ 4] 2668 	ld	a, d
      0009E9 CDrEEr03         [24] 2669 	call	_isValidMove
      0009EC 5F               [ 4] 2670 	ld	e, a
      0009ED C1               [12] 2671 	pop	bc
      0009EE CB 43            [ 8] 2672 	bit	0, e
      0009F0 20 4A            [12] 2673 	jr	NZ, 00101$
                           0009F2  2674 	C$main.c$322$3_0$230	= .
                                   2675 	.globl	C$main.c$322$3_0$230
                                   2676 ;main.c:322: isValidMove(pieces[i].x - SQUARE_SIZE, pieces[i].y + SQUARE_SIZE, currentPlayer, i) ||
      0009F2 F8 04            [12] 2677 	ldhl	sp,#4
      0009F4 2A               [ 8] 2678 	ld	a, (hl+)
      0009F5 5F               [ 4] 2679 	ld	e, a
      0009F6 2A               [ 8] 2680 	ld	a, (hl+)
      0009F7 57               [ 4] 2681 	ld	d, a
      0009F8 1A               [ 8] 2682 	ld	a, (de)
      0009F9 C6 10            [ 8] 2683 	add	a, #0x10
      0009FB 77               [ 8] 2684 	ld	(hl), a
      0009FC F8 02            [12] 2685 	ldhl	sp,#2
      0009FE 2A               [ 8] 2686 	ld	a, (hl+)
      0009FF 5F               [ 4] 2687 	ld	e, a
      000A00 56               [ 8] 2688 	ld	d, (hl)
      000A01 1A               [ 8] 2689 	ld	a, (de)
      000A02 C6 F0            [ 8] 2690 	add	a, #0xf0
      000A04 57               [ 4] 2691 	ld	d, a
      000A05 C5               [16] 2692 	push	bc
      000A06 C5               [16] 2693 	push	bc
      000A07 F8 0B            [12] 2694 	ldhl	sp,	#11
      000A09 3A               [ 8] 2695 	ld	a, (hl-)
      000A0A F5               [16] 2696 	push	af
      000A0B 33               [ 8] 2697 	inc	sp
      000A0C 5E               [ 8] 2698 	ld	e, (hl)
      000A0D 7A               [ 4] 2699 	ld	a, d
      000A0E CDrEEr03         [24] 2700 	call	_isValidMove
      000A11 5F               [ 4] 2701 	ld	e, a
      000A12 C1               [12] 2702 	pop	bc
      000A13 CB 43            [ 8] 2703 	bit	0, e
      000A15 20 25            [12] 2704 	jr	NZ, 00101$
                           000A17  2705 	C$main.c$323$3_0$230	= .
                                   2706 	.globl	C$main.c$323$3_0$230
                                   2707 ;main.c:323: isValidMove(pieces[i].x + SQUARE_SIZE, pieces[i].y + SQUARE_SIZE, currentPlayer, i)) {
      000A17 F8 04            [12] 2708 	ldhl	sp,#4
      000A19 2A               [ 8] 2709 	ld	a, (hl+)
      000A1A 5F               [ 4] 2710 	ld	e, a
      000A1B 2A               [ 8] 2711 	ld	a, (hl+)
      000A1C 57               [ 4] 2712 	ld	d, a
      000A1D 1A               [ 8] 2713 	ld	a, (de)
      000A1E C6 10            [ 8] 2714 	add	a, #0x10
      000A20 77               [ 8] 2715 	ld	(hl), a
      000A21 F8 02            [12] 2716 	ldhl	sp,#2
      000A23 2A               [ 8] 2717 	ld	a, (hl+)
      000A24 5F               [ 4] 2718 	ld	e, a
      000A25 56               [ 8] 2719 	ld	d, (hl)
      000A26 1A               [ 8] 2720 	ld	a, (de)
      000A27 C6 10            [ 8] 2721 	add	a, #0x10
      000A29 57               [ 4] 2722 	ld	d, a
      000A2A C5               [16] 2723 	push	bc
      000A2B C5               [16] 2724 	push	bc
      000A2C F8 0B            [12] 2725 	ldhl	sp,	#11
      000A2E 3A               [ 8] 2726 	ld	a, (hl-)
      000A2F F5               [16] 2727 	push	af
      000A30 33               [ 8] 2728 	inc	sp
      000A31 5E               [ 8] 2729 	ld	e, (hl)
      000A32 7A               [ 4] 2730 	ld	a, d
      000A33 CDrEEr03         [24] 2731 	call	_isValidMove
      000A36 5F               [ 4] 2732 	ld	e, a
      000A37 C1               [12] 2733 	pop	bc
      000A38 CB 43            [ 8] 2734 	bit	0, e
      000A3A 28 04            [12] 2735 	jr	Z, 00109$
      000A3C                       2736 00101$:
                           000A3C  2737 	C$main.c$324$4_0$231	= .
                                   2738 	.globl	C$main.c$324$4_0$231
                                   2739 ;main.c:324: return true; // Found at least one valid move
      000A3C 3E 01            [ 8] 2740 	ld	a, #0x01
      000A3E 18 05            [12] 2741 	jr	00110$
      000A40                       2742 00109$:
                           000A40  2743 	C$main.c$319$2_0$229	= .
                                   2744 	.globl	C$main.c$319$2_0$229
                                   2745 ;main.c:319: for (int i = 0; i < numPieces; i++) {
      000A40 03               [ 8] 2746 	inc	bc
      000A41 C3r70r09         [16] 2747 	jp	00108$
      000A44                       2748 00106$:
                           000A44  2749 	C$main.c$327$1_0$228	= .
                                   2750 	.globl	C$main.c$327$1_0$228
                                   2751 ;main.c:327: return false; // No valid moves found for any piece
      000A44 AF               [ 4] 2752 	xor	a, a
      000A45                       2753 00110$:
                           000A45  2754 	C$main.c$328$1_0$228	= .
                                   2755 	.globl	C$main.c$328$1_0$228
                                   2756 ;main.c:328: }
      000A45 E8 08            [16] 2757 	add	sp, #8
                           000A47  2758 	C$main.c$328$1_0$228	= .
                                   2759 	.globl	C$main.c$328$1_0$228
                           000A47  2760 	XG$hasValidNonCaptureMoves$0$0	= .
                                   2761 	.globl	XG$hasValidNonCaptureMoves$0$0
      000A47 C9               [16] 2762 	ret
                           000A48  2763 	G$hasValidMoves$0$0	= .
                                   2764 	.globl	G$hasValidMoves$0$0
                           000A48  2765 	C$main.c$329$1_0$233	= .
                                   2766 	.globl	C$main.c$329$1_0$233
                                   2767 ;main.c:329: bool hasValidMoves(UINT8 currentPlayer) {
                                   2768 ;	---------------------------------
                                   2769 ; Function hasValidMoves
                                   2770 ; ---------------------------------
      000A48                       2771 _hasValidMoves::
      000A48 47               [ 4] 2772 	ld	b, a
                           000A49  2773 	C$main.c$330$1_0$233	= .
                                   2774 	.globl	C$main.c$330$1_0$233
                                   2775 ;main.c:330: bool hasValidNonCapture = hasValidNonCaptureMoves(currentPlayer);
      000A49 C5               [16] 2776 	push	bc
      000A4A 78               [ 4] 2777 	ld	a, b
      000A4B CDr5Ar09         [24] 2778 	call	_hasValidNonCaptureMoves
      000A4E C1               [12] 2779 	pop	bc
      000A4F 4F               [ 4] 2780 	ld	c, a
                           000A50  2781 	C$main.c$331$1_0$233	= .
                                   2782 	.globl	C$main.c$331$1_0$233
                                   2783 ;main.c:331: bool hasValidCapture = hasValidCaptureMoves(currentPlayer);
      000A50 C5               [16] 2784 	push	bc
      000A51 78               [ 4] 2785 	ld	a, b
      000A52 CDrA2r06         [24] 2786 	call	_hasValidCaptureMoves
      000A55 C1               [12] 2787 	pop	bc
      000A56 47               [ 4] 2788 	ld	b, a
                           000A57  2789 	C$main.c$332$1_0$233	= .
                                   2790 	.globl	C$main.c$332$1_0$233
                                   2791 ;main.c:332: if (hasValidNonCapture || hasValidCapture) {
      000A57 CB 41            [ 8] 2792 	bit	0, c
      000A59 20 04            [12] 2793 	jr	NZ, 00101$
      000A5B CB 40            [ 8] 2794 	bit	0, b
      000A5D 28 03            [12] 2795 	jr	Z, 00102$
      000A5F                       2796 00101$:
                           000A5F  2797 	C$main.c$333$2_0$234	= .
                                   2798 	.globl	C$main.c$333$2_0$234
                                   2799 ;main.c:333: return true; // No valid moves
      000A5F 3E 01            [ 8] 2800 	ld	a, #0x01
      000A61 C9               [16] 2801 	ret
      000A62                       2802 00102$:
                           000A62  2803 	C$main.c$335$1_0$233	= .
                                   2804 	.globl	C$main.c$335$1_0$233
                                   2805 ;main.c:335: return false; // Has valid moves
      000A62 AF               [ 4] 2806 	xor	a, a
                           000A63  2807 	C$main.c$336$1_0$233	= .
                                   2808 	.globl	C$main.c$336$1_0$233
                                   2809 ;main.c:336: }
                           000A63  2810 	C$main.c$336$1_0$233	= .
                                   2811 	.globl	C$main.c$336$1_0$233
                           000A63  2812 	XG$hasValidMoves$0$0	= .
                                   2813 	.globl	XG$hasValidMoves$0$0
      000A63 C9               [16] 2814 	ret
                           000A64  2815 	G$printTurn$0$0	= .
                                   2816 	.globl	G$printTurn$0$0
                           000A64  2817 	C$main.c$337$1_0$235	= .
                                   2818 	.globl	C$main.c$337$1_0$235
                                   2819 ;main.c:337: void printTurn() {
                                   2820 ;	---------------------------------
                                   2821 ; Function printTurn
                                   2822 ; ---------------------------------
      000A64                       2823 _printTurn::
                           000A64  2824 	C$main.c$338$1_0$235	= .
                                   2825 	.globl	C$main.c$338$1_0$235
                                   2826 ;main.c:338: if (hasValidMoves(currentPlayer)){
      000A64 FAr07r00         [16] 2827 	ld	a, (#_currentPlayer)
      000A67 CDr48r0A         [24] 2828 	call	_hasValidMoves
      000A6A CB 47            [ 8] 2829 	bit	0,a
      000A6C 28 33            [12] 2830 	jr	Z, 00108$
                           000A6E  2831 	C$main.c$339$2_0$236	= .
                                   2832 	.globl	C$main.c$339$2_0$236
                                   2833 ;main.c:339: if (currentPlayer == BLACK_PLAYER){
      000A6E FAr07r00         [16] 2834 	ld	a, (#_currentPlayer)
      000A71 B7               [ 4] 2835 	or	a, a
      000A72 20 13            [12] 2836 	jr	NZ, 00102$
                           000A74  2837 	C$main.c$340$3_0$237	= .
                                   2838 	.globl	C$main.c$340$3_0$237
                                   2839 ;main.c:340: set_win_tiles(2, 0, 16, 1, currentPlayerBlackText);
      000A74 11r03r02         [12] 2840 	ld	de, #_currentPlayerBlackText
      000A77 D5               [16] 2841 	push	de
      000A78 21 10 01         [12] 2842 	ld	hl, #0x110
      000A7B E5               [16] 2843 	push	hl
      000A7C 21 02 00         [12] 2844 	ld	hl, #0x02
      000A7F E5               [16] 2845 	push	hl
      000A80 CDr00r00         [24] 2846 	call	_set_win_tiles
      000A83 E8 06            [16] 2847 	add	sp, #6
      000A85 18 11            [12] 2848 	jr	00103$
      000A87                       2849 00102$:
                           000A87  2850 	C$main.c$342$3_0$238	= .
                                   2851 	.globl	C$main.c$342$3_0$238
                                   2852 ;main.c:342: set_win_tiles(2, 0, 16, 1, currentPlayerWhiteText);
      000A87 11r13r02         [12] 2853 	ld	de, #_currentPlayerWhiteText
      000A8A D5               [16] 2854 	push	de
      000A8B 21 10 01         [12] 2855 	ld	hl, #0x110
      000A8E E5               [16] 2856 	push	hl
      000A8F 21 02 00         [12] 2857 	ld	hl, #0x02
      000A92 E5               [16] 2858 	push	hl
      000A93 CDr00r00         [24] 2859 	call	_set_win_tiles
      000A96 E8 06            [16] 2860 	add	sp, #6
      000A98                       2861 00103$:
                                   2862 ;c:/gbdk/include/gb/gb.h:1468: WX_REG=x, WY_REG=y;
      000A98 3E 07            [ 8] 2863 	ld	a, #0x07
      000A9A E0r00            [12] 2864 	ldh	(_WX_REG + 0), a
      000A9C 3E 88            [ 8] 2865 	ld	a, #0x88
      000A9E E0r00            [12] 2866 	ldh	(_WY_REG + 0), a
                           000AA0  2867 	C$main.c$344$1_0$235	= .
                                   2868 	.globl	C$main.c$344$1_0$235
                                   2869 ;main.c:344: move_win(7, 136);
      000AA0 C9               [16] 2870 	ret
      000AA1                       2871 00108$:
                           000AA1  2872 	C$main.c$346$2_0$239	= .
                                   2873 	.globl	C$main.c$346$2_0$239
                                   2874 ;main.c:346: set_win_tiles(2, 0, 16, 1, clearText);
      000AA1 11r23r02         [12] 2875 	ld	de, #_clearText
      000AA4 D5               [16] 2876 	push	de
      000AA5 21 10 01         [12] 2877 	ld	hl, #0x110
      000AA8 E5               [16] 2878 	push	hl
      000AA9 21 02 00         [12] 2879 	ld	hl, #0x02
      000AAC E5               [16] 2880 	push	hl
      000AAD CDr00r00         [24] 2881 	call	_set_win_tiles
      000AB0 E8 06            [16] 2882 	add	sp, #6
                           000AB2  2883 	C$main.c$347$2_0$239	= .
                                   2884 	.globl	C$main.c$347$2_0$239
                                   2885 ;main.c:347: if (currentPlayer == BLACK_PLAYER){
      000AB2 FAr07r00         [16] 2886 	ld	a, (#_currentPlayer)
      000AB5 B7               [ 4] 2887 	or	a, a
      000AB6 20 13            [12] 2888 	jr	NZ, 00105$
                           000AB8  2889 	C$main.c$348$3_0$240	= .
                                   2890 	.globl	C$main.c$348$3_0$240
                                   2891 ;main.c:348: set_win_tiles(2, 8, 16, 1, whiteWins);
      000AB8 11r33r02         [12] 2892 	ld	de, #_whiteWins
      000ABB D5               [16] 2893 	push	de
      000ABC 21 10 01         [12] 2894 	ld	hl, #0x110
      000ABF E5               [16] 2895 	push	hl
      000AC0 21 02 08         [12] 2896 	ld	hl, #0x802
      000AC3 E5               [16] 2897 	push	hl
      000AC4 CDr00r00         [24] 2898 	call	_set_win_tiles
      000AC7 E8 06            [16] 2899 	add	sp, #6
      000AC9 18 11            [12] 2900 	jr	00106$
      000ACB                       2901 00105$:
                           000ACB  2902 	C$main.c$350$3_0$241	= .
                                   2903 	.globl	C$main.c$350$3_0$241
                                   2904 ;main.c:350: set_win_tiles(2, 8, 16, 1, blackWins);
      000ACB 11r43r02         [12] 2905 	ld	de, #_blackWins
      000ACE D5               [16] 2906 	push	de
      000ACF 21 10 01         [12] 2907 	ld	hl, #0x110
      000AD2 E5               [16] 2908 	push	hl
      000AD3 21 02 08         [12] 2909 	ld	hl, #0x802
      000AD6 E5               [16] 2910 	push	hl
      000AD7 CDr00r00         [24] 2911 	call	_set_win_tiles
      000ADA E8 06            [16] 2912 	add	sp, #6
      000ADC                       2913 00106$:
                                   2914 ;c:/gbdk/include/gb/gb.h:1468: WX_REG=x, WY_REG=y;
      000ADC 3E 07            [ 8] 2915 	ld	a, #0x07
      000ADE E0r00            [12] 2916 	ldh	(_WX_REG + 0), a
      000AE0 3E 07            [ 8] 2917 	ld	a, #0x07
      000AE2 E0r00            [12] 2918 	ldh	(_WY_REG + 0), a
                           000AE4  2919 	C$main.c$352$1_0$235	= .
                                   2920 	.globl	C$main.c$352$1_0$235
                                   2921 ;main.c:352: move_win(7, 7);
                           000AE4  2922 	C$main.c$354$1_0$235	= .
                                   2923 	.globl	C$main.c$354$1_0$235
                                   2924 ;main.c:354: }
                           000AE4  2925 	C$main.c$354$1_0$235	= .
                                   2926 	.globl	C$main.c$354$1_0$235
                           000AE4  2927 	XG$printTurn$0$0	= .
                                   2928 	.globl	XG$printTurn$0$0
      000AE4 C9               [16] 2929 	ret
                           000AE5  2930 	G$main$0$0	= .
                                   2931 	.globl	G$main$0$0
                           000AE5  2932 	C$main.c$355$1_0$248	= .
                                   2933 	.globl	C$main.c$355$1_0$248
                                   2934 ;main.c:355: void main() {
                                   2935 ;	---------------------------------
                                   2936 ; Function main
                                   2937 ; ---------------------------------
      000AE5                       2938 _main::
      000AE5 E8 F0            [16] 2939 	add	sp, #-16
                           000AE7  2940 	C$main.c$356$1_0$248	= .
                                   2941 	.globl	C$main.c$356$1_0$248
                                   2942 ;main.c:356: font();
      000AE7 CDrEEr00         [24] 2943 	call	_font
                           000AEA  2944 	C$main.c$357$1_0$248	= .
                                   2945 	.globl	C$main.c$357$1_0$248
                                   2946 ;main.c:357: printTurn();
      000AEA CDr64r0A         [24] 2947 	call	_printTurn
                           000AED  2948 	C$main.c$358$1_0$248	= .
                                   2949 	.globl	C$main.c$358$1_0$248
                                   2950 ;main.c:358: printbkg();
      000AED CDrFFr00         [24] 2951 	call	_printbkg
                           000AF0  2952 	C$main.c$359$1_0$248	= .
                                   2953 	.globl	C$main.c$359$1_0$248
                                   2954 ;main.c:359: printSquare();
      000AF0 CDr37r01         [24] 2955 	call	_printSquare
                           000AF3  2956 	C$main.c$360$1_0$248	= .
                                   2957 	.globl	C$main.c$360$1_0$248
                                   2958 ;main.c:360: printBlack();
      000AF3 CDr85r01         [24] 2959 	call	_printBlack
                           000AF6  2960 	C$main.c$361$1_0$248	= .
                                   2961 	.globl	C$main.c$361$1_0$248
                                   2962 ;main.c:361: printWhite();
      000AF6 CDr7Ar02         [24] 2963 	call	_printWhite
                           000AF9  2964 	C$main.c$362$1_0$248	= .
                                   2965 	.globl	C$main.c$362$1_0$248
                                   2966 ;main.c:362: SHOW_BKG;  
      000AF9 F0r00            [12] 2967 	ldh	a, (_LCDC_REG + 0)
      000AFB F6 01            [ 8] 2968 	or	a, #0x01
      000AFD E0r00            [12] 2969 	ldh	(_LCDC_REG + 0), a
                           000AFF  2970 	C$main.c$363$1_0$248	= .
                                   2971 	.globl	C$main.c$363$1_0$248
                                   2972 ;main.c:363: SHOW_SPRITES;
      000AFF F0r00            [12] 2973 	ldh	a, (_LCDC_REG + 0)
      000B01 F6 02            [ 8] 2974 	or	a, #0x02
      000B03 E0r00            [12] 2975 	ldh	(_LCDC_REG + 0), a
                           000B05  2976 	C$main.c$364$1_0$248	= .
                                   2977 	.globl	C$main.c$364$1_0$248
                                   2978 ;main.c:364: SHOW_WIN;
      000B05 F0r00            [12] 2979 	ldh	a, (_LCDC_REG + 0)
      000B07 F6 20            [ 8] 2980 	or	a, #0x20
      000B09 E0r00            [12] 2981 	ldh	(_LCDC_REG + 0), a
                           000B0B  2982 	C$main.c$365$1_0$248	= .
                                   2983 	.globl	C$main.c$365$1_0$248
                                   2984 ;main.c:365: while(1) {
      000B0B                       2985 00153$:
                           000B0B  2986 	C$main.c$366$2_0$249	= .
                                   2987 	.globl	C$main.c$366$2_0$249
                                   2988 ;main.c:366: joypad_input = joypad();
      000B0B CDr00r00         [24] 2989 	call	_joypad
      000B0E 21r00r00         [12] 2990 	ld	hl, #_joypad_input
      000B11 77               [ 8] 2991 	ld	(hl), a
                           000B12  2992 	C$main.c$368$2_0$249	= .
                                   2993 	.globl	C$main.c$368$2_0$249
                                   2994 ;main.c:368: if (joypad_input != lastButtonState) {
      000B12 7E               [ 8] 2995 	ld	a, (hl)
      000B13 21r00r00         [12] 2996 	ld	hl, #_lastButtonState
      000B16 96               [ 8] 2997 	sub	a, (hl)
      000B17 28 0E            [12] 2998 	jr	Z, 00104$
                           000B19  2999 	C$main.c$369$3_0$250	= .
                                   3000 	.globl	C$main.c$369$3_0$250
                                   3001 ;main.c:369: debounceTimer = 0; // Reset the debounce timer
      000B19 AF               [ 4] 3002 	xor	a, a
      000B1A 21r01r00         [12] 3003 	ld	hl, #_debounceTimer
      000B1D 22               [ 8] 3004 	ld	(hl+), a
      000B1E 77               [ 8] 3005 	ld	(hl), a
                           000B1F  3006 	C$main.c$370$3_0$250	= .
                                   3007 	.globl	C$main.c$370$3_0$250
                                   3008 ;main.c:370: lastButtonState = joypad_input;
      000B1F FAr00r00         [16] 3009 	ld	a, (#_joypad_input)
      000B22 EAr00r00         [16] 3010 	ld	(#_lastButtonState),a
      000B25 18 16            [12] 3011 	jr	00105$
      000B27                       3012 00104$:
                           000B27  3013 	C$main.c$371$2_0$249	= .
                                   3014 	.globl	C$main.c$371$2_0$249
                                   3015 ;main.c:371: } else if (debounceTimer < DEBOUNCE_DELAY) {
      000B27 21r01r00         [12] 3016 	ld	hl, #_debounceTimer
      000B2A 2A               [ 8] 3017 	ld	a, (hl+)
      000B2B D6 06            [ 8] 3018 	sub	a, #0x06
      000B2D 7E               [ 8] 3019 	ld	a, (hl)
      000B2E DE 00            [ 8] 3020 	sbc	a, #0x00
      000B30 30 0B            [12] 3021 	jr	NC, 00105$
                           000B32  3022 	C$main.c$372$3_0$251	= .
                                   3023 	.globl	C$main.c$372$3_0$251
                                   3024 ;main.c:372: debounceTimer += 100; // Increment the debounce timer based on the loop delay (100ms in this code)
      000B32 2B               [ 8] 3025 	dec	hl
      000B33 7E               [ 8] 3026 	ld	a, (hl)
      000B34 C6 64            [ 8] 3027 	add	a, #0x64
      000B36 22               [ 8] 3028 	ld	(hl+), a
      000B37 7E               [ 8] 3029 	ld	a, (hl)
      000B38 CE 00            [ 8] 3030 	adc	a, #0x00
      000B3A 77               [ 8] 3031 	ld	(hl), a
                           000B3B  3032 	C$main.c$373$3_0$251	= .
                                   3033 	.globl	C$main.c$373$3_0$251
                                   3034 ;main.c:373: continue; // Skip processing input until the debounce delay is reached
      000B3B 18 CE            [12] 3035 	jr	00153$
      000B3D                       3036 00105$:
                           000B3D  3037 	C$main.c$375$2_0$249	= .
                                   3038 	.globl	C$main.c$375$2_0$249
                                   3039 ;main.c:375: dpad();
      000B3D CDrBAr00         [24] 3040 	call	_dpad
                           000B40  3041 	C$main.c$376$2_0$249	= .
                                   3042 	.globl	C$main.c$376$2_0$249
                                   3043 ;main.c:376: if (joypad_input & J_A) {
      000B40 FAr00r00         [16] 3044 	ld	a, (#_joypad_input)
      000B43 CB 67            [ 8] 3045 	bit	4, a
      000B45 CArDDr0B         [16] 3046 	jp	Z,00189$
                           000B48  3047 	C$main.c$377$3_0$252	= .
                                   3048 	.globl	C$main.c$377$3_0$252
                                   3049 ;main.c:377: if (pieceSelected == false) {
      000B48 21r0Ar00         [12] 3050 	ld	hl, #_pieceSelected
      000B4B CB 46            [12] 3051 	bit	0, (hl)
      000B4D C2rDDr0B         [16] 3052 	jp	NZ, 00189$
                           000B50  3053 	C$main.c$378$4_0$253	= .
                                   3054 	.globl	C$main.c$378$4_0$253
                                   3055 ;main.c:378: checkCollision(cursorx - 4, cursory - 4, currentPlayer);
      000B50 21r07r00         [12] 3056 	ld	hl, #_currentPlayer
      000B53 4E               [ 8] 3057 	ld	c, (hl)
      000B54 06 00            [ 8] 3058 	ld	b, #0x00
      000B56 FAr06r00         [16] 3059 	ld	a, (#_cursory)
      000B59 C6 FC            [ 8] 3060 	add	a, #0xfc
      000B5B 5F               [ 4] 3061 	ld	e, a
      000B5C FAr05r00         [16] 3062 	ld	a, (#_cursorx)
      000B5F C6 FC            [ 8] 3063 	add	a, #0xfc
      000B61 57               [ 4] 3064 	ld	d, a
      000B62 C5               [16] 3065 	push	bc
      000B63 7A               [ 4] 3066 	ld	a, d
      000B64 CDrD5r05         [24] 3067 	call	_checkCollision
                           000B67  3068 	C$main.c$380$1_0$248	= .
                                   3069 	.globl	C$main.c$380$1_0$248
                                   3070 ;main.c:380: if (selectedPieceIndex >= 4 && selectedPieceIndex < 16){
      000B67 21r03r00         [12] 3071 	ld	hl, #_selectedPieceIndex
      000B6A 2A               [ 8] 3072 	ld	a, (hl+)
      000B6B D6 10            [ 8] 3073 	sub	a, #0x10
      000B6D 7E               [ 8] 3074 	ld	a, (hl)
      000B6E DE 00            [ 8] 3075 	sbc	a, #0x00
      000B70 56               [ 8] 3076 	ld	d, (hl)
      000B71 3E 00            [ 8] 3077 	ld	a, #0x00
      000B73 CB 7F            [ 8] 3078 	bit	7,a
      000B75 28 07            [12] 3079 	jr	Z, 00301$
      000B77 CB 7A            [ 8] 3080 	bit	7, d
      000B79 20 08            [12] 3081 	jr	NZ, 00302$
      000B7B BF               [ 4] 3082 	cp	a, a
      000B7C 18 05            [12] 3083 	jr	00302$
      000B7E                       3084 00301$:
      000B7E CB 7A            [ 8] 3085 	bit	7, d
      000B80 28 01            [12] 3086 	jr	Z, 00302$
      000B82 37               [ 4] 3087 	scf
      000B83                       3088 00302$:
      000B83 3E 00            [ 8] 3089 	ld	a, #0x00
      000B85 17               [ 4] 3090 	rla
      000B86 4F               [ 4] 3091 	ld	c, a
                           000B87  3092 	C$main.c$379$4_0$253	= .
                                   3093 	.globl	C$main.c$379$4_0$253
                                   3094 ;main.c:379: if (currentPlayer == BLACK_PLAYER) {
      000B87 FAr07r00         [16] 3095 	ld	a, (#_currentPlayer)
      000B8A B7               [ 4] 3096 	or	a, a
      000B8B 20 29            [12] 3097 	jr	NZ, 00113$
                           000B8D  3098 	C$main.c$380$5_0$254	= .
                                   3099 	.globl	C$main.c$380$5_0$254
                                   3100 ;main.c:380: if (selectedPieceIndex >= 4 && selectedPieceIndex < 16){
      000B8D 21r03r00         [12] 3101 	ld	hl, #_selectedPieceIndex
      000B90 2A               [ 8] 3102 	ld	a, (hl+)
      000B91 D6 04            [ 8] 3103 	sub	a, #0x04
      000B93 7E               [ 8] 3104 	ld	a, (hl)
      000B94 DE 00            [ 8] 3105 	sbc	a, #0x00
      000B96 56               [ 8] 3106 	ld	d, (hl)
      000B97 3E 00            [ 8] 3107 	ld	a, #0x00
      000B99 CB 7F            [ 8] 3108 	bit	7,a
      000B9B 28 07            [12] 3109 	jr	Z, 00303$
      000B9D CB 7A            [ 8] 3110 	bit	7, d
      000B9F 20 08            [12] 3111 	jr	NZ, 00304$
      000BA1 BF               [ 4] 3112 	cp	a, a
      000BA2 18 05            [12] 3113 	jr	00304$
      000BA4                       3114 00303$:
      000BA4 CB 7A            [ 8] 3115 	bit	7, d
      000BA6 28 01            [12] 3116 	jr	Z, 00304$
      000BA8 37               [ 4] 3117 	scf
      000BA9                       3118 00304$:
      000BA9 38 32            [12] 3119 	jr	C, 00189$
      000BAB 79               [ 4] 3120 	ld	a, c
      000BAC B7               [ 4] 3121 	or	a, a
      000BAD 28 2E            [12] 3122 	jr	Z, 00189$
                           000BAF  3123 	C$main.c$381$6_0$255	= .
                                   3124 	.globl	C$main.c$381$6_0$255
                                   3125 ;main.c:381: pieceSelected = true;
      000BAF 21r0Ar00         [12] 3126 	ld	hl, #_pieceSelected
      000BB2 36 01            [12] 3127 	ld	(hl), #0x01
      000BB4 18 27            [12] 3128 	jr	00189$
      000BB6                       3129 00113$:
                           000BB6  3130 	C$main.c$383$4_0$253	= .
                                   3131 	.globl	C$main.c$383$4_0$253
                                   3132 ;main.c:383: } else if (selectedPieceIndex >= 16 && selectedPieceIndex < 28) {
      000BB6 CB 41            [ 8] 3133 	bit	0, c
      000BB8 20 23            [12] 3134 	jr	NZ, 00189$
      000BBA 21r03r00         [12] 3135 	ld	hl, #_selectedPieceIndex
      000BBD 2A               [ 8] 3136 	ld	a, (hl+)
      000BBE D6 1C            [ 8] 3137 	sub	a, #0x1c
      000BC0 7E               [ 8] 3138 	ld	a, (hl)
      000BC1 DE 00            [ 8] 3139 	sbc	a, #0x00
      000BC3 56               [ 8] 3140 	ld	d, (hl)
      000BC4 3E 00            [ 8] 3141 	ld	a, #0x00
      000BC6 CB 7F            [ 8] 3142 	bit	7,a
      000BC8 28 07            [12] 3143 	jr	Z, 00305$
      000BCA CB 7A            [ 8] 3144 	bit	7, d
      000BCC 20 08            [12] 3145 	jr	NZ, 00306$
      000BCE BF               [ 4] 3146 	cp	a, a
      000BCF 18 05            [12] 3147 	jr	00306$
      000BD1                       3148 00305$:
      000BD1 CB 7A            [ 8] 3149 	bit	7, d
      000BD3 28 01            [12] 3150 	jr	Z, 00306$
      000BD5 37               [ 4] 3151 	scf
      000BD6                       3152 00306$:
      000BD6 30 05            [12] 3153 	jr	NC, 00189$
                           000BD8  3154 	C$main.c$384$5_0$256	= .
                                   3155 	.globl	C$main.c$384$5_0$256
                                   3156 ;main.c:384: pieceSelected = true;
      000BD8 21r0Ar00         [12] 3157 	ld	hl, #_pieceSelected
      000BDB 36 01            [12] 3158 	ld	(hl), #0x01
                           000BDD  3159 	C$main.c$388$1_0$248	= .
                                   3160 	.globl	C$main.c$388$1_0$248
                                   3161 ;main.c:388: while (pieceSelected == true) {
      000BDD                       3162 00189$:
      000BDD                       3163 00149$:
      000BDD 21r0Ar00         [12] 3164 	ld	hl, #_pieceSelected
      000BE0 CB 46            [12] 3165 	bit	0, (hl)
      000BE2 CAr87r0F         [16] 3166 	jp	Z, 00151$
                           000BE5  3167 	C$main.c$389$3_0$257	= .
                                   3168 	.globl	C$main.c$389$3_0$257
                                   3169 ;main.c:389: delay(100);
      000BE5 11 64 00         [12] 3170 	ld	de, #0x0064
      000BE8 CDr00r00         [24] 3171 	call	_delay
                           000BEB  3172 	C$main.c$390$3_0$257	= .
                                   3173 	.globl	C$main.c$390$3_0$257
                                   3174 ;main.c:390: joypad_input = joypad(); // Update the input inside the loop
      000BEB CDr00r00         [24] 3175 	call	_joypad
      000BEE EAr00r00         [16] 3176 	ld	(#_joypad_input),a
                           000BF1  3177 	C$main.c$391$3_0$257	= .
                                   3178 	.globl	C$main.c$391$3_0$257
                                   3179 ;main.c:391: dpad();
      000BF1 CDrBAr00         [24] 3180 	call	_dpad
                                   3181 ;main.c:392: move_sprite(selectedPieceIndex, cursorx - 4, cursory - 4);
      000BF4 FAr06r00         [16] 3182 	ld	a, (#_cursory)
      000BF7 C6 FC            [ 8] 3183 	add	a, #0xfc
      000BF9 F8 0C            [12] 3184 	ldhl	sp,	#12
      000BFB 77               [ 8] 3185 	ld	(hl), a
      000BFC FAr05r00         [16] 3186 	ld	a, (#_cursorx)
      000BFF F8 0F            [12] 3187 	ldhl	sp,	#15
      000C01 77               [ 8] 3188 	ld	(hl), a
      000C02 3A               [ 8] 3189 	ld	a, (hl-)
      000C03 2B               [ 8] 3190 	dec	hl
      000C04 C6 FC            [ 8] 3191 	add	a, #0xfc
      000C06 77               [ 8] 3192 	ld	(hl), a
      000C07 FAr03r00         [16] 3193 	ld	a, (#_selectedPieceIndex)
      000C0A F8 0F            [12] 3194 	ldhl	sp,	#15
      000C0C 77               [ 8] 3195 	ld	(hl), a
                                   3196 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      000C0D 3A               [ 8] 3197 	ld	a, (hl-)
      000C0E 22               [ 8] 3198 	ld	(hl+), a
      000C0F AF               [ 4] 3199 	xor	a, a
      000C10 32               [ 8] 3200 	ld	(hl-), a
      000C11 7E               [ 8] 3201 	ld	a, (hl)
      000C12 F8 0A            [12] 3202 	ldhl	sp,	#10
      000C14 77               [ 8] 3203 	ld	(hl), a
      000C15 F8 0F            [12] 3204 	ldhl	sp,	#15
      000C17 7E               [ 8] 3205 	ld	a, (hl)
      000C18 F8 0B            [12] 3206 	ldhl	sp,	#11
      000C1A 77               [ 8] 3207 	ld	(hl), a
      000C1B 3E 02            [ 8] 3208 	ld	a, #0x02
      000C1D                       3209 00307$:
      000C1D F8 0A            [12] 3210 	ldhl	sp,	#10
      000C1F CB 26            [16] 3211 	sla	(hl)
      000C21 23               [ 8] 3212 	inc	hl
      000C22 CB 16            [16] 3213 	rl	(hl)
      000C24 3D               [ 4] 3214 	dec	a
      000C25 20 F6            [12] 3215 	jr	NZ, 00307$
      000C27 2B               [ 8] 3216 	dec	hl
      000C28 2A               [ 8] 3217 	ld	a, (hl+)
      000C29 5F               [ 4] 3218 	ld	e, a
      000C2A 56               [ 8] 3219 	ld	d, (hl)
      000C2B 21r00r00         [12] 3220 	ld	hl, #_shadow_OAM
      000C2E 19               [ 8] 3221 	add	hl, de
      000C2F E5               [16] 3222 	push	hl
      000C30 7D               [ 4] 3223 	ld	a, l
      000C31 F8 10            [12] 3224 	ldhl	sp,	#16
      000C33 77               [ 8] 3225 	ld	(hl), a
      000C34 E1               [12] 3226 	pop	hl
      000C35 7C               [ 4] 3227 	ld	a, h
      000C36 F8 0F            [12] 3228 	ldhl	sp,	#15
                                   3229 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      000C38 32               [ 8] 3230 	ld	(hl-), a
      000C39 2A               [ 8] 3231 	ld	a, (hl+)
      000C3A 5F               [ 4] 3232 	ld	e, a
      000C3B 56               [ 8] 3233 	ld	d, (hl)
      000C3C F8 0C            [12] 3234 	ldhl	sp,	#12
      000C3E 2A               [ 8] 3235 	ld	a, (hl+)
      000C3F 23               [ 8] 3236 	inc	hl
      000C40 12               [ 8] 3237 	ld	(de), a
      000C41 2A               [ 8] 3238 	ld	a, (hl+)
      000C42 4F               [ 4] 3239 	ld	c, a
      000C43 3A               [ 8] 3240 	ld	a, (hl-)
      000C44 2B               [ 8] 3241 	dec	hl
      000C45 47               [ 4] 3242 	ld	b, a
      000C46 03               [ 8] 3243 	inc	bc
      000C47 7E               [ 8] 3244 	ld	a, (hl)
      000C48 02               [ 8] 3245 	ld	(bc), a
                           000C49  3246 	C$main.c$393$3_0$257	= .
                                   3247 	.globl	C$main.c$393$3_0$257
                                   3248 ;main.c:393: if (joypad_input & J_A) {
      000C49 FAr00r00         [16] 3249 	ld	a, (#_joypad_input)
      000C4C CB 67            [ 8] 3250 	bit	4, a
      000C4E CAr74r0F         [16] 3251 	jp	Z,00146$
                           000C51  3252 	C$main.c$394$4_0$258	= .
                                   3253 	.globl	C$main.c$394$4_0$258
                                   3254 ;main.c:394: Piece* pieces = (currentPlayer == BLACK_PLAYER) ? blackPieces : whitePieces;
      000C51 FAr07r00         [16] 3255 	ld	a, (#_currentPlayer)
      000C54 B7               [ 4] 3256 	or	a, a
      000C55 20 09            [12] 3257 	jr	NZ, 00158$
      000C57 F8 0E            [12] 3258 	ldhl	sp,	#14
      000C59 36r73            [12] 3259 	ld	(hl), #<(_blackPieces)
      000C5B 23               [ 8] 3260 	inc	hl
      000C5C 36s02            [12] 3261 	ld	(hl), #>(_blackPieces)
      000C5E 18 07            [12] 3262 	jr	00159$
      000C60                       3263 00158$:
      000C60 F8 0E            [12] 3264 	ldhl	sp,	#14
      000C62 3Er97            [ 8] 3265 	ld	a, #<(_whitePieces)
      000C64 22               [ 8] 3266 	ld	(hl+), a
      000C65 36s02            [12] 3267 	ld	(hl), #>(_whitePieces)
      000C67                       3268 00159$:
      000C67 F8 0E            [12] 3269 	ldhl	sp,	#14
      000C69 7E               [ 8] 3270 	ld	a, (hl)
      000C6A F8 00            [12] 3271 	ldhl	sp,	#0
      000C6C 77               [ 8] 3272 	ld	(hl), a
      000C6D F8 0F            [12] 3273 	ldhl	sp,	#15
      000C6F 7E               [ 8] 3274 	ld	a, (hl)
      000C70 F8 01            [12] 3275 	ldhl	sp,	#1
      000C72 77               [ 8] 3276 	ld	(hl), a
                           000C73  3277 	C$main.c$395$4_0$258	= .
                                   3278 	.globl	C$main.c$395$4_0$258
                                   3279 ;main.c:395: Piece* opponentPieces = (currentPlayer == BLACK_PLAYER) ? whitePieces : blackPieces;
      000C73 FAr07r00         [16] 3280 	ld	a, (#_currentPlayer)
      000C76 B7               [ 4] 3281 	or	a, a
      000C77 20 09            [12] 3282 	jr	NZ, 00160$
      000C79 F8 0E            [12] 3283 	ldhl	sp,	#14
      000C7B 3Er97            [ 8] 3284 	ld	a, #<(_whitePieces)
      000C7D 22               [ 8] 3285 	ld	(hl+), a
      000C7E 36s02            [12] 3286 	ld	(hl), #>(_whitePieces)
      000C80 18 07            [12] 3287 	jr	00161$
      000C82                       3288 00160$:
      000C82 F8 0E            [12] 3289 	ldhl	sp,	#14
      000C84 36r73            [12] 3290 	ld	(hl), #<(_blackPieces)
      000C86 23               [ 8] 3291 	inc	hl
      000C87 36s02            [12] 3292 	ld	(hl), #>(_blackPieces)
      000C89                       3293 00161$:
      000C89 F8 0E            [12] 3294 	ldhl	sp,	#14
      000C8B 7E               [ 8] 3295 	ld	a, (hl)
      000C8C F8 02            [12] 3296 	ldhl	sp,	#2
      000C8E 77               [ 8] 3297 	ld	(hl), a
      000C8F F8 0F            [12] 3298 	ldhl	sp,	#15
      000C91 7E               [ 8] 3299 	ld	a, (hl)
      000C92 F8 03            [12] 3300 	ldhl	sp,	#3
      000C94 77               [ 8] 3301 	ld	(hl), a
                           000C95  3302 	C$main.c$399$4_0$258	= .
                                   3303 	.globl	C$main.c$399$4_0$258
                                   3304 ;main.c:399: int dx = (cursorx - 4) - pieces[selectedCoords].x;
      000C95 FAr05r00         [16] 3305 	ld	a, (#_cursorx)
      000C98 F8 0E            [12] 3306 	ldhl	sp,	#14
      000C9A 22               [ 8] 3307 	ld	(hl+), a
      000C9B AF               [ 4] 3308 	xor	a, a
      000C9C 32               [ 8] 3309 	ld	(hl-), a
      000C9D 2A               [ 8] 3310 	ld	a, (hl+)
      000C9E 5F               [ 4] 3311 	ld	e, a
      000C9F 56               [ 8] 3312 	ld	d, (hl)
      000CA0 21 04 00         [12] 3313 	ld	hl, #0x0004
      000CA3 7B               [ 4] 3314 	ld	a, e
      000CA4 95               [ 4] 3315 	sub	a, l
      000CA5 5F               [ 4] 3316 	ld	e, a
      000CA6 7A               [ 4] 3317 	ld	a, d
      000CA7 9C               [ 4] 3318 	sbc	a, h
      000CA8 F8 05            [12] 3319 	ldhl	sp,	#5
      000CAA 32               [ 8] 3320 	ld	(hl-), a
      000CAB 73               [ 8] 3321 	ld	(hl), e
      000CAC 21r08r00         [12] 3322 	ld	hl, #_selectedCoords
      000CAF 2A               [ 8] 3323 	ld	a, (hl+)
      000CB0 4F               [ 4] 3324 	ld	c, a
      000CB1 46               [ 8] 3325 	ld	b, (hl)
      000CB2 69               [ 4] 3326 	ld	l, c
      000CB3 60               [ 4] 3327 	ld	h, b
      000CB4 29               [ 8] 3328 	add	hl, hl
      000CB5 09               [ 8] 3329 	add	hl, bc
      000CB6 E5               [16] 3330 	push	hl
      000CB7 7D               [ 4] 3331 	ld	a, l
      000CB8 F8 10            [12] 3332 	ldhl	sp,	#16
      000CBA 77               [ 8] 3333 	ld	(hl), a
      000CBB E1               [12] 3334 	pop	hl
      000CBC 7C               [ 4] 3335 	ld	a, h
      000CBD F8 0F            [12] 3336 	ldhl	sp,	#15
      000CBF 77               [ 8] 3337 	ld	(hl), a
      000CC0 D1               [12] 3338 	pop	de
      000CC1 D5               [16] 3339 	push	de
      000CC2 3A               [ 8] 3340 	ld	a, (hl-)
      000CC3 6E               [ 8] 3341 	ld	l, (hl)
      000CC4 67               [ 4] 3342 	ld	h, a
      000CC5 19               [ 8] 3343 	add	hl, de
      000CC6 E5               [16] 3344 	push	hl
      000CC7 7D               [ 4] 3345 	ld	a, l
      000CC8 F8 0E            [12] 3346 	ldhl	sp,	#14
      000CCA 77               [ 8] 3347 	ld	(hl), a
      000CCB E1               [12] 3348 	pop	hl
      000CCC 7C               [ 4] 3349 	ld	a, h
      000CCD F8 0D            [12] 3350 	ldhl	sp,	#13
      000CCF 32               [ 8] 3351 	ld	(hl-), a
      000CD0 2A               [ 8] 3352 	ld	a, (hl+)
      000CD1 5F               [ 4] 3353 	ld	e, a
      000CD2 2A               [ 8] 3354 	ld	a, (hl+)
      000CD3 23               [ 8] 3355 	inc	hl
      000CD4 57               [ 4] 3356 	ld	d, a
      000CD5 1A               [ 8] 3357 	ld	a, (de)
      000CD6 77               [ 8] 3358 	ld	(hl), a
      000CD7 7E               [ 8] 3359 	ld	a, (hl)
      000CD8 F8 06            [12] 3360 	ldhl	sp,	#6
      000CDA 22               [ 8] 3361 	ld	(hl+), a
      000CDB AF               [ 4] 3362 	xor	a, a
      000CDC 32               [ 8] 3363 	ld	(hl-), a
      000CDD 2B               [ 8] 3364 	dec	hl
      000CDE 2B               [ 8] 3365 	dec	hl
      000CDF 2A               [ 8] 3366 	ld	a, (hl+)
      000CE0 5F               [ 4] 3367 	ld	e, a
      000CE1 2A               [ 8] 3368 	ld	a, (hl+)
      000CE2 57               [ 4] 3369 	ld	d, a
      000CE3 2A               [ 8] 3370 	ld	a,	(hl+)
      000CE4 66               [ 8] 3371 	ld	h, (hl)
      000CE5 6F               [ 4] 3372 	ld	l, a
      000CE6 7B               [ 4] 3373 	ld	a, e
      000CE7 95               [ 4] 3374 	sub	a, l
      000CE8 5F               [ 4] 3375 	ld	e, a
      000CE9 7A               [ 4] 3376 	ld	a, d
      000CEA 9C               [ 4] 3377 	sbc	a, h
      000CEB F8 0F            [12] 3378 	ldhl	sp,	#15
      000CED 32               [ 8] 3379 	ld	(hl-), a
      000CEE 73               [ 8] 3380 	ld	(hl), e
      000CEF 7E               [ 8] 3381 	ld	a, (hl)
      000CF0 F8 08            [12] 3382 	ldhl	sp,	#8
      000CF2 77               [ 8] 3383 	ld	(hl), a
      000CF3 F8 0F            [12] 3384 	ldhl	sp,	#15
      000CF5 7E               [ 8] 3385 	ld	a, (hl)
      000CF6 F8 09            [12] 3386 	ldhl	sp,	#9
      000CF8 77               [ 8] 3387 	ld	(hl), a
                           000CF9  3388 	C$main.c$400$4_0$258	= .
                                   3389 	.globl	C$main.c$400$4_0$258
                                   3390 ;main.c:400: int dy = (cursory - 4) - pieces[selectedCoords].y;
      000CF9 FAr06r00         [16] 3391 	ld	a, (#_cursory)
      000CFC F8 0E            [12] 3392 	ldhl	sp,	#14
      000CFE 22               [ 8] 3393 	ld	(hl+), a
      000CFF AF               [ 4] 3394 	xor	a, a
      000D00 32               [ 8] 3395 	ld	(hl-), a
      000D01 2A               [ 8] 3396 	ld	a, (hl+)
      000D02 5F               [ 4] 3397 	ld	e, a
      000D03 56               [ 8] 3398 	ld	d, (hl)
      000D04 21 04 00         [12] 3399 	ld	hl, #0x0004
      000D07 7B               [ 4] 3400 	ld	a, e
      000D08 95               [ 4] 3401 	sub	a, l
      000D09 5F               [ 4] 3402 	ld	e, a
      000D0A 7A               [ 4] 3403 	ld	a, d
      000D0B 9C               [ 4] 3404 	sbc	a, h
      000D0C F8 0B            [12] 3405 	ldhl	sp,	#11
      000D0E 32               [ 8] 3406 	ld	(hl-), a
      000D0F 73               [ 8] 3407 	ld	(hl), e
      000D10 F8 0C            [12] 3408 	ldhl	sp,#12
      000D12 2A               [ 8] 3409 	ld	a, (hl+)
      000D13 5F               [ 4] 3410 	ld	e, a
      000D14 56               [ 8] 3411 	ld	d, (hl)
      000D15 6B               [ 4] 3412 	ld	l, e
      000D16 62               [ 4] 3413 	ld	h, d
      000D17 23               [ 8] 3414 	inc	hl
      000D18 E5               [16] 3415 	push	hl
      000D19 7D               [ 4] 3416 	ld	a, l
      000D1A F8 10            [12] 3417 	ldhl	sp,	#16
      000D1C 77               [ 8] 3418 	ld	(hl), a
      000D1D E1               [12] 3419 	pop	hl
      000D1E 7C               [ 4] 3420 	ld	a, h
      000D1F F8 0F            [12] 3421 	ldhl	sp,	#15
      000D21 32               [ 8] 3422 	ld	(hl-), a
      000D22 2A               [ 8] 3423 	ld	a, (hl+)
      000D23 5F               [ 4] 3424 	ld	e, a
      000D24 56               [ 8] 3425 	ld	d, (hl)
      000D25 1A               [ 8] 3426 	ld	a, (de)
      000D26 77               [ 8] 3427 	ld	(hl), a
      000D27 7E               [ 8] 3428 	ld	a, (hl)
      000D28 F8 0C            [12] 3429 	ldhl	sp,	#12
      000D2A 22               [ 8] 3430 	ld	(hl+), a
      000D2B AF               [ 4] 3431 	xor	a, a
      000D2C 32               [ 8] 3432 	ld	(hl-), a
      000D2D 2B               [ 8] 3433 	dec	hl
      000D2E 2B               [ 8] 3434 	dec	hl
      000D2F 2A               [ 8] 3435 	ld	a, (hl+)
      000D30 5F               [ 4] 3436 	ld	e, a
      000D31 2A               [ 8] 3437 	ld	a, (hl+)
      000D32 57               [ 4] 3438 	ld	d, a
      000D33 2A               [ 8] 3439 	ld	a,	(hl+)
      000D34 66               [ 8] 3440 	ld	h, (hl)
      000D35 6F               [ 4] 3441 	ld	l, a
      000D36 7B               [ 4] 3442 	ld	a, e
      000D37 95               [ 4] 3443 	sub	a, l
      000D38 5F               [ 4] 3444 	ld	e, a
      000D39 7A               [ 4] 3445 	ld	a, d
      000D3A 9C               [ 4] 3446 	sbc	a, h
      000D3B F8 0F            [12] 3447 	ldhl	sp,	#15
      000D3D 32               [ 8] 3448 	ld	(hl-), a
      000D3E 73               [ 8] 3449 	ld	(hl), e
                           000D3F  3450 	C$main.c$401$4_0$258	= .
                                   3451 	.globl	C$main.c$401$4_0$258
                                   3452 ;main.c:401: if (cursorx - 4 == pieces[selectedCoords].x && cursory - 4 == pieces[selectedCoords].y) {
      000D3F F8 04            [12] 3453 	ldhl	sp,	#4
      000D41 2A               [ 8] 3454 	ld	a, (hl+)
      000D42 23               [ 8] 3455 	inc	hl
      000D43 96               [ 8] 3456 	sub	a, (hl)
      000D44 20 14            [12] 3457 	jr	NZ, 00142$
      000D46 2B               [ 8] 3458 	dec	hl
      000D47 2A               [ 8] 3459 	ld	a, (hl+)
      000D48 23               [ 8] 3460 	inc	hl
      000D49 96               [ 8] 3461 	sub	a, (hl)
      000D4A 20 0E            [12] 3462 	jr	NZ, 00142$
      000D4C F8 0A            [12] 3463 	ldhl	sp,	#10
      000D4E 2A               [ 8] 3464 	ld	a, (hl+)
      000D4F 23               [ 8] 3465 	inc	hl
      000D50 96               [ 8] 3466 	sub	a, (hl)
      000D51 20 07            [12] 3467 	jr	NZ, 00311$
      000D53 2B               [ 8] 3468 	dec	hl
      000D54 2A               [ 8] 3469 	ld	a, (hl+)
      000D55 23               [ 8] 3470 	inc	hl
      000D56 96               [ 8] 3471 	sub	a, (hl)
      000D57 CAr74r0F         [16] 3472 	jp	Z,00146$
      000D5A                       3473 00311$:
      000D5A                       3474 00142$:
                           000D5A  3475 	C$main.c$403$4_0$258	= .
                                   3476 	.globl	C$main.c$403$4_0$258
                                   3477 ;main.c:403: } else if (isValidMove(cursorx - 4, cursory - 4, currentPlayer, selectedCoords)) {
      000D5A FAr06r00         [16] 3478 	ld	a, (#_cursory)
      000D5D C6 FC            [ 8] 3479 	add	a, #0xfc
      000D5F 5F               [ 4] 3480 	ld	e, a
      000D60 FAr05r00         [16] 3481 	ld	a, (#_cursorx)
      000D63 C6 FC            [ 8] 3482 	add	a, #0xfc
      000D65 4F               [ 4] 3483 	ld	c, a
      000D66 21r08r00         [12] 3484 	ld	hl, #_selectedCoords
      000D69 6E               [ 8] 3485 	ld	l, (hl)
                                   3486 ;	spillPairReg hl
                                   3487 ;	spillPairReg hl
      000D6A FAr09r00         [16] 3488 	ld	a, (_selectedCoords + 1)
      000D6D 67               [ 4] 3489 	ld	h, a
                                   3490 ;	spillPairReg hl
                                   3491 ;	spillPairReg hl
      000D6E E5               [16] 3492 	push	hl
      000D6F FAr07r00         [16] 3493 	ld	a, (#_currentPlayer)
      000D72 F5               [16] 3494 	push	af
      000D73 33               [ 8] 3495 	inc	sp
      000D74 79               [ 4] 3496 	ld	a, c
      000D75 CDrEEr03         [24] 3497 	call	_isValidMove
      000D78 CB 47            [ 8] 3498 	bit	0,a
      000D7A CAr74r0F         [16] 3499 	jp	Z, 00146$
                           000D7D  3500 	C$main.c$404$5_0$260	= .
                                   3501 	.globl	C$main.c$404$5_0$260
                                   3502 ;main.c:404: if (hasValidCaptureMoves(currentPlayer)) {
      000D7D FAr07r00         [16] 3503 	ld	a, (#_currentPlayer)
      000D80 CDrA2r06         [24] 3504 	call	_hasValidCaptureMoves
      000D83 CB 47            [ 8] 3505 	bit	0,a
      000D85 CArAFr0E         [16] 3506 	jp	Z, 00137$
                           000D88  3507 	C$main.c$405$6_0$261	= .
                                   3508 	.globl	C$main.c$405$6_0$261
                                   3509 ;main.c:405: if (abs(dx) == 2 * SQUARE_SIZE || abs(dy) == 2 * SQUARE_SIZE) {
      000D88 F8 08            [12] 3510 	ldhl	sp,	#8
      000D8A 2A               [ 8] 3511 	ld	a, (hl+)
      000D8B 5F               [ 4] 3512 	ld	e, a
      000D8C 56               [ 8] 3513 	ld	d, (hl)
      000D8D D5               [16] 3514 	push	de
      000D8E CDr00r00         [24] 3515 	call	_abs
      000D91 E1               [12] 3516 	pop	hl
      000D92 7B               [ 4] 3517 	ld	a, e
      000D93 D6 20            [ 8] 3518 	sub	a, #0x20
      000D95 B2               [ 4] 3519 	or	a, d
      000D96 28 11            [12] 3520 	jr	Z, 00127$
      000D98 F8 0E            [12] 3521 	ldhl	sp,	#14
      000D9A 2A               [ 8] 3522 	ld	a, (hl+)
      000D9B 5F               [ 4] 3523 	ld	e, a
      000D9C 56               [ 8] 3524 	ld	d, (hl)
      000D9D D5               [16] 3525 	push	de
      000D9E CDr00r00         [24] 3526 	call	_abs
      000DA1 E1               [12] 3527 	pop	hl
      000DA2 7B               [ 4] 3528 	ld	a, e
      000DA3 D6 20            [ 8] 3529 	sub	a, #0x20
      000DA5 B2               [ 4] 3530 	or	a, d
      000DA6 C2r74r0F         [16] 3531 	jp	NZ,00146$
      000DA9                       3532 00127$:
                           000DA9  3533 	C$main.c$406$7_0$262	= .
                                   3534 	.globl	C$main.c$406$7_0$262
                                   3535 ;main.c:406: int capturedIndex = getCaptureIndex(((cursorx - 4) - (dx/2)), ((cursory - 4) - (dy/2)), opponentPieces, numOpponentPieces);
      000DA9 FAr06r00         [16] 3536 	ld	a, (#_cursory)
      000DAC C6 FC            [ 8] 3537 	add	a, #0xfc
      000DAE F8 0D            [12] 3538 	ldhl	sp,	#13
      000DB0 22               [ 8] 3539 	ld	(hl+), a
      000DB1 7E               [ 8] 3540 	ld	a, (hl)
      000DB2 F8 0B            [12] 3541 	ldhl	sp,	#11
      000DB4 77               [ 8] 3542 	ld	(hl), a
      000DB5 F8 0F            [12] 3543 	ldhl	sp,	#15
      000DB7 7E               [ 8] 3544 	ld	a, (hl)
      000DB8 F8 0C            [12] 3545 	ldhl	sp,	#12
      000DBA 77               [ 8] 3546 	ld	(hl), a
      000DBB F8 0F            [12] 3547 	ldhl	sp,	#15
      000DBD CB 7E            [12] 3548 	bit	7, (hl)
      000DBF 28 11            [12] 3549 	jr	Z, 00162$
      000DC1 2B               [ 8] 3550 	dec	hl
      000DC2 2A               [ 8] 3551 	ld	a, (hl+)
      000DC3 5F               [ 4] 3552 	ld	e, a
      000DC4 56               [ 8] 3553 	ld	d, (hl)
      000DC5 6B               [ 4] 3554 	ld	l, e
      000DC6 62               [ 4] 3555 	ld	h, d
      000DC7 23               [ 8] 3556 	inc	hl
      000DC8 E5               [16] 3557 	push	hl
      000DC9 7D               [ 4] 3558 	ld	a, l
      000DCA F8 0D            [12] 3559 	ldhl	sp,	#13
      000DCC 77               [ 8] 3560 	ld	(hl), a
      000DCD E1               [12] 3561 	pop	hl
      000DCE 7C               [ 4] 3562 	ld	a, h
      000DCF F8 0C            [12] 3563 	ldhl	sp,	#12
      000DD1 77               [ 8] 3564 	ld	(hl), a
      000DD2                       3565 00162$:
      000DD2 F8 0B            [12] 3566 	ldhl	sp,#11
      000DD4 2A               [ 8] 3567 	ld	a, (hl+)
      000DD5 4F               [ 4] 3568 	ld	c, a
      000DD6 2A               [ 8] 3569 	ld	a, (hl+)
      000DD7 47               [ 4] 3570 	ld	b, a
      000DD8 CB 28            [ 8] 3571 	sra	b
      000DDA CB 19            [ 8] 3572 	rr	c
      000DDC 3A               [ 8] 3573 	ld	a, (hl-)
      000DDD 91               [ 4] 3574 	sub	a, c
      000DDE 77               [ 8] 3575 	ld	(hl), a
      000DDF FAr05r00         [16] 3576 	ld	a, (#_cursorx)
      000DE2 C6 FC            [ 8] 3577 	add	a, #0xfc
      000DE4 F8 0D            [12] 3578 	ldhl	sp,	#13
      000DE6 77               [ 8] 3579 	ld	(hl), a
      000DE7 F8 08            [12] 3580 	ldhl	sp,	#8
      000DE9 7E               [ 8] 3581 	ld	a, (hl)
      000DEA F8 0E            [12] 3582 	ldhl	sp,	#14
      000DEC 77               [ 8] 3583 	ld	(hl), a
      000DED F8 09            [12] 3584 	ldhl	sp,	#9
      000DEF 7E               [ 8] 3585 	ld	a, (hl)
      000DF0 F8 0F            [12] 3586 	ldhl	sp,	#15
      000DF2 77               [ 8] 3587 	ld	(hl), a
      000DF3 F8 09            [12] 3588 	ldhl	sp,	#9
      000DF5 CB 7E            [12] 3589 	bit	7, (hl)
      000DF7 28 11            [12] 3590 	jr	Z, 00163$
      000DF9 2B               [ 8] 3591 	dec	hl
      000DFA 2A               [ 8] 3592 	ld	a, (hl+)
      000DFB 5F               [ 4] 3593 	ld	e, a
      000DFC 56               [ 8] 3594 	ld	d, (hl)
      000DFD 6B               [ 4] 3595 	ld	l, e
      000DFE 62               [ 4] 3596 	ld	h, d
      000DFF 23               [ 8] 3597 	inc	hl
      000E00 E5               [16] 3598 	push	hl
      000E01 7D               [ 4] 3599 	ld	a, l
      000E02 F8 10            [12] 3600 	ldhl	sp,	#16
      000E04 77               [ 8] 3601 	ld	(hl), a
      000E05 E1               [12] 3602 	pop	hl
      000E06 7C               [ 4] 3603 	ld	a, h
      000E07 F8 0F            [12] 3604 	ldhl	sp,	#15
      000E09 77               [ 8] 3605 	ld	(hl), a
      000E0A                       3606 00163$:
      000E0A F8 0F            [12] 3607 	ldhl	sp,	#15
      000E0C CB 2E            [16] 3608 	sra	(hl)
      000E0E 2B               [ 8] 3609 	dec	hl
      000E0F CB 1E            [16] 3610 	rr	(hl)
      000E11 2A               [ 8] 3611 	ld	a, (hl+)
      000E12 32               [ 8] 3612 	ld	(hl-), a
      000E13 2B               [ 8] 3613 	dec	hl
      000E14 2A               [ 8] 3614 	ld	a, (hl+)
      000E15 23               [ 8] 3615 	inc	hl
      000E16 96               [ 8] 3616 	sub	a, (hl)
      000E17 77               [ 8] 3617 	ld	(hl), a
      000E18 11 0C 00         [12] 3618 	ld	de, #0x000c
      000E1B D5               [16] 3619 	push	de
      000E1C F8 04            [12] 3620 	ldhl	sp,	#4
      000E1E 2A               [ 8] 3621 	ld	a, (hl+)
      000E1F 5F               [ 4] 3622 	ld	e, a
      000E20 56               [ 8] 3623 	ld	d, (hl)
      000E21 D5               [16] 3624 	push	de
      000E22 F8 10            [12] 3625 	ldhl	sp,	#16
      000E24 5E               [ 8] 3626 	ld	e, (hl)
      000E25 F8 13            [12] 3627 	ldhl	sp,	#19
      000E27 7E               [ 8] 3628 	ld	a, (hl)
      000E28 CDr88r03         [24] 3629 	call	_getCaptureIndex
                           000E2B  3630 	C$main.c$407$7_0$262	= .
                                   3631 	.globl	C$main.c$407$7_0$262
                                   3632 ;main.c:407: if (capturedIndex != -1) {
      000E2B 79               [ 4] 3633 	ld	a, c
      000E2C A0               [ 4] 3634 	and	a, b
      000E2D 3C               [ 4] 3635 	inc	a
      000E2E CAr74r0F         [16] 3636 	jp	Z,00146$
                           000E31  3637 	C$main.c$408$8_0$263	= .
                                   3638 	.globl	C$main.c$408$8_0$263
                                   3639 ;main.c:408: opponentPieces[capturedIndex].x = 0;
      000E31 69               [ 4] 3640 	ld	l, c
      000E32 60               [ 4] 3641 	ld	h, b
      000E33 29               [ 8] 3642 	add	hl, hl
      000E34 09               [ 8] 3643 	add	hl, bc
      000E35 4D               [ 4] 3644 	ld	c, l
      000E36 44               [ 4] 3645 	ld	b, h
      000E37 F8 02            [12] 3646 	ldhl	sp,	#2
      000E39 2A               [ 8] 3647 	ld	a,	(hl+)
      000E3A 66               [ 8] 3648 	ld	h, (hl)
      000E3B 6F               [ 4] 3649 	ld	l, a
      000E3C 09               [ 8] 3650 	add	hl, bc
      000E3D 4D               [ 4] 3651 	ld	c, l
      000E3E 44               [ 4] 3652 	ld	b, h
      000E3F AF               [ 4] 3653 	xor	a, a
      000E40 02               [ 8] 3654 	ld	(bc), a
                           000E41  3655 	C$main.c$409$8_0$263	= .
                                   3656 	.globl	C$main.c$409$8_0$263
                                   3657 ;main.c:409: opponentPieces[capturedIndex].y = 0;
      000E41 03               [ 8] 3658 	inc	bc
      000E42 AF               [ 4] 3659 	xor	a, a
      000E43 02               [ 8] 3660 	ld	(bc), a
                           000E44  3661 	C$main.c$410$8_0$263	= .
                                   3662 	.globl	C$main.c$410$8_0$263
                                   3663 ;main.c:410: pieces[selectedCoords].x = cursorx - 4; 
      000E44 21r08r00         [12] 3664 	ld	hl, #_selectedCoords
      000E47 2A               [ 8] 3665 	ld	a, (hl+)
      000E48 4F               [ 4] 3666 	ld	c, a
      000E49 46               [ 8] 3667 	ld	b, (hl)
      000E4A 69               [ 4] 3668 	ld	l, c
      000E4B 60               [ 4] 3669 	ld	h, b
      000E4C 29               [ 8] 3670 	add	hl, hl
      000E4D 09               [ 8] 3671 	add	hl, bc
      000E4E 4D               [ 4] 3672 	ld	c, l
      000E4F 44               [ 4] 3673 	ld	b, h
      000E50 E1               [12] 3674 	pop	hl
      000E51 E5               [16] 3675 	push	hl
      000E52 09               [ 8] 3676 	add	hl, bc
      000E53 4D               [ 4] 3677 	ld	c, l
      000E54 44               [ 4] 3678 	ld	b, h
      000E55 FAr05r00         [16] 3679 	ld	a, (#_cursorx)
      000E58 C6 FC            [ 8] 3680 	add	a, #0xfc
      000E5A 02               [ 8] 3681 	ld	(bc), a
                           000E5B  3682 	C$main.c$411$8_0$263	= .
                                   3683 	.globl	C$main.c$411$8_0$263
                                   3684 ;main.c:411: pieces[selectedCoords].y = cursory - 4;
      000E5B 21r08r00         [12] 3685 	ld	hl, #_selectedCoords
      000E5E 2A               [ 8] 3686 	ld	a, (hl+)
      000E5F 4F               [ 4] 3687 	ld	c, a
      000E60 46               [ 8] 3688 	ld	b, (hl)
      000E61 69               [ 4] 3689 	ld	l, c
      000E62 60               [ 4] 3690 	ld	h, b
      000E63 29               [ 8] 3691 	add	hl, hl
      000E64 09               [ 8] 3692 	add	hl, bc
      000E65 4D               [ 4] 3693 	ld	c, l
      000E66 44               [ 4] 3694 	ld	b, h
      000E67 E1               [12] 3695 	pop	hl
      000E68 E5               [16] 3696 	push	hl
      000E69 09               [ 8] 3697 	add	hl, bc
      000E6A 23               [ 8] 3698 	inc	hl
      000E6B 4D               [ 4] 3699 	ld	c, l
      000E6C 44               [ 4] 3700 	ld	b, h
      000E6D FAr06r00         [16] 3701 	ld	a, (#_cursory)
      000E70 C6 FC            [ 8] 3702 	add	a, #0xfc
      000E72 02               [ 8] 3703 	ld	(bc), a
                           000E73  3704 	C$main.c$412$8_0$263	= .
                                   3705 	.globl	C$main.c$412$8_0$263
                                   3706 ;main.c:412: promoteToKing(pieces, numPieces, currentPlayer);
      000E73 FAr07r00         [16] 3707 	ld	a, (#_currentPlayer)
      000E76 F5               [16] 3708 	push	af
      000E77 33               [ 8] 3709 	inc	sp
      000E78 01 0C 00         [12] 3710 	ld	bc, #0x000c
      000E7B F8 01            [12] 3711 	ldhl	sp,	#1
      000E7D 2A               [ 8] 3712 	ld	a, (hl+)
      000E7E 5F               [ 4] 3713 	ld	e, a
      000E7F 56               [ 8] 3714 	ld	d, (hl)
      000E80 CDr41r00         [24] 3715 	call	_promoteToKing
                           000E83  3716 	C$main.c$413$8_0$263	= .
                                   3717 	.globl	C$main.c$413$8_0$263
                                   3718 ;main.c:413: printBlack();
      000E83 CDr85r01         [24] 3719 	call	_printBlack
                           000E86  3720 	C$main.c$414$8_0$263	= .
                                   3721 	.globl	C$main.c$414$8_0$263
                                   3722 ;main.c:414: printWhite();
      000E86 CDr7Ar02         [24] 3723 	call	_printWhite
                           000E89  3724 	C$main.c$415$8_0$263	= .
                                   3725 	.globl	C$main.c$415$8_0$263
                                   3726 ;main.c:415: if (hasValidCaptureMoves(currentPlayer)) {
      000E89 FAr07r00         [16] 3727 	ld	a, (#_currentPlayer)
      000E8C CDrA2r06         [24] 3728 	call	_hasValidCaptureMoves
      000E8F CB 47            [ 8] 3729 	bit	0,a
      000E91 C2r74r0F         [16] 3730 	jp	NZ, 00146$
                           000E94  3731 	C$main.c$418$9_0$265	= .
                                   3732 	.globl	C$main.c$418$9_0$265
                                   3733 ;main.c:418: if (currentPlayer == BLACK_PLAYER) {
      000E94 21r07r00         [12] 3734 	ld	hl, #_currentPlayer
      000E97 7E               [ 8] 3735 	ld	a, (hl)
      000E98 B7               [ 4] 3736 	or	a, a
      000E99 20 04            [12] 3737 	jr	NZ, 00120$
                           000E9B  3738 	C$main.c$419$10_0$266	= .
                                   3739 	.globl	C$main.c$419$10_0$266
                                   3740 ;main.c:419: currentPlayer = WHITE_PLAYER;
      000E9B 36 01            [12] 3741 	ld	(hl), #0x01
      000E9D 18 05            [12] 3742 	jr	00121$
      000E9F                       3743 00120$:
                           000E9F  3744 	C$main.c$421$10_0$267	= .
                                   3745 	.globl	C$main.c$421$10_0$267
                                   3746 ;main.c:421: currentPlayer = BLACK_PLAYER;
      000E9F 21r07r00         [12] 3747 	ld	hl, #_currentPlayer
      000EA2 36 00            [12] 3748 	ld	(hl), #0x00
      000EA4                       3749 00121$:
                           000EA4  3750 	C$main.c$423$9_0$265	= .
                                   3751 	.globl	C$main.c$423$9_0$265
                                   3752 ;main.c:423: printTurn();
      000EA4 CDr64r0A         [24] 3753 	call	_printTurn
                           000EA7  3754 	C$main.c$424$9_0$265	= .
                                   3755 	.globl	C$main.c$424$9_0$265
                                   3756 ;main.c:424: pieceSelected = false;
      000EA7 21r0Ar00         [12] 3757 	ld	hl, #_pieceSelected
      000EAA 36 00            [12] 3758 	ld	(hl), #0x00
                           000EAC  3759 	C$main.c$425$9_0$265	= .
                                   3760 	.globl	C$main.c$425$9_0$265
                                   3761 ;main.c:425: break; // Exit the loop after a piece has been moved
      000EAC C3r87r0F         [16] 3762 	jp	00151$
      000EAF                       3763 00137$:
                           000EAF  3764 	C$main.c$429$5_0$260	= .
                                   3765 	.globl	C$main.c$429$5_0$260
                                   3766 ;main.c:429: } else if (abs(dx) == 1 * SQUARE_SIZE || abs(dy) == 1 * SQUARE_SIZE) {
      000EAF F8 08            [12] 3767 	ldhl	sp,	#8
      000EB1 2A               [ 8] 3768 	ld	a, (hl+)
      000EB2 5F               [ 4] 3769 	ld	e, a
      000EB3 56               [ 8] 3770 	ld	d, (hl)
      000EB4 D5               [16] 3771 	push	de
      000EB5 CDr00r00         [24] 3772 	call	_abs
      000EB8 E1               [12] 3773 	pop	hl
      000EB9 7B               [ 4] 3774 	ld	a, e
      000EBA D6 10            [ 8] 3775 	sub	a, #0x10
      000EBC B2               [ 4] 3776 	or	a, d
      000EBD 28 11            [12] 3777 	jr	Z, 00133$
      000EBF F8 0E            [12] 3778 	ldhl	sp,	#14
      000EC1 2A               [ 8] 3779 	ld	a, (hl+)
      000EC2 5F               [ 4] 3780 	ld	e, a
      000EC3 56               [ 8] 3781 	ld	d, (hl)
      000EC4 D5               [16] 3782 	push	de
      000EC5 CDr00r00         [24] 3783 	call	_abs
      000EC8 E1               [12] 3784 	pop	hl
      000EC9 7B               [ 4] 3785 	ld	a, e
      000ECA D6 10            [ 8] 3786 	sub	a, #0x10
      000ECC B2               [ 4] 3787 	or	a, d
      000ECD C2r74r0F         [16] 3788 	jp	NZ,00146$
      000ED0                       3789 00133$:
                           000ED0  3790 	C$main.c$430$6_0$268	= .
                                   3791 	.globl	C$main.c$430$6_0$268
                                   3792 ;main.c:430: pieces[selectedCoords].x = cursorx - 4; 
      000ED0 21r08r00         [12] 3793 	ld	hl, #_selectedCoords
      000ED3 2A               [ 8] 3794 	ld	a, (hl+)
      000ED4 4F               [ 4] 3795 	ld	c, a
      000ED5 46               [ 8] 3796 	ld	b, (hl)
      000ED6 69               [ 4] 3797 	ld	l, c
      000ED7 60               [ 4] 3798 	ld	h, b
      000ED8 29               [ 8] 3799 	add	hl, hl
      000ED9 09               [ 8] 3800 	add	hl, bc
      000EDA E5               [16] 3801 	push	hl
      000EDB 7D               [ 4] 3802 	ld	a, l
      000EDC F8 0D            [12] 3803 	ldhl	sp,	#13
      000EDE 77               [ 8] 3804 	ld	(hl), a
      000EDF E1               [12] 3805 	pop	hl
      000EE0 7C               [ 4] 3806 	ld	a, h
      000EE1 F8 0C            [12] 3807 	ldhl	sp,	#12
      000EE3 32               [ 8] 3808 	ld	(hl-), a
      000EE4 2A               [ 8] 3809 	ld	a, (hl+)
      000EE5 5F               [ 4] 3810 	ld	e, a
      000EE6 56               [ 8] 3811 	ld	d, (hl)
      000EE7 E1               [12] 3812 	pop	hl
      000EE8 E5               [16] 3813 	push	hl
      000EE9 19               [ 8] 3814 	add	hl, de
      000EEA E5               [16] 3815 	push	hl
      000EEB 7D               [ 4] 3816 	ld	a, l
      000EEC F8 0F            [12] 3817 	ldhl	sp,	#15
      000EEE 77               [ 8] 3818 	ld	(hl), a
      000EEF E1               [12] 3819 	pop	hl
      000EF0 7C               [ 4] 3820 	ld	a, h
      000EF1 F8 0E            [12] 3821 	ldhl	sp,	#14
      000EF3 77               [ 8] 3822 	ld	(hl), a
      000EF4 FAr05r00         [16] 3823 	ld	a, (#_cursorx)
      000EF7 F8 0F            [12] 3824 	ldhl	sp,	#15
      000EF9 77               [ 8] 3825 	ld	(hl), a
      000EFA 3A               [ 8] 3826 	ld	a, (hl-)
      000EFB C6 FC            [ 8] 3827 	add	a, #0xfc
      000EFD 4F               [ 4] 3828 	ld	c, a
      000EFE 3A               [ 8] 3829 	ld	a, (hl-)
      000EFF 6E               [ 8] 3830 	ld	l, (hl)
      000F00 67               [ 4] 3831 	ld	h, a
      000F01 71               [ 8] 3832 	ld	(hl), c
                           000F02  3833 	C$main.c$431$6_0$268	= .
                                   3834 	.globl	C$main.c$431$6_0$268
                                   3835 ;main.c:431: pieces[selectedCoords].y = cursory - 4;
      000F02 21r08r00         [12] 3836 	ld	hl, #_selectedCoords
      000F05 2A               [ 8] 3837 	ld	a, (hl+)
      000F06 4F               [ 4] 3838 	ld	c, a
      000F07 46               [ 8] 3839 	ld	b, (hl)
      000F08 69               [ 4] 3840 	ld	l, c
      000F09 60               [ 4] 3841 	ld	h, b
      000F0A 29               [ 8] 3842 	add	hl, hl
      000F0B 09               [ 8] 3843 	add	hl, bc
      000F0C E5               [16] 3844 	push	hl
      000F0D 7D               [ 4] 3845 	ld	a, l
      000F0E F8 10            [12] 3846 	ldhl	sp,	#16
      000F10 77               [ 8] 3847 	ld	(hl), a
      000F11 E1               [12] 3848 	pop	hl
      000F12 7C               [ 4] 3849 	ld	a, h
      000F13 F8 0F            [12] 3850 	ldhl	sp,	#15
      000F15 32               [ 8] 3851 	ld	(hl-), a
      000F16 2A               [ 8] 3852 	ld	a, (hl+)
      000F17 5F               [ 4] 3853 	ld	e, a
      000F18 56               [ 8] 3854 	ld	d, (hl)
      000F19 E1               [12] 3855 	pop	hl
      000F1A E5               [16] 3856 	push	hl
      000F1B 19               [ 8] 3857 	add	hl, de
      000F1C E5               [16] 3858 	push	hl
      000F1D 7D               [ 4] 3859 	ld	a, l
      000F1E F8 0D            [12] 3860 	ldhl	sp,	#13
      000F20 77               [ 8] 3861 	ld	(hl), a
      000F21 E1               [12] 3862 	pop	hl
      000F22 7C               [ 4] 3863 	ld	a, h
      000F23 F8 0C            [12] 3864 	ldhl	sp,	#12
      000F25 32               [ 8] 3865 	ld	(hl-), a
      000F26 2A               [ 8] 3866 	ld	a, (hl+)
      000F27 5F               [ 4] 3867 	ld	e, a
      000F28 56               [ 8] 3868 	ld	d, (hl)
      000F29 6B               [ 4] 3869 	ld	l, e
      000F2A 62               [ 4] 3870 	ld	h, d
      000F2B 23               [ 8] 3871 	inc	hl
      000F2C E5               [16] 3872 	push	hl
      000F2D 7D               [ 4] 3873 	ld	a, l
      000F2E F8 0F            [12] 3874 	ldhl	sp,	#15
      000F30 77               [ 8] 3875 	ld	(hl), a
      000F31 E1               [12] 3876 	pop	hl
      000F32 7C               [ 4] 3877 	ld	a, h
      000F33 F8 0E            [12] 3878 	ldhl	sp,	#14
      000F35 77               [ 8] 3879 	ld	(hl), a
      000F36 FAr06r00         [16] 3880 	ld	a, (#_cursory)
      000F39 F8 0F            [12] 3881 	ldhl	sp,	#15
      000F3B 77               [ 8] 3882 	ld	(hl), a
      000F3C 3A               [ 8] 3883 	ld	a, (hl-)
      000F3D C6 FC            [ 8] 3884 	add	a, #0xfc
      000F3F 4F               [ 4] 3885 	ld	c, a
      000F40 3A               [ 8] 3886 	ld	a, (hl-)
      000F41 6E               [ 8] 3887 	ld	l, (hl)
      000F42 67               [ 4] 3888 	ld	h, a
      000F43 71               [ 8] 3889 	ld	(hl), c
                           000F44  3890 	C$main.c$432$6_0$268	= .
                                   3891 	.globl	C$main.c$432$6_0$268
                                   3892 ;main.c:432: promoteToKing(pieces, numPieces, currentPlayer);
      000F44 FAr07r00         [16] 3893 	ld	a, (#_currentPlayer)
      000F47 F5               [16] 3894 	push	af
      000F48 33               [ 8] 3895 	inc	sp
      000F49 01 0C 00         [12] 3896 	ld	bc, #0x000c
      000F4C F8 01            [12] 3897 	ldhl	sp,	#1
      000F4E 2A               [ 8] 3898 	ld	a, (hl+)
      000F4F 5F               [ 4] 3899 	ld	e, a
      000F50 56               [ 8] 3900 	ld	d, (hl)
      000F51 CDr41r00         [24] 3901 	call	_promoteToKing
                           000F54  3902 	C$main.c$433$6_0$268	= .
                                   3903 	.globl	C$main.c$433$6_0$268
                                   3904 ;main.c:433: if (currentPlayer == BLACK_PLAYER) {
      000F54 21r07r00         [12] 3905 	ld	hl, #_currentPlayer
      000F57 7E               [ 8] 3906 	ld	a, (hl)
      000F58 B7               [ 4] 3907 	or	a, a
      000F59 20 04            [12] 3908 	jr	NZ, 00131$
                           000F5B  3909 	C$main.c$434$7_0$269	= .
                                   3910 	.globl	C$main.c$434$7_0$269
                                   3911 ;main.c:434: currentPlayer = WHITE_PLAYER;
      000F5B 36 01            [12] 3912 	ld	(hl), #0x01
      000F5D 18 05            [12] 3913 	jr	00132$
      000F5F                       3914 00131$:
                           000F5F  3915 	C$main.c$436$7_0$270	= .
                                   3916 	.globl	C$main.c$436$7_0$270
                                   3917 ;main.c:436: currentPlayer = BLACK_PLAYER;
      000F5F 21r07r00         [12] 3918 	ld	hl, #_currentPlayer
      000F62 36 00            [12] 3919 	ld	(hl), #0x00
      000F64                       3920 00132$:
                           000F64  3921 	C$main.c$438$6_0$268	= .
                                   3922 	.globl	C$main.c$438$6_0$268
                                   3923 ;main.c:438: printBlack();
      000F64 CDr85r01         [24] 3924 	call	_printBlack
                           000F67  3925 	C$main.c$439$6_0$268	= .
                                   3926 	.globl	C$main.c$439$6_0$268
                                   3927 ;main.c:439: printWhite();
      000F67 CDr7Ar02         [24] 3928 	call	_printWhite
                           000F6A  3929 	C$main.c$440$6_0$268	= .
                                   3930 	.globl	C$main.c$440$6_0$268
                                   3931 ;main.c:440: printTurn();
      000F6A CDr64r0A         [24] 3932 	call	_printTurn
                           000F6D  3933 	C$main.c$441$6_0$268	= .
                                   3934 	.globl	C$main.c$441$6_0$268
                                   3935 ;main.c:441: pieceSelected = false;
      000F6D 21r0Ar00         [12] 3936 	ld	hl, #_pieceSelected
      000F70 36 00            [12] 3937 	ld	(hl), #0x00
                           000F72  3938 	C$main.c$442$6_0$268	= .
                                   3939 	.globl	C$main.c$442$6_0$268
                                   3940 ;main.c:442: break; // Exit the loop after a piece has been moved
      000F72 18 13            [12] 3941 	jr	00151$
      000F74                       3942 00146$:
                           000F74  3943 	C$main.c$446$3_0$257	= .
                                   3944 	.globl	C$main.c$446$3_0$257
                                   3945 ;main.c:446: if (joypad_input & J_B) {
      000F74 FAr00r00         [16] 3946 	ld	a, (#_joypad_input)
      000F77 CB 6F            [ 8] 3947 	bit	5, a
      000F79 CArDDr0B         [16] 3948 	jp	Z,00149$
                           000F7C  3949 	C$main.c$447$4_0$271	= .
                                   3950 	.globl	C$main.c$447$4_0$271
                                   3951 ;main.c:447: pieceSelected = false;
      000F7C 21r0Ar00         [12] 3952 	ld	hl, #_pieceSelected
      000F7F 36 00            [12] 3953 	ld	(hl), #0x00
                           000F81  3954 	C$main.c$448$4_0$271	= .
                                   3955 	.globl	C$main.c$448$4_0$271
                                   3956 ;main.c:448: printBlack();
      000F81 CDr85r01         [24] 3957 	call	_printBlack
                           000F84  3958 	C$main.c$449$4_0$271	= .
                                   3959 	.globl	C$main.c$449$4_0$271
                                   3960 ;main.c:449: printWhite();
      000F84 CDr7Ar02         [24] 3961 	call	_printWhite
                           000F87  3962 	C$main.c$450$2_0$249	= .
                                   3963 	.globl	C$main.c$450$2_0$249
                                   3964 ;main.c:450: break;
      000F87                       3965 00151$:
                           000F87  3966 	C$main.c$453$2_0$249	= .
                                   3967 	.globl	C$main.c$453$2_0$249
                                   3968 ;main.c:453: delay(100);
      000F87 11 64 00         [12] 3969 	ld	de, #0x0064
      000F8A CDr00r00         [24] 3970 	call	_delay
      000F8D C3r0Br0B         [16] 3971 	jp	00153$
                           000F90  3972 	C$main.c$455$1_0$248	= .
                                   3973 	.globl	C$main.c$455$1_0$248
                                   3974 ;main.c:455: }
      000F90 E8 10            [16] 3975 	add	sp, #16
                           000F92  3976 	C$main.c$455$1_0$248	= .
                                   3977 	.globl	C$main.c$455$1_0$248
                           000F92  3978 	XG$main$0$0	= .
                                   3979 	.globl	XG$main$0$0
      000F92 C9               [16] 3980 	ret
                                   3981 	.area _CODE
                                   3982 	.area _INITIALIZER
                           000000  3983 Fmain$__xinit_lastButtonState$0_0$0 == .
      000000                       3984 __xinit__lastButtonState:
      000000 00                    3985 	.db #0x00	; 0
                           000001  3986 Fmain$__xinit_debounceTimer$0_0$0 == .
      000001                       3987 __xinit__debounceTimer:
      000001 00 00                 3988 	.dw #0x0000
                           000003  3989 Fmain$__xinit_selectedPieceIndex$0_0$0 == .
      000003                       3990 __xinit__selectedPieceIndex:
      000003 FF FF                 3991 	.dw #0xffff
                           000005  3992 Fmain$__xinit_cursorx$0_0$0 == .
      000005                       3993 __xinit__cursorx:
      000005 20                    3994 	.db #0x20	; 32
                           000006  3995 Fmain$__xinit_cursory$0_0$0 == .
      000006                       3996 __xinit__cursory:
      000006 20                    3997 	.db #0x20	; 32
                           000007  3998 Fmain$__xinit_currentPlayer$0_0$0 == .
      000007                       3999 __xinit__currentPlayer:
      000007 00                    4000 	.db #0x00	; 0
                           000008  4001 Fmain$__xinit_selectedCoords$0_0$0 == .
      000008                       4002 __xinit__selectedCoords:
      000008 00 00                 4003 	.dw #0x0000
                           00000A  4004 Fmain$__xinit_pieceSelected$0_0$0 == .
      00000A                       4005 __xinit__pieceSelected:
      00000A 00                    4006 	.db #0x00	;  0
                           00000B  4007 Fmain$__xinit_tile1$0_0$0 == .
      00000B                       4008 __xinit__tile1:
      00000B FF                    4009 	.db #0xff	; 255
      00000C FF                    4010 	.db #0xff	; 255
      00000D FF                    4011 	.db #0xff	; 255
      00000E FF                    4012 	.db #0xff	; 255
      00000F FF                    4013 	.db #0xff	; 255
      000010 FF                    4014 	.db #0xff	; 255
      000011 FF                    4015 	.db #0xff	; 255
      000012 FF                    4016 	.db #0xff	; 255
      000013 FF                    4017 	.db #0xff	; 255
      000014 FF                    4018 	.db #0xff	; 255
      000015 FF                    4019 	.db #0xff	; 255
      000016 FF                    4020 	.db #0xff	; 255
      000017 FF                    4021 	.db #0xff	; 255
      000018 FF                    4022 	.db #0xff	; 255
      000019 FF                    4023 	.db #0xff	; 255
      00001A FF                    4024 	.db #0xff	; 255
                           00001B  4025 Fmain$__xinit_tile2$0_0$0 == .
      00001B                       4026 __xinit__tile2:
      00001B FF                    4027 	.db #0xff	; 255
      00001C 00                    4028 	.db #0x00	; 0
      00001D FF                    4029 	.db #0xff	; 255
      00001E 00                    4030 	.db #0x00	; 0
      00001F FF                    4031 	.db #0xff	; 255
      000020 00                    4032 	.db #0x00	; 0
      000021 FF                    4033 	.db #0xff	; 255
      000022 00                    4034 	.db #0x00	; 0
      000023 FF                    4035 	.db #0xff	; 255
      000024 00                    4036 	.db #0x00	; 0
      000025 FF                    4037 	.db #0xff	; 255
      000026 00                    4038 	.db #0x00	; 0
      000027 FF                    4039 	.db #0xff	; 255
      000028 00                    4040 	.db #0x00	; 0
      000029 FF                    4041 	.db #0xff	; 255
      00002A 00                    4042 	.db #0x00	; 0
                           00002B  4043 Fmain$__xinit_tile3$0_0$0 == .
      00002B                       4044 __xinit__tile3:
      00002B 00                    4045 	.db #0x00	; 0
      00002C FF                    4046 	.db #0xff	; 255
      00002D 00                    4047 	.db #0x00	; 0
      00002E FF                    4048 	.db #0xff	; 255
      00002F 00                    4049 	.db #0x00	; 0
      000030 FF                    4050 	.db #0xff	; 255
      000031 00                    4051 	.db #0x00	; 0
      000032 FF                    4052 	.db #0xff	; 255
      000033 00                    4053 	.db #0x00	; 0
      000034 FF                    4054 	.db #0xff	; 255
      000035 00                    4055 	.db #0x00	; 0
      000036 FF                    4056 	.db #0xff	; 255
      000037 00                    4057 	.db #0x00	; 0
      000038 FF                    4058 	.db #0xff	; 255
      000039 00                    4059 	.db #0x00	; 0
      00003A FF                    4060 	.db #0xff	; 255
                           00003B  4061 Fmain$__xinit_map$0_0$0 == .
      00003B                       4062 __xinit__map:
      00003B 01                    4063 	.db #0x01	; 1
      00003C 01                    4064 	.db #0x01	; 1
      00003D 01                    4065 	.db #0x01	; 1
      00003E 01                    4066 	.db #0x01	; 1
      00003F 01                    4067 	.db #0x01	; 1
      000040 01                    4068 	.db #0x01	; 1
      000041 01                    4069 	.db #0x01	; 1
      000042 01                    4070 	.db #0x01	; 1
      000043 01                    4071 	.db #0x01	; 1
      000044 01                    4072 	.db #0x01	; 1
      000045 01                    4073 	.db #0x01	; 1
      000046 01                    4074 	.db #0x01	; 1
      000047 01                    4075 	.db #0x01	; 1
      000048 01                    4076 	.db #0x01	; 1
      000049 01                    4077 	.db #0x01	; 1
      00004A 01                    4078 	.db #0x01	; 1
      00004B 01                    4079 	.db #0x01	; 1
      00004C 01                    4080 	.db #0x01	; 1
      00004D 01                    4081 	.db #0x01	; 1
      00004E 01                    4082 	.db #0x01	; 1
      00004F 01                    4083 	.db #0x01	; 1
      000050 01                    4084 	.db #0x01	; 1
      000051 02                    4085 	.db #0x02	; 2
      000052 02                    4086 	.db #0x02	; 2
      000053 03                    4087 	.db #0x03	; 3
      000054 03                    4088 	.db #0x03	; 3
      000055 02                    4089 	.db #0x02	; 2
      000056 02                    4090 	.db #0x02	; 2
      000057 03                    4091 	.db #0x03	; 3
      000058 03                    4092 	.db #0x03	; 3
      000059 02                    4093 	.db #0x02	; 2
      00005A 02                    4094 	.db #0x02	; 2
      00005B 03                    4095 	.db #0x03	; 3
      00005C 03                    4096 	.db #0x03	; 3
      00005D 02                    4097 	.db #0x02	; 2
      00005E 02                    4098 	.db #0x02	; 2
      00005F 03                    4099 	.db #0x03	; 3
      000060 03                    4100 	.db #0x03	; 3
      000061 01                    4101 	.db #0x01	; 1
      000062 01                    4102 	.db #0x01	; 1
      000063 01                    4103 	.db #0x01	; 1
      000064 01                    4104 	.db #0x01	; 1
      000065 02                    4105 	.db #0x02	; 2
      000066 02                    4106 	.db #0x02	; 2
      000067 03                    4107 	.db #0x03	; 3
      000068 03                    4108 	.db #0x03	; 3
      000069 02                    4109 	.db #0x02	; 2
      00006A 02                    4110 	.db #0x02	; 2
      00006B 03                    4111 	.db #0x03	; 3
      00006C 03                    4112 	.db #0x03	; 3
      00006D 02                    4113 	.db #0x02	; 2
      00006E 02                    4114 	.db #0x02	; 2
      00006F 03                    4115 	.db #0x03	; 3
      000070 03                    4116 	.db #0x03	; 3
      000071 02                    4117 	.db #0x02	; 2
      000072 02                    4118 	.db #0x02	; 2
      000073 03                    4119 	.db #0x03	; 3
      000074 03                    4120 	.db #0x03	; 3
      000075 01                    4121 	.db #0x01	; 1
      000076 01                    4122 	.db #0x01	; 1
      000077 01                    4123 	.db #0x01	; 1
      000078 01                    4124 	.db #0x01	; 1
      000079 03                    4125 	.db #0x03	; 3
      00007A 03                    4126 	.db #0x03	; 3
      00007B 02                    4127 	.db #0x02	; 2
      00007C 02                    4128 	.db #0x02	; 2
      00007D 03                    4129 	.db #0x03	; 3
      00007E 03                    4130 	.db #0x03	; 3
      00007F 02                    4131 	.db #0x02	; 2
      000080 02                    4132 	.db #0x02	; 2
      000081 03                    4133 	.db #0x03	; 3
      000082 03                    4134 	.db #0x03	; 3
      000083 02                    4135 	.db #0x02	; 2
      000084 02                    4136 	.db #0x02	; 2
      000085 03                    4137 	.db #0x03	; 3
      000086 03                    4138 	.db #0x03	; 3
      000087 02                    4139 	.db #0x02	; 2
      000088 02                    4140 	.db #0x02	; 2
      000089 01                    4141 	.db #0x01	; 1
      00008A 01                    4142 	.db #0x01	; 1
      00008B 01                    4143 	.db #0x01	; 1
      00008C 01                    4144 	.db #0x01	; 1
      00008D 03                    4145 	.db #0x03	; 3
      00008E 03                    4146 	.db #0x03	; 3
      00008F 02                    4147 	.db #0x02	; 2
      000090 02                    4148 	.db #0x02	; 2
      000091 03                    4149 	.db #0x03	; 3
      000092 03                    4150 	.db #0x03	; 3
      000093 02                    4151 	.db #0x02	; 2
      000094 02                    4152 	.db #0x02	; 2
      000095 03                    4153 	.db #0x03	; 3
      000096 03                    4154 	.db #0x03	; 3
      000097 02                    4155 	.db #0x02	; 2
      000098 02                    4156 	.db #0x02	; 2
      000099 03                    4157 	.db #0x03	; 3
      00009A 03                    4158 	.db #0x03	; 3
      00009B 02                    4159 	.db #0x02	; 2
      00009C 02                    4160 	.db #0x02	; 2
      00009D 01                    4161 	.db #0x01	; 1
      00009E 01                    4162 	.db #0x01	; 1
      00009F 01                    4163 	.db #0x01	; 1
      0000A0 01                    4164 	.db #0x01	; 1
      0000A1 02                    4165 	.db #0x02	; 2
      0000A2 02                    4166 	.db #0x02	; 2
      0000A3 03                    4167 	.db #0x03	; 3
      0000A4 03                    4168 	.db #0x03	; 3
      0000A5 02                    4169 	.db #0x02	; 2
      0000A6 02                    4170 	.db #0x02	; 2
      0000A7 03                    4171 	.db #0x03	; 3
      0000A8 03                    4172 	.db #0x03	; 3
      0000A9 02                    4173 	.db #0x02	; 2
      0000AA 02                    4174 	.db #0x02	; 2
      0000AB 03                    4175 	.db #0x03	; 3
      0000AC 03                    4176 	.db #0x03	; 3
      0000AD 02                    4177 	.db #0x02	; 2
      0000AE 02                    4178 	.db #0x02	; 2
      0000AF 03                    4179 	.db #0x03	; 3
      0000B0 03                    4180 	.db #0x03	; 3
      0000B1 01                    4181 	.db #0x01	; 1
      0000B2 01                    4182 	.db #0x01	; 1
      0000B3 01                    4183 	.db #0x01	; 1
      0000B4 01                    4184 	.db #0x01	; 1
      0000B5 02                    4185 	.db #0x02	; 2
      0000B6 02                    4186 	.db #0x02	; 2
      0000B7 03                    4187 	.db #0x03	; 3
      0000B8 03                    4188 	.db #0x03	; 3
      0000B9 02                    4189 	.db #0x02	; 2
      0000BA 02                    4190 	.db #0x02	; 2
      0000BB 03                    4191 	.db #0x03	; 3
      0000BC 03                    4192 	.db #0x03	; 3
      0000BD 02                    4193 	.db #0x02	; 2
      0000BE 02                    4194 	.db #0x02	; 2
      0000BF 03                    4195 	.db #0x03	; 3
      0000C0 03                    4196 	.db #0x03	; 3
      0000C1 02                    4197 	.db #0x02	; 2
      0000C2 02                    4198 	.db #0x02	; 2
      0000C3 03                    4199 	.db #0x03	; 3
      0000C4 03                    4200 	.db #0x03	; 3
      0000C5 01                    4201 	.db #0x01	; 1
      0000C6 01                    4202 	.db #0x01	; 1
      0000C7 01                    4203 	.db #0x01	; 1
      0000C8 01                    4204 	.db #0x01	; 1
      0000C9 03                    4205 	.db #0x03	; 3
      0000CA 03                    4206 	.db #0x03	; 3
      0000CB 02                    4207 	.db #0x02	; 2
      0000CC 02                    4208 	.db #0x02	; 2
      0000CD 03                    4209 	.db #0x03	; 3
      0000CE 03                    4210 	.db #0x03	; 3
      0000CF 02                    4211 	.db #0x02	; 2
      0000D0 02                    4212 	.db #0x02	; 2
      0000D1 03                    4213 	.db #0x03	; 3
      0000D2 03                    4214 	.db #0x03	; 3
      0000D3 02                    4215 	.db #0x02	; 2
      0000D4 02                    4216 	.db #0x02	; 2
      0000D5 03                    4217 	.db #0x03	; 3
      0000D6 03                    4218 	.db #0x03	; 3
      0000D7 02                    4219 	.db #0x02	; 2
      0000D8 02                    4220 	.db #0x02	; 2
      0000D9 01                    4221 	.db #0x01	; 1
      0000DA 01                    4222 	.db #0x01	; 1
      0000DB 01                    4223 	.db #0x01	; 1
      0000DC 01                    4224 	.db #0x01	; 1
      0000DD 03                    4225 	.db #0x03	; 3
      0000DE 03                    4226 	.db #0x03	; 3
      0000DF 02                    4227 	.db #0x02	; 2
      0000E0 02                    4228 	.db #0x02	; 2
      0000E1 03                    4229 	.db #0x03	; 3
      0000E2 03                    4230 	.db #0x03	; 3
      0000E3 02                    4231 	.db #0x02	; 2
      0000E4 02                    4232 	.db #0x02	; 2
      0000E5 03                    4233 	.db #0x03	; 3
      0000E6 03                    4234 	.db #0x03	; 3
      0000E7 02                    4235 	.db #0x02	; 2
      0000E8 02                    4236 	.db #0x02	; 2
      0000E9 03                    4237 	.db #0x03	; 3
      0000EA 03                    4238 	.db #0x03	; 3
      0000EB 02                    4239 	.db #0x02	; 2
      0000EC 02                    4240 	.db #0x02	; 2
      0000ED 01                    4241 	.db #0x01	; 1
      0000EE 01                    4242 	.db #0x01	; 1
      0000EF 01                    4243 	.db #0x01	; 1
      0000F0 01                    4244 	.db #0x01	; 1
      0000F1 02                    4245 	.db #0x02	; 2
      0000F2 02                    4246 	.db #0x02	; 2
      0000F3 03                    4247 	.db #0x03	; 3
      0000F4 03                    4248 	.db #0x03	; 3
      0000F5 02                    4249 	.db #0x02	; 2
      0000F6 02                    4250 	.db #0x02	; 2
      0000F7 03                    4251 	.db #0x03	; 3
      0000F8 03                    4252 	.db #0x03	; 3
      0000F9 02                    4253 	.db #0x02	; 2
      0000FA 02                    4254 	.db #0x02	; 2
      0000FB 03                    4255 	.db #0x03	; 3
      0000FC 03                    4256 	.db #0x03	; 3
      0000FD 02                    4257 	.db #0x02	; 2
      0000FE 02                    4258 	.db #0x02	; 2
      0000FF 03                    4259 	.db #0x03	; 3
      000100 03                    4260 	.db #0x03	; 3
      000101 01                    4261 	.db #0x01	; 1
      000102 01                    4262 	.db #0x01	; 1
      000103 01                    4263 	.db #0x01	; 1
      000104 01                    4264 	.db #0x01	; 1
      000105 02                    4265 	.db #0x02	; 2
      000106 02                    4266 	.db #0x02	; 2
      000107 03                    4267 	.db #0x03	; 3
      000108 03                    4268 	.db #0x03	; 3
      000109 02                    4269 	.db #0x02	; 2
      00010A 02                    4270 	.db #0x02	; 2
      00010B 03                    4271 	.db #0x03	; 3
      00010C 03                    4272 	.db #0x03	; 3
      00010D 02                    4273 	.db #0x02	; 2
      00010E 02                    4274 	.db #0x02	; 2
      00010F 03                    4275 	.db #0x03	; 3
      000110 03                    4276 	.db #0x03	; 3
      000111 02                    4277 	.db #0x02	; 2
      000112 02                    4278 	.db #0x02	; 2
      000113 03                    4279 	.db #0x03	; 3
      000114 03                    4280 	.db #0x03	; 3
      000115 01                    4281 	.db #0x01	; 1
      000116 01                    4282 	.db #0x01	; 1
      000117 01                    4283 	.db #0x01	; 1
      000118 01                    4284 	.db #0x01	; 1
      000119 03                    4285 	.db #0x03	; 3
      00011A 03                    4286 	.db #0x03	; 3
      00011B 02                    4287 	.db #0x02	; 2
      00011C 02                    4288 	.db #0x02	; 2
      00011D 03                    4289 	.db #0x03	; 3
      00011E 03                    4290 	.db #0x03	; 3
      00011F 02                    4291 	.db #0x02	; 2
      000120 02                    4292 	.db #0x02	; 2
      000121 03                    4293 	.db #0x03	; 3
      000122 03                    4294 	.db #0x03	; 3
      000123 02                    4295 	.db #0x02	; 2
      000124 02                    4296 	.db #0x02	; 2
      000125 03                    4297 	.db #0x03	; 3
      000126 03                    4298 	.db #0x03	; 3
      000127 02                    4299 	.db #0x02	; 2
      000128 02                    4300 	.db #0x02	; 2
      000129 01                    4301 	.db #0x01	; 1
      00012A 01                    4302 	.db #0x01	; 1
      00012B 01                    4303 	.db #0x01	; 1
      00012C 01                    4304 	.db #0x01	; 1
      00012D 03                    4305 	.db #0x03	; 3
      00012E 03                    4306 	.db #0x03	; 3
      00012F 02                    4307 	.db #0x02	; 2
      000130 02                    4308 	.db #0x02	; 2
      000131 03                    4309 	.db #0x03	; 3
      000132 03                    4310 	.db #0x03	; 3
      000133 02                    4311 	.db #0x02	; 2
      000134 02                    4312 	.db #0x02	; 2
      000135 03                    4313 	.db #0x03	; 3
      000136 03                    4314 	.db #0x03	; 3
      000137 02                    4315 	.db #0x02	; 2
      000138 02                    4316 	.db #0x02	; 2
      000139 03                    4317 	.db #0x03	; 3
      00013A 03                    4318 	.db #0x03	; 3
      00013B 02                    4319 	.db #0x02	; 2
      00013C 02                    4320 	.db #0x02	; 2
      00013D 01                    4321 	.db #0x01	; 1
      00013E 01                    4322 	.db #0x01	; 1
      00013F 01                    4323 	.db #0x01	; 1
      000140 01                    4324 	.db #0x01	; 1
      000141 02                    4325 	.db #0x02	; 2
      000142 02                    4326 	.db #0x02	; 2
      000143 03                    4327 	.db #0x03	; 3
      000144 03                    4328 	.db #0x03	; 3
      000145 02                    4329 	.db #0x02	; 2
      000146 02                    4330 	.db #0x02	; 2
      000147 03                    4331 	.db #0x03	; 3
      000148 03                    4332 	.db #0x03	; 3
      000149 02                    4333 	.db #0x02	; 2
      00014A 02                    4334 	.db #0x02	; 2
      00014B 03                    4335 	.db #0x03	; 3
      00014C 03                    4336 	.db #0x03	; 3
      00014D 02                    4337 	.db #0x02	; 2
      00014E 02                    4338 	.db #0x02	; 2
      00014F 03                    4339 	.db #0x03	; 3
      000150 03                    4340 	.db #0x03	; 3
      000151 01                    4341 	.db #0x01	; 1
      000152 01                    4342 	.db #0x01	; 1
      000153 01                    4343 	.db #0x01	; 1
      000154 01                    4344 	.db #0x01	; 1
      000155 02                    4345 	.db #0x02	; 2
      000156 02                    4346 	.db #0x02	; 2
      000157 03                    4347 	.db #0x03	; 3
      000158 03                    4348 	.db #0x03	; 3
      000159 02                    4349 	.db #0x02	; 2
      00015A 02                    4350 	.db #0x02	; 2
      00015B 03                    4351 	.db #0x03	; 3
      00015C 03                    4352 	.db #0x03	; 3
      00015D 02                    4353 	.db #0x02	; 2
      00015E 02                    4354 	.db #0x02	; 2
      00015F 03                    4355 	.db #0x03	; 3
      000160 03                    4356 	.db #0x03	; 3
      000161 02                    4357 	.db #0x02	; 2
      000162 02                    4358 	.db #0x02	; 2
      000163 03                    4359 	.db #0x03	; 3
      000164 03                    4360 	.db #0x03	; 3
      000165 01                    4361 	.db #0x01	; 1
      000166 01                    4362 	.db #0x01	; 1
      000167 01                    4363 	.db #0x01	; 1
      000168 01                    4364 	.db #0x01	; 1
      000169 03                    4365 	.db #0x03	; 3
      00016A 03                    4366 	.db #0x03	; 3
      00016B 02                    4367 	.db #0x02	; 2
      00016C 02                    4368 	.db #0x02	; 2
      00016D 03                    4369 	.db #0x03	; 3
      00016E 03                    4370 	.db #0x03	; 3
      00016F 02                    4371 	.db #0x02	; 2
      000170 02                    4372 	.db #0x02	; 2
      000171 03                    4373 	.db #0x03	; 3
      000172 03                    4374 	.db #0x03	; 3
      000173 02                    4375 	.db #0x02	; 2
      000174 02                    4376 	.db #0x02	; 2
      000175 03                    4377 	.db #0x03	; 3
      000176 03                    4378 	.db #0x03	; 3
      000177 02                    4379 	.db #0x02	; 2
      000178 02                    4380 	.db #0x02	; 2
      000179 01                    4381 	.db #0x01	; 1
      00017A 01                    4382 	.db #0x01	; 1
      00017B 01                    4383 	.db #0x01	; 1
      00017C 01                    4384 	.db #0x01	; 1
      00017D 03                    4385 	.db #0x03	; 3
      00017E 03                    4386 	.db #0x03	; 3
      00017F 02                    4387 	.db #0x02	; 2
      000180 02                    4388 	.db #0x02	; 2
      000181 03                    4389 	.db #0x03	; 3
      000182 03                    4390 	.db #0x03	; 3
      000183 02                    4391 	.db #0x02	; 2
      000184 02                    4392 	.db #0x02	; 2
      000185 03                    4393 	.db #0x03	; 3
      000186 03                    4394 	.db #0x03	; 3
      000187 02                    4395 	.db #0x02	; 2
      000188 02                    4396 	.db #0x02	; 2
      000189 03                    4397 	.db #0x03	; 3
      00018A 03                    4398 	.db #0x03	; 3
      00018B 02                    4399 	.db #0x02	; 2
      00018C 02                    4400 	.db #0x02	; 2
      00018D 01                    4401 	.db #0x01	; 1
      00018E 01                    4402 	.db #0x01	; 1
      00018F 01                    4403 	.db #0x01	; 1
      000190 01                    4404 	.db #0x01	; 1
      000191 01                    4405 	.db #0x01	; 1
      000192 01                    4406 	.db #0x01	; 1
      000193 01                    4407 	.db #0x01	; 1
      000194 01                    4408 	.db #0x01	; 1
      000195 01                    4409 	.db #0x01	; 1
      000196 01                    4410 	.db #0x01	; 1
      000197 01                    4411 	.db #0x01	; 1
      000198 01                    4412 	.db #0x01	; 1
      000199 01                    4413 	.db #0x01	; 1
      00019A 01                    4414 	.db #0x01	; 1
      00019B 01                    4415 	.db #0x01	; 1
      00019C 01                    4416 	.db #0x01	; 1
      00019D 01                    4417 	.db #0x01	; 1
      00019E 01                    4418 	.db #0x01	; 1
      00019F 01                    4419 	.db #0x01	; 1
      0001A0 01                    4420 	.db #0x01	; 1
      0001A1 01                    4421 	.db #0x01	; 1
      0001A2 01                    4422 	.db #0x01	; 1
                           0001A3  4423 Fmain$__xinit_squareTL$0_0$0 == .
      0001A3                       4424 __xinit__squareTL:
      0001A3 FF                    4425 	.db #0xff	; 255
      0001A4 FF                    4426 	.db #0xff	; 255
      0001A5 FF                    4427 	.db #0xff	; 255
      0001A6 FF                    4428 	.db #0xff	; 255
      0001A7 C0                    4429 	.db #0xc0	; 192
      0001A8 C0                    4430 	.db #0xc0	; 192
      0001A9 C0                    4431 	.db #0xc0	; 192
      0001AA C0                    4432 	.db #0xc0	; 192
      0001AB C0                    4433 	.db #0xc0	; 192
      0001AC C0                    4434 	.db #0xc0	; 192
      0001AD C0                    4435 	.db #0xc0	; 192
      0001AE C0                    4436 	.db #0xc0	; 192
      0001AF C0                    4437 	.db #0xc0	; 192
      0001B0 C0                    4438 	.db #0xc0	; 192
      0001B1 C0                    4439 	.db #0xc0	; 192
      0001B2 C0                    4440 	.db #0xc0	; 192
                           0001B3  4441 Fmain$__xinit_squareTR$0_0$0 == .
      0001B3                       4442 __xinit__squareTR:
      0001B3 FF                    4443 	.db #0xff	; 255
      0001B4 FF                    4444 	.db #0xff	; 255
      0001B5 FF                    4445 	.db #0xff	; 255
      0001B6 FF                    4446 	.db #0xff	; 255
      0001B7 03                    4447 	.db #0x03	; 3
      0001B8 03                    4448 	.db #0x03	; 3
      0001B9 03                    4449 	.db #0x03	; 3
      0001BA 03                    4450 	.db #0x03	; 3
      0001BB 03                    4451 	.db #0x03	; 3
      0001BC 03                    4452 	.db #0x03	; 3
      0001BD 03                    4453 	.db #0x03	; 3
      0001BE 03                    4454 	.db #0x03	; 3
      0001BF 03                    4455 	.db #0x03	; 3
      0001C0 03                    4456 	.db #0x03	; 3
      0001C1 03                    4457 	.db #0x03	; 3
      0001C2 03                    4458 	.db #0x03	; 3
                           0001C3  4459 Fmain$__xinit_squareBL$0_0$0 == .
      0001C3                       4460 __xinit__squareBL:
      0001C3 C0                    4461 	.db #0xc0	; 192
      0001C4 C0                    4462 	.db #0xc0	; 192
      0001C5 C0                    4463 	.db #0xc0	; 192
      0001C6 C0                    4464 	.db #0xc0	; 192
      0001C7 C0                    4465 	.db #0xc0	; 192
      0001C8 C0                    4466 	.db #0xc0	; 192
      0001C9 C0                    4467 	.db #0xc0	; 192
      0001CA C0                    4468 	.db #0xc0	; 192
      0001CB C0                    4469 	.db #0xc0	; 192
      0001CC C0                    4470 	.db #0xc0	; 192
      0001CD C0                    4471 	.db #0xc0	; 192
      0001CE C0                    4472 	.db #0xc0	; 192
      0001CF FF                    4473 	.db #0xff	; 255
      0001D0 FF                    4474 	.db #0xff	; 255
      0001D1 FF                    4475 	.db #0xff	; 255
      0001D2 FF                    4476 	.db #0xff	; 255
                           0001D3  4477 Fmain$__xinit_squareBR$0_0$0 == .
      0001D3                       4478 __xinit__squareBR:
      0001D3 03                    4479 	.db #0x03	; 3
      0001D4 03                    4480 	.db #0x03	; 3
      0001D5 03                    4481 	.db #0x03	; 3
      0001D6 03                    4482 	.db #0x03	; 3
      0001D7 03                    4483 	.db #0x03	; 3
      0001D8 03                    4484 	.db #0x03	; 3
      0001D9 03                    4485 	.db #0x03	; 3
      0001DA 03                    4486 	.db #0x03	; 3
      0001DB 03                    4487 	.db #0x03	; 3
      0001DC 03                    4488 	.db #0x03	; 3
      0001DD 03                    4489 	.db #0x03	; 3
      0001DE 03                    4490 	.db #0x03	; 3
      0001DF FF                    4491 	.db #0xff	; 255
      0001E0 FF                    4492 	.db #0xff	; 255
      0001E1 FF                    4493 	.db #0xff	; 255
      0001E2 FF                    4494 	.db #0xff	; 255
                           0001E3  4495 Fmain$__xinit_black_piece$0_0$0 == .
      0001E3                       4496 __xinit__black_piece:
      0001E3 FF                    4497 	.db #0xff	; 255
      0001E4 FF                    4498 	.db #0xff	; 255
      0001E5 FF                    4499 	.db #0xff	; 255
      0001E6 FF                    4500 	.db #0xff	; 255
      0001E7 FF                    4501 	.db #0xff	; 255
      0001E8 FF                    4502 	.db #0xff	; 255
      0001E9 FF                    4503 	.db #0xff	; 255
      0001EA FF                    4504 	.db #0xff	; 255
      0001EB FF                    4505 	.db #0xff	; 255
      0001EC FF                    4506 	.db #0xff	; 255
      0001ED FF                    4507 	.db #0xff	; 255
      0001EE FF                    4508 	.db #0xff	; 255
      0001EF FF                    4509 	.db #0xff	; 255
      0001F0 FF                    4510 	.db #0xff	; 255
      0001F1 FF                    4511 	.db #0xff	; 255
      0001F2 FF                    4512 	.db #0xff	; 255
                           0001F3  4513 Fmain$__xinit_white_piece$0_0$0 == .
      0001F3                       4514 __xinit__white_piece:
      0001F3 FF                    4515 	.db #0xff	; 255
      0001F4 00                    4516 	.db #0x00	; 0
      0001F5 FF                    4517 	.db #0xff	; 255
      0001F6 00                    4518 	.db #0x00	; 0
      0001F7 FF                    4519 	.db #0xff	; 255
      0001F8 00                    4520 	.db #0x00	; 0
      0001F9 FF                    4521 	.db #0xff	; 255
      0001FA 00                    4522 	.db #0x00	; 0
      0001FB FF                    4523 	.db #0xff	; 255
      0001FC 00                    4524 	.db #0x00	; 0
      0001FD FF                    4525 	.db #0xff	; 255
      0001FE 00                    4526 	.db #0x00	; 0
      0001FF FF                    4527 	.db #0xff	; 255
      000200 00                    4528 	.db #0x00	; 0
      000201 FF                    4529 	.db #0xff	; 255
      000202 00                    4530 	.db #0x00	; 0
                           000203  4531 Fmain$__xinit_currentPlayerBlackText$0_0$0 == .
      000203                       4532 __xinit__currentPlayerBlackText:
      000203 00                    4533 	.db #0x00	; 0
      000204 00                    4534 	.db #0x00	; 0
      000205 50                    4535 	.db #0x50	; 80	'P'
      000206 6C                    4536 	.db #0x6c	; 108	'l'
      000207 61                    4537 	.db #0x61	; 97	'a'
      000208 79                    4538 	.db #0x79	; 121	'y'
      000209 65                    4539 	.db #0x65	; 101	'e'
      00020A 72                    4540 	.db #0x72	; 114	'r'
      00020B 00                    4541 	.db #0x00	; 0
      00020C 42                    4542 	.db #0x42	; 66	'B'
      00020D 6C                    4543 	.db #0x6c	; 108	'l'
      00020E 61                    4544 	.db #0x61	; 97	'a'
      00020F 63                    4545 	.db #0x63	; 99	'c'
      000210 6B                    4546 	.db #0x6b	; 107	'k'
      000211 00                    4547 	.db #0x00	; 0
      000212 00                    4548 	.db #0x00	; 0
                           000213  4549 Fmain$__xinit_currentPlayerWhiteText$0_0$0 == .
      000213                       4550 __xinit__currentPlayerWhiteText:
      000213 00                    4551 	.db #0x00	; 0
      000214 00                    4552 	.db #0x00	; 0
      000215 50                    4553 	.db #0x50	; 80	'P'
      000216 6C                    4554 	.db #0x6c	; 108	'l'
      000217 61                    4555 	.db #0x61	; 97	'a'
      000218 79                    4556 	.db #0x79	; 121	'y'
      000219 65                    4557 	.db #0x65	; 101	'e'
      00021A 72                    4558 	.db #0x72	; 114	'r'
      00021B 00                    4559 	.db #0x00	; 0
      00021C 57                    4560 	.db #0x57	; 87	'W'
      00021D 68                    4561 	.db #0x68	; 104	'h'
      00021E 69                    4562 	.db #0x69	; 105	'i'
      00021F 74                    4563 	.db #0x74	; 116	't'
      000220 65                    4564 	.db #0x65	; 101	'e'
      000221 00                    4565 	.db #0x00	; 0
      000222 00                    4566 	.db #0x00	; 0
                           000223  4567 Fmain$__xinit_clearText$0_0$0 == .
      000223                       4568 __xinit__clearText:
      000223 00                    4569 	.db #0x00	; 0
      000224 00                    4570 	.db #0x00	; 0
      000225 00                    4571 	.db #0x00	; 0
      000226 00                    4572 	.db #0x00	; 0
      000227 00                    4573 	.db #0x00	; 0
      000228 00                    4574 	.db #0x00	; 0
      000229 00                    4575 	.db #0x00	; 0
      00022A 00                    4576 	.db #0x00	; 0
      00022B 00                    4577 	.db #0x00	; 0
      00022C 00                    4578 	.db #0x00	; 0
      00022D 00                    4579 	.db #0x00	; 0
      00022E 00                    4580 	.db #0x00	; 0
      00022F 00                    4581 	.db #0x00	; 0
      000230 00                    4582 	.db #0x00	; 0
      000231 00                    4583 	.db #0x00	; 0
      000232 00                    4584 	.db #0x00	; 0
                           000233  4585 Fmain$__xinit_whiteWins$0_0$0 == .
      000233                       4586 __xinit__whiteWins:
      000233 00                    4587 	.db #0x00	; 0
      000234 00                    4588 	.db #0x00	; 0
      000235 00                    4589 	.db #0x00	; 0
      000236 57                    4590 	.db #0x57	; 87	'W'
      000237 68                    4591 	.db #0x68	; 104	'h'
      000238 69                    4592 	.db #0x69	; 105	'i'
      000239 74                    4593 	.db #0x74	; 116	't'
      00023A 65                    4594 	.db #0x65	; 101	'e'
      00023B 00                    4595 	.db #0x00	; 0
      00023C 57                    4596 	.db #0x57	; 87	'W'
      00023D 69                    4597 	.db #0x69	; 105	'i'
      00023E 6E                    4598 	.db #0x6e	; 110	'n'
      00023F 73                    4599 	.db #0x73	; 115	's'
      000240 00                    4600 	.db #0x00	; 0
      000241 00                    4601 	.db #0x00	; 0
      000242 00                    4602 	.db #0x00	; 0
                           000243  4603 Fmain$__xinit_blackWins$0_0$0 == .
      000243                       4604 __xinit__blackWins:
      000243 00                    4605 	.db #0x00	; 0
      000244 00                    4606 	.db #0x00	; 0
      000245 00                    4607 	.db #0x00	; 0
      000246 42                    4608 	.db #0x42	; 66	'B'
      000247 6C                    4609 	.db #0x6c	; 108	'l'
      000248 61                    4610 	.db #0x61	; 97	'a'
      000249 63                    4611 	.db #0x63	; 99	'c'
      00024A 6B                    4612 	.db #0x6b	; 107	'k'
      00024B 00                    4613 	.db #0x00	; 0
      00024C 57                    4614 	.db #0x57	; 87	'W'
      00024D 69                    4615 	.db #0x69	; 105	'i'
      00024E 6E                    4616 	.db #0x6e	; 110	'n'
      00024F 73                    4617 	.db #0x73	; 115	's'
      000250 00                    4618 	.db #0x00	; 0
      000251 00                    4619 	.db #0x00	; 0
      000252 00                    4620 	.db #0x00	; 0
                           000253  4621 Fmain$__xinit_blackKing$0_0$0 == .
      000253                       4622 __xinit__blackKing:
      000253 FF                    4623 	.db #0xff	; 255
      000254 FF                    4624 	.db #0xff	; 255
      000255 DB                    4625 	.db #0xdb	; 219
      000256 FF                    4626 	.db #0xff	; 255
      000257 66                    4627 	.db #0x66	; 102	'f'
      000258 FF                    4628 	.db #0xff	; 255
      000259 81                    4629 	.db #0x81	; 129
      00025A FF                    4630 	.db #0xff	; 255
      00025B 81                    4631 	.db #0x81	; 129
      00025C FF                    4632 	.db #0xff	; 255
      00025D C3                    4633 	.db #0xc3	; 195
      00025E FF                    4634 	.db #0xff	; 255
      00025F FF                    4635 	.db #0xff	; 255
      000260 FF                    4636 	.db #0xff	; 255
      000261 FF                    4637 	.db #0xff	; 255
      000262 FF                    4638 	.db #0xff	; 255
                           000263  4639 Fmain$__xinit_whiteKing$0_0$0 == .
      000263                       4640 __xinit__whiteKing:
      000263 FF                    4641 	.db #0xff	; 255
      000264 00                    4642 	.db #0x00	; 0
      000265 DB                    4643 	.db #0xdb	; 219
      000266 24                    4644 	.db #0x24	; 36
      000267 66                    4645 	.db #0x66	; 102	'f'
      000268 99                    4646 	.db #0x99	; 153
      000269 81                    4647 	.db #0x81	; 129
      00026A 7E                    4648 	.db #0x7e	; 126
      00026B 81                    4649 	.db #0x81	; 129
      00026C 7E                    4650 	.db #0x7e	; 126
      00026D C3                    4651 	.db #0xc3	; 195
      00026E 3C                    4652 	.db #0x3c	; 60
      00026F FF                    4653 	.db #0xff	; 255
      000270 00                    4654 	.db #0x00	; 0
      000271 FF                    4655 	.db #0xff	; 255
      000272 00                    4656 	.db #0x00	; 0
                           000273  4657 Fmain$__xinit_blackPieces$0_0$0 == .
      000273                       4658 __xinit__blackPieces:
      000273 2C                    4659 	.db #0x2c	; 44
      000274 1C                    4660 	.db #0x1c	; 28
      000275 00                    4661 	.db #0x00	;  0
      000276 4C                    4662 	.db #0x4c	; 76	'L'
      000277 1C                    4663 	.db #0x1c	; 28
      000278 00                    4664 	.db #0x00	;  0
      000279 6C                    4665 	.db #0x6c	; 108	'l'
      00027A 1C                    4666 	.db #0x1c	; 28
      00027B 00                    4667 	.db #0x00	;  0
      00027C 8C                    4668 	.db #0x8c	; 140
      00027D 1C                    4669 	.db #0x1c	; 28
      00027E 00                    4670 	.db #0x00	;  0
      00027F 1C                    4671 	.db #0x1c	; 28
      000280 2C                    4672 	.db #0x2c	; 44
      000281 00                    4673 	.db #0x00	;  0
      000282 3C                    4674 	.db #0x3c	; 60
      000283 2C                    4675 	.db #0x2c	; 44
      000284 00                    4676 	.db #0x00	;  0
      000285 5C                    4677 	.db #0x5c	; 92
      000286 2C                    4678 	.db #0x2c	; 44
      000287 00                    4679 	.db #0x00	;  0
      000288 7C                    4680 	.db #0x7c	; 124
      000289 2C                    4681 	.db #0x2c	; 44
      00028A 00                    4682 	.db #0x00	;  0
      00028B 2C                    4683 	.db #0x2c	; 44
      00028C 3C                    4684 	.db #0x3c	; 60
      00028D 00                    4685 	.db #0x00	;  0
      00028E 4C                    4686 	.db #0x4c	; 76	'L'
      00028F 3C                    4687 	.db #0x3c	; 60
      000290 00                    4688 	.db #0x00	;  0
      000291 6C                    4689 	.db #0x6c	; 108	'l'
      000292 3C                    4690 	.db #0x3c	; 60
      000293 00                    4691 	.db #0x00	;  0
      000294 8C                    4692 	.db #0x8c	; 140
      000295 3C                    4693 	.db #0x3c	; 60
      000296 00                    4694 	.db #0x00	;  0
                           000297  4695 Fmain$__xinit_whitePieces$0_0$0 == .
      000297                       4696 __xinit__whitePieces:
      000297 1C                    4697 	.db #0x1c	; 28
      000298 8C                    4698 	.db #0x8c	; 140
      000299 00                    4699 	.db #0x00	;  0
      00029A 3C                    4700 	.db #0x3c	; 60
      00029B 8C                    4701 	.db #0x8c	; 140
      00029C 00                    4702 	.db #0x00	;  0
      00029D 5C                    4703 	.db #0x5c	; 92
      00029E 8C                    4704 	.db #0x8c	; 140
      00029F 00                    4705 	.db #0x00	;  0
      0002A0 7C                    4706 	.db #0x7c	; 124
      0002A1 8C                    4707 	.db #0x8c	; 140
      0002A2 00                    4708 	.db #0x00	;  0
      0002A3 2C                    4709 	.db #0x2c	; 44
      0002A4 7C                    4710 	.db #0x7c	; 124
      0002A5 00                    4711 	.db #0x00	;  0
      0002A6 4C                    4712 	.db #0x4c	; 76	'L'
      0002A7 7C                    4713 	.db #0x7c	; 124
      0002A8 00                    4714 	.db #0x00	;  0
      0002A9 6C                    4715 	.db #0x6c	; 108	'l'
      0002AA 7C                    4716 	.db #0x7c	; 124
      0002AB 00                    4717 	.db #0x00	;  0
      0002AC 8C                    4718 	.db #0x8c	; 140
      0002AD 7C                    4719 	.db #0x7c	; 124
      0002AE 00                    4720 	.db #0x00	;  0
      0002AF 1C                    4721 	.db #0x1c	; 28
      0002B0 6C                    4722 	.db #0x6c	; 108	'l'
      0002B1 00                    4723 	.db #0x00	;  0
      0002B2 3C                    4724 	.db #0x3c	; 60
      0002B3 6C                    4725 	.db #0x6c	; 108	'l'
      0002B4 00                    4726 	.db #0x00	;  0
      0002B5 5C                    4727 	.db #0x5c	; 92
      0002B6 6C                    4728 	.db #0x6c	; 108	'l'
      0002B7 00                    4729 	.db #0x00	;  0
      0002B8 7C                    4730 	.db #0x7c	; 124
      0002B9 6C                    4731 	.db #0x6c	; 108	'l'
      0002BA 00                    4732 	.db #0x00	;  0
                                   4733 	.area _CABS (ABS)
