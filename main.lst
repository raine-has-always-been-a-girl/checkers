                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.2 #13350 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _checkCollision
                                     13 	.globl _testMoves
                                     14 	.globl _testValidMove
                                     15 	.globl _isCaptureMove
                                     16 	.globl _isValidMove
                                     17 	.globl _capture
                                     18 	.globl _isMoveWithinBoard
                                     19 	.globl _modifyCoordinates
                                     20 	.globl _printWhite
                                     21 	.globl _printBlack
                                     22 	.globl _printSquare
                                     23 	.globl _printbkg
                                     24 	.globl _printTurn
                                     25 	.globl _font
                                     26 	.globl _dpad
                                     27 	.globl _moveSquare
                                     28 	.globl _font_set
                                     29 	.globl _font_load
                                     30 	.globl _font_init
                                     31 	.globl _abs
                                     32 	.globl _set_sprite_data
                                     33 	.globl _set_win_tiles
                                     34 	.globl _set_bkg_tiles
                                     35 	.globl _set_bkg_data
                                     36 	.globl _joypad
                                     37 	.globl _delay
                                     38 	.globl _whitePieces
                                     39 	.globl _blackPieces
                                     40 	.globl _whiteKing
                                     41 	.globl _blackKing
                                     42 	.globl _currentPlayerWhiteText
                                     43 	.globl _currentPlayerBlackText
                                     44 	.globl _white_piece
                                     45 	.globl _black_piece
                                     46 	.globl _squareBR
                                     47 	.globl _squareBL
                                     48 	.globl _squareTR
                                     49 	.globl _squareTL
                                     50 	.globl _map
                                     51 	.globl _tile3
                                     52 	.globl _tile2
                                     53 	.globl _tile1
                                     54 	.globl _pieceSelected
                                     55 	.globl _selectedCoords
                                     56 	.globl _currentPlayer
                                     57 	.globl _cursory
                                     58 	.globl _cursorx
                                     59 	.globl _selectedPieceIndex
                                     60 	.globl _debounceTimer
                                     61 	.globl _lastButtonState
                                     62 	.globl _joypad_input
                                     63 ;--------------------------------------------------------
                                     64 ; special function registers
                                     65 ;--------------------------------------------------------
                                     66 ;--------------------------------------------------------
                                     67 ; ram data
                                     68 ;--------------------------------------------------------
                                     69 	.area _DATA
                           000000    70 G$joypad_input$0_0$0==.
      000000                         71 _joypad_input::
      000000                         72 	.ds 1
                                     73 ;--------------------------------------------------------
                                     74 ; ram data
                                     75 ;--------------------------------------------------------
                                     76 	.area _INITIALIZED
                           000000    77 G$lastButtonState$0_0$0==.
      000000                         78 _lastButtonState::
      000000                         79 	.ds 1
                           000001    80 G$debounceTimer$0_0$0==.
      000001                         81 _debounceTimer::
      000001                         82 	.ds 2
                           000003    83 G$selectedPieceIndex$0_0$0==.
      000003                         84 _selectedPieceIndex::
      000003                         85 	.ds 2
                           000005    86 G$cursorx$0_0$0==.
      000005                         87 _cursorx::
      000005                         88 	.ds 1
                           000006    89 G$cursory$0_0$0==.
      000006                         90 _cursory::
      000006                         91 	.ds 1
                           000007    92 G$currentPlayer$0_0$0==.
      000007                         93 _currentPlayer::
      000007                         94 	.ds 1
                           000008    95 G$selectedCoords$0_0$0==.
      000008                         96 _selectedCoords::
      000008                         97 	.ds 2
                           00000A    98 G$pieceSelected$0_0$0==.
      00000A                         99 _pieceSelected::
      00000A                        100 	.ds 1
                           00000B   101 G$tile1$0_0$0==.
      00000B                        102 _tile1::
      00000B                        103 	.ds 16
                           00001B   104 G$tile2$0_0$0==.
      00001B                        105 _tile2::
      00001B                        106 	.ds 16
                           00002B   107 G$tile3$0_0$0==.
      00002B                        108 _tile3::
      00002B                        109 	.ds 16
                           00003B   110 G$map$0_0$0==.
      00003B                        111 _map::
      00003B                        112 	.ds 360
                           0001A3   113 G$squareTL$0_0$0==.
      0001A3                        114 _squareTL::
      0001A3                        115 	.ds 16
                           0001B3   116 G$squareTR$0_0$0==.
      0001B3                        117 _squareTR::
      0001B3                        118 	.ds 16
                           0001C3   119 G$squareBL$0_0$0==.
      0001C3                        120 _squareBL::
      0001C3                        121 	.ds 16
                           0001D3   122 G$squareBR$0_0$0==.
      0001D3                        123 _squareBR::
      0001D3                        124 	.ds 16
                           0001E3   125 G$black_piece$0_0$0==.
      0001E3                        126 _black_piece::
      0001E3                        127 	.ds 16
                           0001F3   128 G$white_piece$0_0$0==.
      0001F3                        129 _white_piece::
      0001F3                        130 	.ds 16
                           000203   131 G$currentPlayerBlackText$0_0$0==.
      000203                        132 _currentPlayerBlackText::
      000203                        133 	.ds 16
                           000213   134 G$currentPlayerWhiteText$0_0$0==.
      000213                        135 _currentPlayerWhiteText::
      000213                        136 	.ds 16
                           000223   137 G$blackKing$0_0$0==.
      000223                        138 _blackKing::
      000223                        139 	.ds 16
                           000233   140 G$whiteKing$0_0$0==.
      000233                        141 _whiteKing::
      000233                        142 	.ds 16
                           000243   143 G$blackPieces$0_0$0==.
      000243                        144 _blackPieces::
      000243                        145 	.ds 36
                           000267   146 G$whitePieces$0_0$0==.
      000267                        147 _whitePieces::
      000267                        148 	.ds 36
                                    149 ;--------------------------------------------------------
                                    150 ; absolute external ram data
                                    151 ;--------------------------------------------------------
                                    152 	.area _DABS (ABS)
                                    153 ;--------------------------------------------------------
                                    154 ; global & static initialisations
                                    155 ;--------------------------------------------------------
                                    156 	.area _HOME
                                    157 	.area _GSINIT
                                    158 	.area _GSFINAL
                                    159 	.area _GSINIT
                                    160 ;--------------------------------------------------------
                                    161 ; Home
                                    162 ;--------------------------------------------------------
                                    163 	.area _HOME
                                    164 	.area _HOME
                                    165 ;--------------------------------------------------------
                                    166 ; code
                                    167 ;--------------------------------------------------------
                                    168 	.area _CODE
                           000000   169 	G$moveSquare$0$0	= .
                                    170 	.globl	G$moveSquare$0$0
                           000000   171 	C$main.c$96$0_0$125	= .
                                    172 	.globl	C$main.c$96$0_0$125
                                    173 ;main.c:96: void moveSquare() {
                                    174 ;	---------------------------------
                                    175 ; Function moveSquare
                                    176 ; ---------------------------------
      000000                        177 _moveSquare::
                                    178 ;main.c:97: move_sprite(0, cursorx - 4, cursory - 4);
      000000 FAr06r00         [16]  179 	ld	a, (#_cursory)
      000003 C6 FC            [ 8]  180 	add	a, #0xfc
      000005 47               [ 4]  181 	ld	b, a
      000006 FAr05r00         [16]  182 	ld	a, (#_cursorx)
      000009 C6 FC            [ 8]  183 	add	a, #0xfc
      00000B 4F               [ 4]  184 	ld	c, a
                                    185 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      00000C 21r00r00         [12]  186 	ld	hl, #_shadow_OAM
                                    187 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      00000F 78               [ 4]  188 	ld	a, b
      000010 22               [ 8]  189 	ld	(hl+), a
      000011 71               [ 8]  190 	ld	(hl), c
                                    191 ;main.c:98: move_sprite(1, cursorx + 4, cursory - 4);
      000012 FAr06r00         [16]  192 	ld	a, (#_cursory)
      000015 C6 FC            [ 8]  193 	add	a, #0xfc
      000017 47               [ 4]  194 	ld	b, a
      000018 FAr05r00         [16]  195 	ld	a, (#_cursorx)
      00001B C6 04            [ 8]  196 	add	a, #0x04
      00001D 4F               [ 4]  197 	ld	c, a
                                    198 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      00001E 21r04r00         [12]  199 	ld	hl, #(_shadow_OAM + 4)
                                    200 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      000021 78               [ 4]  201 	ld	a, b
      000022 22               [ 8]  202 	ld	(hl+), a
      000023 71               [ 8]  203 	ld	(hl), c
                                    204 ;main.c:99: move_sprite(2, cursorx - 4, cursory + 4);
      000024 FAr06r00         [16]  205 	ld	a, (#_cursory)
      000027 C6 04            [ 8]  206 	add	a, #0x04
      000029 47               [ 4]  207 	ld	b, a
      00002A FAr05r00         [16]  208 	ld	a, (#_cursorx)
      00002D C6 FC            [ 8]  209 	add	a, #0xfc
      00002F 4F               [ 4]  210 	ld	c, a
                                    211 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      000030 21r08r00         [12]  212 	ld	hl, #(_shadow_OAM + 8)
                                    213 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      000033 78               [ 4]  214 	ld	a, b
      000034 22               [ 8]  215 	ld	(hl+), a
      000035 71               [ 8]  216 	ld	(hl), c
                                    217 ;main.c:100: move_sprite(3, cursorx + 4, cursory + 4);
      000036 FAr06r00         [16]  218 	ld	a, (#_cursory)
      000039 C6 04            [ 8]  219 	add	a, #0x04
      00003B 47               [ 4]  220 	ld	b, a
      00003C FAr05r00         [16]  221 	ld	a, (#_cursorx)
      00003F C6 04            [ 8]  222 	add	a, #0x04
      000041 4F               [ 4]  223 	ld	c, a
                                    224 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      000042 21r0Cr00         [12]  225 	ld	hl, #(_shadow_OAM + 12)
                                    226 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      000045 78               [ 4]  227 	ld	a, b
      000046 22               [ 8]  228 	ld	(hl+), a
      000047 71               [ 8]  229 	ld	(hl), c
                           000048   230 	C$main.c$100$3_0$125	= .
                                    231 	.globl	C$main.c$100$3_0$125
                                    232 ;main.c:100: move_sprite(3, cursorx + 4, cursory + 4);
                           000048   233 	C$main.c$101$3_0$125	= .
                                    234 	.globl	C$main.c$101$3_0$125
                                    235 ;main.c:101: }
                           000048   236 	C$main.c$101$3_0$125	= .
                                    237 	.globl	C$main.c$101$3_0$125
                           000048   238 	XG$moveSquare$0$0	= .
                                    239 	.globl	XG$moveSquare$0$0
      000048 C9               [16]  240 	ret
                           000049   241 	G$dpad$0$0	= .
                                    242 	.globl	G$dpad$0$0
                           000049   243 	C$main.c$119$3_0$138	= .
                                    244 	.globl	C$main.c$119$3_0$138
                                    245 ;main.c:119: void dpad() {
                                    246 ;	---------------------------------
                                    247 ; Function dpad
                                    248 ; ---------------------------------
      000049                        249 _dpad::
                           000049   250 	C$main.c$120$1_0$138	= .
                                    251 	.globl	C$main.c$120$1_0$138
                                    252 ;main.c:120: if (joypad_input & J_RIGHT) {
      000049 21r00r00         [12]  253 	ld	hl, #_joypad_input
      00004C 4E               [ 8]  254 	ld	c, (hl)
      00004D CB 41            [ 8]  255 	bit	0, c
      00004F 28 07            [12]  256 	jr	Z, 00102$
                           000051   257 	C$main.c$121$2_0$139	= .
                                    258 	.globl	C$main.c$121$2_0$139
                                    259 ;main.c:121: cursorx = cursorx + SQUARE_SIZE;
      000051 21r05r00         [12]  260 	ld	hl, #_cursorx
      000054 7E               [ 8]  261 	ld	a, (hl)
      000055 C6 10            [ 8]  262 	add	a, #0x10
      000057 77               [ 8]  263 	ld	(hl), a
      000058                        264 00102$:
                           000058   265 	C$main.c$123$1_0$138	= .
                                    266 	.globl	C$main.c$123$1_0$138
                                    267 ;main.c:123: if (joypad_input & J_LEFT) {
      000058 CB 49            [ 8]  268 	bit	1, c
      00005A 28 07            [12]  269 	jr	Z, 00104$
                           00005C   270 	C$main.c$124$2_0$140	= .
                                    271 	.globl	C$main.c$124$2_0$140
                                    272 ;main.c:124: cursorx = cursorx - SQUARE_SIZE;
      00005C 21r05r00         [12]  273 	ld	hl, #_cursorx
      00005F 7E               [ 8]  274 	ld	a, (hl)
      000060 C6 F0            [ 8]  275 	add	a, #0xf0
      000062 77               [ 8]  276 	ld	(hl), a
      000063                        277 00104$:
                           000063   278 	C$main.c$126$1_0$138	= .
                                    279 	.globl	C$main.c$126$1_0$138
                                    280 ;main.c:126: if (joypad_input & J_UP) {
      000063 CB 51            [ 8]  281 	bit	2, c
      000065 28 07            [12]  282 	jr	Z, 00106$
                           000067   283 	C$main.c$127$2_0$141	= .
                                    284 	.globl	C$main.c$127$2_0$141
                                    285 ;main.c:127: cursory = cursory - SQUARE_SIZE;
      000067 21r06r00         [12]  286 	ld	hl, #_cursory
      00006A 7E               [ 8]  287 	ld	a, (hl)
      00006B C6 F0            [ 8]  288 	add	a, #0xf0
      00006D 77               [ 8]  289 	ld	(hl), a
      00006E                        290 00106$:
                           00006E   291 	C$main.c$129$1_0$138	= .
                                    292 	.globl	C$main.c$129$1_0$138
                                    293 ;main.c:129: if (joypad_input & J_DOWN) {
      00006E CB 59            [ 8]  294 	bit	3, c
      000070 CAr00r00         [16]  295 	jp	Z,_moveSquare
                           000073   296 	C$main.c$130$2_0$142	= .
                                    297 	.globl	C$main.c$130$2_0$142
                                    298 ;main.c:130: cursory = cursory + SQUARE_SIZE;
      000073 21r06r00         [12]  299 	ld	hl, #_cursory
      000076 7E               [ 8]  300 	ld	a, (hl)
      000077 C6 10            [ 8]  301 	add	a, #0x10
      000079 77               [ 8]  302 	ld	(hl), a
                           00007A   303 	C$main.c$132$1_0$138	= .
                                    304 	.globl	C$main.c$132$1_0$138
                                    305 ;main.c:132: moveSquare();
                           00007A   306 	C$main.c$133$1_0$138	= .
                                    307 	.globl	C$main.c$133$1_0$138
                                    308 ;main.c:133: }
                           00007A   309 	C$main.c$133$1_0$138	= .
                                    310 	.globl	C$main.c$133$1_0$138
                           00007A   311 	XG$dpad$0$0	= .
                                    312 	.globl	XG$dpad$0$0
      00007A C3r00r00         [16]  313 	jp	_moveSquare
                           00007D   314 	G$font$0$0	= .
                                    315 	.globl	G$font$0$0
                           00007D   316 	C$main.c$134$1_0$143	= .
                                    317 	.globl	C$main.c$134$1_0$143
                                    318 ;main.c:134: void font() {
                                    319 ;	---------------------------------
                                    320 ; Function font
                                    321 ; ---------------------------------
      00007D                        322 _font::
                           00007D   323 	C$main.c$136$1_0$143	= .
                                    324 	.globl	C$main.c$136$1_0$143
                                    325 ;main.c:136: font_init();
      00007D CDr00r00         [24]  326 	call	_font_init
                           000080   327 	C$main.c$137$1_0$143	= .
                                    328 	.globl	C$main.c$137$1_0$143
                                    329 ;main.c:137: min_font = font_load(font_ibm_fixed);
      000080 11r00r00         [12]  330 	ld	de, #_font_ibm_fixed
      000083 D5               [16]  331 	push	de
      000084 CDr00r00         [24]  332 	call	_font_load
      000087 E1               [12]  333 	pop	hl
                           000088   334 	C$main.c$138$1_0$143	= .
                                    335 	.globl	C$main.c$138$1_0$143
                                    336 ;main.c:138: font_set(min_font);
      000088 D5               [16]  337 	push	de
      000089 CDr00r00         [24]  338 	call	_font_set
      00008C E1               [12]  339 	pop	hl
                           00008D   340 	C$main.c$139$1_0$143	= .
                                    341 	.globl	C$main.c$139$1_0$143
                                    342 ;main.c:139: }
                           00008D   343 	C$main.c$139$1_0$143	= .
                                    344 	.globl	C$main.c$139$1_0$143
                           00008D   345 	XG$font$0$0	= .
                                    346 	.globl	XG$font$0$0
      00008D C9               [16]  347 	ret
                           00008E   348 	G$printTurn$0$0	= .
                                    349 	.globl	G$printTurn$0$0
                           00008E   350 	C$main.c$140$1_0$144	= .
                                    351 	.globl	C$main.c$140$1_0$144
                                    352 ;main.c:140: void printTurn() {
                                    353 ;	---------------------------------
                                    354 ; Function printTurn
                                    355 ; ---------------------------------
      00008E                        356 _printTurn::
                           00008E   357 	C$main.c$141$1_0$144	= .
                                    358 	.globl	C$main.c$141$1_0$144
                                    359 ;main.c:141: if (currentPlayer == BLACK_PLAYER){
      00008E FAr07r00         [16]  360 	ld	a, (#_currentPlayer)
      000091 B7               [ 4]  361 	or	a, a
      000092 20 13            [12]  362 	jr	NZ, 00102$
                           000094   363 	C$main.c$142$2_0$145	= .
                                    364 	.globl	C$main.c$142$2_0$145
                                    365 ;main.c:142: set_win_tiles(2, 0, 16, 1, currentPlayerBlackText);
      000094 11r03r02         [12]  366 	ld	de, #_currentPlayerBlackText
      000097 D5               [16]  367 	push	de
      000098 21 10 01         [12]  368 	ld	hl, #0x110
      00009B E5               [16]  369 	push	hl
      00009C 21 02 00         [12]  370 	ld	hl, #0x02
      00009F E5               [16]  371 	push	hl
      0000A0 CDr00r00         [24]  372 	call	_set_win_tiles
      0000A3 E8 06            [16]  373 	add	sp, #6
      0000A5 18 11            [12]  374 	jr	00103$
      0000A7                        375 00102$:
                           0000A7   376 	C$main.c$144$2_0$146	= .
                                    377 	.globl	C$main.c$144$2_0$146
                                    378 ;main.c:144: set_win_tiles(2, 0, 16, 1, currentPlayerWhiteText);
      0000A7 11r13r02         [12]  379 	ld	de, #_currentPlayerWhiteText
      0000AA D5               [16]  380 	push	de
      0000AB 21 10 01         [12]  381 	ld	hl, #0x110
      0000AE E5               [16]  382 	push	hl
      0000AF 21 02 00         [12]  383 	ld	hl, #0x02
      0000B2 E5               [16]  384 	push	hl
      0000B3 CDr00r00         [24]  385 	call	_set_win_tiles
      0000B6 E8 06            [16]  386 	add	sp, #6
      0000B8                        387 00103$:
                                    388 ;c:/gbdk/include/gb/gb.h:1468: WX_REG=x, WY_REG=y;
      0000B8 3E 07            [ 8]  389 	ld	a, #0x07
      0000BA E0r00            [12]  390 	ldh	(_WX_REG + 0), a
      0000BC 3E 88            [ 8]  391 	ld	a, #0x88
      0000BE E0r00            [12]  392 	ldh	(_WY_REG + 0), a
                           0000C0   393 	C$main.c$146$3_0$144	= .
                                    394 	.globl	C$main.c$146$3_0$144
                                    395 ;main.c:146: move_win(7, 136);
                           0000C0   396 	C$main.c$147$3_0$144	= .
                                    397 	.globl	C$main.c$147$3_0$144
                                    398 ;main.c:147: }
                           0000C0   399 	C$main.c$147$3_0$144	= .
                                    400 	.globl	C$main.c$147$3_0$144
                           0000C0   401 	XG$printTurn$0$0	= .
                                    402 	.globl	XG$printTurn$0$0
      0000C0 C9               [16]  403 	ret
                           0000C1   404 	G$printbkg$0$0	= .
                                    405 	.globl	G$printbkg$0$0
                           0000C1   406 	C$main.c$148$3_0$150	= .
                                    407 	.globl	C$main.c$148$3_0$150
                                    408 ;main.c:148: void printbkg() {
                                    409 ;	---------------------------------
                                    410 ; Function printbkg
                                    411 ; ---------------------------------
      0000C1                        412 _printbkg::
                           0000C1   413 	C$main.c$149$1_0$150	= .
                                    414 	.globl	C$main.c$149$1_0$150
                                    415 ;main.c:149: set_bkg_data(1, 1, tile1);
      0000C1 11r0Br00         [12]  416 	ld	de, #_tile1
      0000C4 D5               [16]  417 	push	de
      0000C5 21 01 01         [12]  418 	ld	hl, #0x101
      0000C8 E5               [16]  419 	push	hl
      0000C9 CDr00r00         [24]  420 	call	_set_bkg_data
      0000CC E8 04            [16]  421 	add	sp, #4
                           0000CE   422 	C$main.c$150$1_0$150	= .
                                    423 	.globl	C$main.c$150$1_0$150
                                    424 ;main.c:150: set_bkg_data(2, 1, tile2);
      0000CE 11r1Br00         [12]  425 	ld	de, #_tile2
      0000D1 D5               [16]  426 	push	de
      0000D2 21 02 01         [12]  427 	ld	hl, #0x102
      0000D5 E5               [16]  428 	push	hl
      0000D6 CDr00r00         [24]  429 	call	_set_bkg_data
      0000D9 E8 04            [16]  430 	add	sp, #4
                           0000DB   431 	C$main.c$151$1_0$150	= .
                                    432 	.globl	C$main.c$151$1_0$150
                                    433 ;main.c:151: set_bkg_data(3, 1, tile3);
      0000DB 11r2Br00         [12]  434 	ld	de, #_tile3
      0000DE D5               [16]  435 	push	de
      0000DF 21 03 01         [12]  436 	ld	hl, #0x103
      0000E2 E5               [16]  437 	push	hl
      0000E3 CDr00r00         [24]  438 	call	_set_bkg_data
      0000E6 E8 04            [16]  439 	add	sp, #4
                           0000E8   440 	C$main.c$152$1_0$150	= .
                                    441 	.globl	C$main.c$152$1_0$150
                                    442 ;main.c:152: set_bkg_tiles(0, 0, 20, 18, map);
      0000E8 11r3Br00         [12]  443 	ld	de, #_map
      0000EB D5               [16]  444 	push	de
      0000EC 21 14 12         [12]  445 	ld	hl, #0x1214
      0000EF E5               [16]  446 	push	hl
      0000F0 AF               [ 4]  447 	xor	a, a
      0000F1 0F               [ 4]  448 	rrca
      0000F2 F5               [16]  449 	push	af
      0000F3 CDr00r00         [24]  450 	call	_set_bkg_tiles
      0000F6 E8 06            [16]  451 	add	sp, #6
                           0000F8   452 	C$main.c$153$1_0$150	= .
                                    453 	.globl	C$main.c$153$1_0$150
                                    454 ;main.c:153: }
                           0000F8   455 	C$main.c$153$1_0$150	= .
                                    456 	.globl	C$main.c$153$1_0$150
                           0000F8   457 	XG$printbkg$0$0	= .
                                    458 	.globl	XG$printbkg$0$0
      0000F8 C9               [16]  459 	ret
                           0000F9   460 	G$printSquare$0$0	= .
                                    461 	.globl	G$printSquare$0$0
                           0000F9   462 	C$main.c$154$1_0$151	= .
                                    463 	.globl	C$main.c$154$1_0$151
                                    464 ;main.c:154: void printSquare() {
                                    465 ;	---------------------------------
                                    466 ; Function printSquare
                                    467 ; ---------------------------------
      0000F9                        468 _printSquare::
                           0000F9   469 	C$main.c$155$1_0$151	= .
                                    470 	.globl	C$main.c$155$1_0$151
                                    471 ;main.c:155: set_sprite_data(0, 1, squareTL);
      0000F9 11rA3r01         [12]  472 	ld	de, #_squareTL
      0000FC D5               [16]  473 	push	de
      0000FD AF               [ 4]  474 	xor	a, a
      0000FE 3C               [ 4]  475 	inc	a
      0000FF F5               [16]  476 	push	af
      000100 CDr00r00         [24]  477 	call	_set_sprite_data
      000103 E8 04            [16]  478 	add	sp, #4
                           000105   479 	C$main.c$156$1_0$151	= .
                                    480 	.globl	C$main.c$156$1_0$151
                                    481 ;main.c:156: set_sprite_data(1, 1, squareTR);
      000105 11rB3r01         [12]  482 	ld	de, #_squareTR
      000108 D5               [16]  483 	push	de
      000109 21 01 01         [12]  484 	ld	hl, #0x101
      00010C E5               [16]  485 	push	hl
      00010D CDr00r00         [24]  486 	call	_set_sprite_data
      000110 E8 04            [16]  487 	add	sp, #4
                           000112   488 	C$main.c$157$1_0$151	= .
                                    489 	.globl	C$main.c$157$1_0$151
                                    490 ;main.c:157: set_sprite_data(2, 1, squareBL);
      000112 11rC3r01         [12]  491 	ld	de, #_squareBL
      000115 D5               [16]  492 	push	de
      000116 21 02 01         [12]  493 	ld	hl, #0x102
      000119 E5               [16]  494 	push	hl
      00011A CDr00r00         [24]  495 	call	_set_sprite_data
      00011D E8 04            [16]  496 	add	sp, #4
                           00011F   497 	C$main.c$158$1_0$151	= .
                                    498 	.globl	C$main.c$158$1_0$151
                                    499 ;main.c:158: set_sprite_data(3, 1, squareBR);
      00011F 11rD3r01         [12]  500 	ld	de, #_squareBR
      000122 D5               [16]  501 	push	de
      000123 3E 01            [ 8]  502 	ld	a, #0x01
      000125 F5               [16]  503 	push	af
      000126 33               [ 8]  504 	inc	sp
      000127 3E 03            [ 8]  505 	ld	a, #0x03
      000129 F5               [16]  506 	push	af
      00012A 33               [ 8]  507 	inc	sp
      00012B CDr00r00         [24]  508 	call	_set_sprite_data
      00012E E8 04            [16]  509 	add	sp, #4
                                    510 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      000130 21r02r00         [12]  511 	ld	hl, #(_shadow_OAM + 2)
      000133 36 00            [12]  512 	ld	(hl), #0x00
      000135 21r06r00         [12]  513 	ld	hl, #(_shadow_OAM + 6)
      000138 36 01            [12]  514 	ld	(hl), #0x01
      00013A 21r0Ar00         [12]  515 	ld	hl, #(_shadow_OAM + 10)
      00013D 36 02            [12]  516 	ld	(hl), #0x02
      00013F 21r0Er00         [12]  517 	ld	hl, #(_shadow_OAM + 14)
      000142 36 03            [12]  518 	ld	(hl), #0x03
                           000144   519 	C$main.c$163$1_0$151	= .
                                    520 	.globl	C$main.c$163$1_0$151
                                    521 ;main.c:163: moveSquare();
                           000144   522 	C$main.c$164$1_0$151	= .
                                    523 	.globl	C$main.c$164$1_0$151
                                    524 ;main.c:164: }
                           000144   525 	C$main.c$164$1_0$151	= .
                                    526 	.globl	C$main.c$164$1_0$151
                           000144   527 	XG$printSquare$0$0	= .
                                    528 	.globl	XG$printSquare$0$0
      000144 C3r00r00         [16]  529 	jp	_moveSquare
                           000147   530 	G$printBlack$0$0	= .
                                    531 	.globl	G$printBlack$0$0
                           000147   532 	C$main.c$165$1_0$164	= .
                                    533 	.globl	C$main.c$165$1_0$164
                                    534 ;main.c:165: void printBlack() {
                                    535 ;	---------------------------------
                                    536 ; Function printBlack
                                    537 ; ---------------------------------
      000147                        538 _printBlack::
      000147 E8 FA            [16]  539 	add	sp, #-6
                           000149   540 	C$main.c$166$1_0$164	= .
                                    541 	.globl	C$main.c$166$1_0$164
                                    542 ;main.c:166: set_sprite_data(4, 12, black_piece);
      000149 11rE3r01         [12]  543 	ld	de, #_black_piece
      00014C D5               [16]  544 	push	de
      00014D 21 04 0C         [12]  545 	ld	hl, #0xc04
      000150 E5               [16]  546 	push	hl
      000151 CDr00r00         [24]  547 	call	_set_sprite_data
      000154 E8 04            [16]  548 	add	sp, #4
                           000156   549 	C$main.c$167$1_0$164	= .
                                    550 	.globl	C$main.c$167$1_0$164
                                    551 ;main.c:167: set_sprite_data(8, 12, blackKing);
      000156 11r23r02         [12]  552 	ld	de, #_blackKing
      000159 D5               [16]  553 	push	de
      00015A 21 08 0C         [12]  554 	ld	hl, #0xc08
      00015D E5               [16]  555 	push	hl
      00015E CDr00r00         [24]  556 	call	_set_sprite_data
      000161 E8 04            [16]  557 	add	sp, #4
                           000163   558 	C$main.c$169$3_0$166	= .
                                    559 	.globl	C$main.c$169$3_0$166
                                    560 ;main.c:169: for (int i = 0; i < 12; i++){
      000163 AF               [ 4]  561 	xor	a, a
      000164 F8 04            [12]  562 	ldhl	sp,	#4
      000166 22               [ 8]  563 	ld	(hl+), a
      000167 77               [ 8]  564 	ld	(hl), a
      000168                        565 00109$:
      000168 F8 04            [12]  566 	ldhl	sp,	#4
      00016A 2A               [ 8]  567 	ld	a, (hl+)
      00016B D6 0C            [ 8]  568 	sub	a, #0x0c
      00016D 7E               [ 8]  569 	ld	a, (hl)
      00016E DE 00            [ 8]  570 	sbc	a, #0x00
      000170 56               [ 8]  571 	ld	d, (hl)
      000171 3E 00            [ 8]  572 	ld	a, #0x00
      000173 CB 7F            [ 8]  573 	bit	7,a
      000175 28 07            [12]  574 	jr	Z, 00129$
      000177 CB 7A            [ 8]  575 	bit	7, d
      000179 20 08            [12]  576 	jr	NZ, 00130$
      00017B BF               [ 4]  577 	cp	a, a
      00017C 18 05            [12]  578 	jr	00130$
      00017E                        579 00129$:
      00017E CB 7A            [ 8]  580 	bit	7, d
      000180 28 01            [12]  581 	jr	Z, 00130$
      000182 37               [ 4]  582 	scf
      000183                        583 00130$:
      000183 D2r39r02         [16]  584 	jp	NC, 00111$
                           000186   585 	C$main.c$170$3_0$166	= .
                                    586 	.globl	C$main.c$170$3_0$166
                                    587 ;main.c:170: if (blackPieces[i].isKing) {
      000186 F8 04            [12]  588 	ldhl	sp,#4
      000188 2A               [ 8]  589 	ld	a, (hl+)
      000189 4F               [ 4]  590 	ld	c, a
      00018A 46               [ 8]  591 	ld	b, (hl)
      00018B 69               [ 4]  592 	ld	l, c
      00018C 60               [ 4]  593 	ld	h, b
      00018D 29               [ 8]  594 	add	hl, hl
      00018E 09               [ 8]  595 	add	hl, bc
      00018F 11r43r02         [12]  596 	ld	de, #_blackPieces
      000192 19               [ 8]  597 	add	hl, de
      000193 23               [ 8]  598 	inc	hl
      000194 23               [ 8]  599 	inc	hl
      000195 7E               [ 8]  600 	ld	a, (hl)
      000196 F8 02            [12]  601 	ldhl	sp,	#2
      000198 77               [ 8]  602 	ld	(hl), a
                           000199   603 	C$main.c$171$2_0$164	= .
                                    604 	.globl	C$main.c$171$2_0$164
                                    605 ;main.c:171: set_sprite_tile(i + 4, 8); // Use the black king sprite tile
      000199 F8 04            [12]  606 	ldhl	sp,	#4
      00019B 3A               [ 8]  607 	ld	a, (hl-)
      00019C C6 04            [ 8]  608 	add	a, #0x04
                           00019E   609 	C$main.c$170$3_0$166	= .
                                    610 	.globl	C$main.c$170$3_0$166
                                    611 ;main.c:170: if (blackPieces[i].isKing) {
      00019E 32               [ 8]  612 	ld	(hl-), a
      00019F CB 46            [12]  613 	bit	0, (hl)
      0001A1 28 33            [12]  614 	jr	Z, 00102$
                                    615 ;main.c:171: set_sprite_tile(i + 4, 8); // Use the black king sprite tile
                                    616 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      0001A3 23               [ 8]  617 	inc	hl
      0001A4 3A               [ 8]  618 	ld	a, (hl-)
      0001A5 22               [ 8]  619 	ld	(hl+), a
      0001A6 36 00            [12]  620 	ld	(hl), #0x00
      0001A8 3E 02            [ 8]  621 	ld	a, #0x02
      0001AA                        622 00131$:
      0001AA F8 02            [12]  623 	ldhl	sp,	#2
      0001AC CB 26            [16]  624 	sla	(hl)
      0001AE 23               [ 8]  625 	inc	hl
      0001AF CB 16            [16]  626 	rl	(hl)
      0001B1 3D               [ 4]  627 	dec	a
      0001B2 20 F6            [12]  628 	jr	NZ, 00131$
      0001B4 2B               [ 8]  629 	dec	hl
      0001B5 2A               [ 8]  630 	ld	a, (hl+)
      0001B6 5F               [ 4]  631 	ld	e, a
      0001B7 56               [ 8]  632 	ld	d, (hl)
      0001B8 21r00r00         [12]  633 	ld	hl, #_shadow_OAM
      0001BB 19               [ 8]  634 	add	hl, de
      0001BC 33               [ 8]  635 	inc	sp
      0001BD 33               [ 8]  636 	inc	sp
      0001BE 5D               [ 4]  637 	ld	e, l
      0001BF 54               [ 4]  638 	ld	d, h
      0001C0 D5               [16]  639 	push	de
      0001C1 21 02 00         [12]  640 	ld	hl, #0x0002
      0001C4 19               [ 8]  641 	add	hl, de
      0001C5 E5               [16]  642 	push	hl
      0001C6 7D               [ 4]  643 	ld	a, l
      0001C7 F8 04            [12]  644 	ldhl	sp,	#4
      0001C9 77               [ 8]  645 	ld	(hl), a
      0001CA E1               [12]  646 	pop	hl
      0001CB 7C               [ 4]  647 	ld	a, h
      0001CC F8 03            [12]  648 	ldhl	sp,	#3
      0001CE 32               [ 8]  649 	ld	(hl-), a
      0001CF 2A               [ 8]  650 	ld	a,	(hl+)
      0001D0 66               [ 8]  651 	ld	h, (hl)
      0001D1 6F               [ 4]  652 	ld	l, a
      0001D2 36 08            [12]  653 	ld	(hl), #0x08
                           0001D4   654 	C$main.c$171$3_0$166	= .
                                    655 	.globl	C$main.c$171$3_0$166
                                    656 ;main.c:171: set_sprite_tile(i + 4, 8); // Use the black king sprite tile
      0001D4 18 32            [12]  657 	jr	00103$
      0001D6                        658 00102$:
                                    659 ;main.c:173: set_sprite_tile(i + 4, 4); // Use the black regular piece sprite tile
                                    660 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      0001D6 F8 03            [12]  661 	ldhl	sp,	#3
      0001D8 3A               [ 8]  662 	ld	a, (hl-)
      0001D9 22               [ 8]  663 	ld	(hl+), a
      0001DA 36 00            [12]  664 	ld	(hl), #0x00
      0001DC 3E 02            [ 8]  665 	ld	a, #0x02
      0001DE                        666 00132$:
      0001DE F8 02            [12]  667 	ldhl	sp,	#2
      0001E0 CB 26            [16]  668 	sla	(hl)
      0001E2 23               [ 8]  669 	inc	hl
      0001E3 CB 16            [16]  670 	rl	(hl)
      0001E5 3D               [ 4]  671 	dec	a
      0001E6 20 F6            [12]  672 	jr	NZ, 00132$
      0001E8 2B               [ 8]  673 	dec	hl
      0001E9 2A               [ 8]  674 	ld	a, (hl+)
      0001EA 5F               [ 4]  675 	ld	e, a
      0001EB 56               [ 8]  676 	ld	d, (hl)
      0001EC 21r00r00         [12]  677 	ld	hl, #_shadow_OAM
      0001EF 19               [ 8]  678 	add	hl, de
      0001F0 33               [ 8]  679 	inc	sp
      0001F1 33               [ 8]  680 	inc	sp
      0001F2 5D               [ 4]  681 	ld	e, l
      0001F3 54               [ 4]  682 	ld	d, h
      0001F4 D5               [16]  683 	push	de
      0001F5 21 02 00         [12]  684 	ld	hl, #0x0002
      0001F8 19               [ 8]  685 	add	hl, de
      0001F9 E5               [16]  686 	push	hl
      0001FA 7D               [ 4]  687 	ld	a, l
      0001FB F8 04            [12]  688 	ldhl	sp,	#4
      0001FD 77               [ 8]  689 	ld	(hl), a
      0001FE E1               [12]  690 	pop	hl
      0001FF 7C               [ 4]  691 	ld	a, h
      000200 F8 03            [12]  692 	ldhl	sp,	#3
      000202 32               [ 8]  693 	ld	(hl-), a
      000203 2A               [ 8]  694 	ld	a,	(hl+)
      000204 66               [ 8]  695 	ld	h, (hl)
      000205 6F               [ 4]  696 	ld	l, a
      000206 36 04            [12]  697 	ld	(hl), #0x04
                           000208   698 	C$main.c$173$3_0$166	= .
                                    699 	.globl	C$main.c$173$3_0$166
                                    700 ;main.c:173: set_sprite_tile(i + 4, 4); // Use the black regular piece sprite tile
      000208                        701 00103$:
                                    702 ;main.c:175: move_sprite(i + 4, blackPieces[i].x, blackPieces[i].y);
      000208 F8 04            [12]  703 	ldhl	sp,#4
      00020A 2A               [ 8]  704 	ld	a, (hl+)
      00020B 4F               [ 4]  705 	ld	c, a
      00020C 46               [ 8]  706 	ld	b, (hl)
      00020D 69               [ 4]  707 	ld	l, c
      00020E 60               [ 4]  708 	ld	h, b
      00020F 29               [ 8]  709 	add	hl, hl
      000210 09               [ 8]  710 	add	hl, bc
      000211 11r43r02         [12]  711 	ld	de, #_blackPieces
      000214 19               [ 8]  712 	add	hl, de
      000215 4D               [ 4]  713 	ld	c, l
      000216 44               [ 4]  714 	ld	b, h
      000217 03               [ 8]  715 	inc	bc
      000218 0A               [ 8]  716 	ld	a, (bc)
      000219 5F               [ 4]  717 	ld	e, a
      00021A 4E               [ 8]  718 	ld	c, (hl)
      00021B F8 04            [12]  719 	ldhl	sp,	#4
      00021D 7E               [ 8]  720 	ld	a, (hl)
      00021E C6 04            [ 8]  721 	add	a, #0x04
                                    722 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      000220 6F               [ 4]  723 	ld	l, a
                                    724 ;	spillPairReg hl
                                    725 ;	spillPairReg hl
      000221 26 00            [ 8]  726 	ld	h, #0x00
                                    727 ;	spillPairReg hl
                                    728 ;	spillPairReg hl
      000223 29               [ 8]  729 	add	hl, hl
      000224 29               [ 8]  730 	add	hl, hl
      000225 D5               [16]  731 	push	de
      000226 11r00r00         [12]  732 	ld	de, #_shadow_OAM
      000229 19               [ 8]  733 	add	hl, de
      00022A D1               [12]  734 	pop	de
                                    735 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      00022B 7B               [ 4]  736 	ld	a, e
      00022C 22               [ 8]  737 	ld	(hl+), a
      00022D 71               [ 8]  738 	ld	(hl), c
                           00022E   739 	C$main.c$169$2_0$165	= .
                                    740 	.globl	C$main.c$169$2_0$165
                                    741 ;main.c:169: for (int i = 0; i < 12; i++){
      00022E F8 04            [12]  742 	ldhl	sp,	#4
      000230 34               [12]  743 	inc	(hl)
      000231 C2r68r01         [16]  744 	jp	NZ,00109$
      000234 23               [ 8]  745 	inc	hl
      000235 34               [12]  746 	inc	(hl)
      000236 C3r68r01         [16]  747 	jp	00109$
      000239                        748 00111$:
                           000239   749 	C$main.c$177$2_0$164	= .
                                    750 	.globl	C$main.c$177$2_0$164
                                    751 ;main.c:177: }
      000239 E8 06            [16]  752 	add	sp, #6
                           00023B   753 	C$main.c$177$2_0$164	= .
                                    754 	.globl	C$main.c$177$2_0$164
                           00023B   755 	XG$printBlack$0$0	= .
                                    756 	.globl	XG$printBlack$0$0
      00023B C9               [16]  757 	ret
                           00023C   758 	G$printWhite$0$0	= .
                                    759 	.globl	G$printWhite$0$0
                           00023C   760 	C$main.c$178$2_0$178	= .
                                    761 	.globl	C$main.c$178$2_0$178
                                    762 ;main.c:178: void printWhite() {
                                    763 ;	---------------------------------
                                    764 ; Function printWhite
                                    765 ; ---------------------------------
      00023C                        766 _printWhite::
      00023C E8 FA            [16]  767 	add	sp, #-6
                           00023E   768 	C$main.c$179$1_0$178	= .
                                    769 	.globl	C$main.c$179$1_0$178
                                    770 ;main.c:179: set_sprite_data(5, 12, white_piece);
      00023E 11rF3r01         [12]  771 	ld	de, #_white_piece
      000241 D5               [16]  772 	push	de
      000242 21 05 0C         [12]  773 	ld	hl, #0xc05
      000245 E5               [16]  774 	push	hl
      000246 CDr00r00         [24]  775 	call	_set_sprite_data
      000249 E8 04            [16]  776 	add	sp, #4
                           00024B   777 	C$main.c$180$1_0$178	= .
                                    778 	.globl	C$main.c$180$1_0$178
                                    779 ;main.c:180: set_sprite_data(20, 12, whiteKing);
      00024B 11r33r02         [12]  780 	ld	de, #_whiteKing
      00024E D5               [16]  781 	push	de
      00024F 21 14 0C         [12]  782 	ld	hl, #0xc14
      000252 E5               [16]  783 	push	hl
      000253 CDr00r00         [24]  784 	call	_set_sprite_data
      000256 E8 04            [16]  785 	add	sp, #4
                           000258   786 	C$main.c$182$3_0$180	= .
                                    787 	.globl	C$main.c$182$3_0$180
                                    788 ;main.c:182: for (int i = 0; i < 12; i++){
      000258 AF               [ 4]  789 	xor	a, a
      000259 F8 04            [12]  790 	ldhl	sp,	#4
      00025B 22               [ 8]  791 	ld	(hl+), a
      00025C 77               [ 8]  792 	ld	(hl), a
      00025D                        793 00109$:
      00025D F8 04            [12]  794 	ldhl	sp,	#4
      00025F 2A               [ 8]  795 	ld	a, (hl+)
      000260 D6 0C            [ 8]  796 	sub	a, #0x0c
      000262 7E               [ 8]  797 	ld	a, (hl)
      000263 DE 00            [ 8]  798 	sbc	a, #0x00
      000265 56               [ 8]  799 	ld	d, (hl)
      000266 3E 00            [ 8]  800 	ld	a, #0x00
      000268 CB 7F            [ 8]  801 	bit	7,a
      00026A 28 07            [12]  802 	jr	Z, 00129$
      00026C CB 7A            [ 8]  803 	bit	7, d
      00026E 20 08            [12]  804 	jr	NZ, 00130$
      000270 BF               [ 4]  805 	cp	a, a
      000271 18 05            [12]  806 	jr	00130$
      000273                        807 00129$:
      000273 CB 7A            [ 8]  808 	bit	7, d
      000275 28 01            [12]  809 	jr	Z, 00130$
      000277 37               [ 4]  810 	scf
      000278                        811 00130$:
      000278 D2r2Er03         [16]  812 	jp	NC, 00111$
                           00027B   813 	C$main.c$183$3_0$180	= .
                                    814 	.globl	C$main.c$183$3_0$180
                                    815 ;main.c:183: if (whitePieces[i].isKing) {
      00027B F8 04            [12]  816 	ldhl	sp,#4
      00027D 2A               [ 8]  817 	ld	a, (hl+)
      00027E 4F               [ 4]  818 	ld	c, a
      00027F 46               [ 8]  819 	ld	b, (hl)
      000280 69               [ 4]  820 	ld	l, c
      000281 60               [ 4]  821 	ld	h, b
      000282 29               [ 8]  822 	add	hl, hl
      000283 09               [ 8]  823 	add	hl, bc
      000284 11r67r02         [12]  824 	ld	de, #_whitePieces
      000287 19               [ 8]  825 	add	hl, de
      000288 23               [ 8]  826 	inc	hl
      000289 23               [ 8]  827 	inc	hl
      00028A 7E               [ 8]  828 	ld	a, (hl)
      00028B F8 02            [12]  829 	ldhl	sp,	#2
      00028D 77               [ 8]  830 	ld	(hl), a
                           00028E   831 	C$main.c$184$2_0$178	= .
                                    832 	.globl	C$main.c$184$2_0$178
                                    833 ;main.c:184: set_sprite_tile(i + 16, 20); // Use the white king sprite tile
      00028E F8 04            [12]  834 	ldhl	sp,	#4
      000290 3A               [ 8]  835 	ld	a, (hl-)
      000291 C6 10            [ 8]  836 	add	a, #0x10
                           000293   837 	C$main.c$183$3_0$180	= .
                                    838 	.globl	C$main.c$183$3_0$180
                                    839 ;main.c:183: if (whitePieces[i].isKing) {
      000293 32               [ 8]  840 	ld	(hl-), a
      000294 CB 46            [12]  841 	bit	0, (hl)
      000296 28 33            [12]  842 	jr	Z, 00102$
                                    843 ;main.c:184: set_sprite_tile(i + 16, 20); // Use the white king sprite tile
                                    844 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      000298 23               [ 8]  845 	inc	hl
      000299 3A               [ 8]  846 	ld	a, (hl-)
      00029A 22               [ 8]  847 	ld	(hl+), a
      00029B 36 00            [12]  848 	ld	(hl), #0x00
      00029D 3E 02            [ 8]  849 	ld	a, #0x02
      00029F                        850 00131$:
      00029F F8 02            [12]  851 	ldhl	sp,	#2
      0002A1 CB 26            [16]  852 	sla	(hl)
      0002A3 23               [ 8]  853 	inc	hl
      0002A4 CB 16            [16]  854 	rl	(hl)
      0002A6 3D               [ 4]  855 	dec	a
      0002A7 20 F6            [12]  856 	jr	NZ, 00131$
      0002A9 2B               [ 8]  857 	dec	hl
      0002AA 2A               [ 8]  858 	ld	a, (hl+)
      0002AB 5F               [ 4]  859 	ld	e, a
      0002AC 56               [ 8]  860 	ld	d, (hl)
      0002AD 21r00r00         [12]  861 	ld	hl, #_shadow_OAM
      0002B0 19               [ 8]  862 	add	hl, de
      0002B1 33               [ 8]  863 	inc	sp
      0002B2 33               [ 8]  864 	inc	sp
      0002B3 5D               [ 4]  865 	ld	e, l
      0002B4 54               [ 4]  866 	ld	d, h
      0002B5 D5               [16]  867 	push	de
      0002B6 21 02 00         [12]  868 	ld	hl, #0x0002
      0002B9 19               [ 8]  869 	add	hl, de
      0002BA E5               [16]  870 	push	hl
      0002BB 7D               [ 4]  871 	ld	a, l
      0002BC F8 04            [12]  872 	ldhl	sp,	#4
      0002BE 77               [ 8]  873 	ld	(hl), a
      0002BF E1               [12]  874 	pop	hl
      0002C0 7C               [ 4]  875 	ld	a, h
      0002C1 F8 03            [12]  876 	ldhl	sp,	#3
      0002C3 32               [ 8]  877 	ld	(hl-), a
      0002C4 2A               [ 8]  878 	ld	a,	(hl+)
      0002C5 66               [ 8]  879 	ld	h, (hl)
      0002C6 6F               [ 4]  880 	ld	l, a
      0002C7 36 14            [12]  881 	ld	(hl), #0x14
                           0002C9   882 	C$main.c$184$3_0$180	= .
                                    883 	.globl	C$main.c$184$3_0$180
                                    884 ;main.c:184: set_sprite_tile(i + 16, 20); // Use the white king sprite tile
      0002C9 18 32            [12]  885 	jr	00103$
      0002CB                        886 00102$:
                                    887 ;main.c:186: set_sprite_tile(i + 16, 5); // Use the white regular piece sprite tile
                                    888 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      0002CB F8 03            [12]  889 	ldhl	sp,	#3
      0002CD 3A               [ 8]  890 	ld	a, (hl-)
      0002CE 22               [ 8]  891 	ld	(hl+), a
      0002CF 36 00            [12]  892 	ld	(hl), #0x00
      0002D1 3E 02            [ 8]  893 	ld	a, #0x02
      0002D3                        894 00132$:
      0002D3 F8 02            [12]  895 	ldhl	sp,	#2
      0002D5 CB 26            [16]  896 	sla	(hl)
      0002D7 23               [ 8]  897 	inc	hl
      0002D8 CB 16            [16]  898 	rl	(hl)
      0002DA 3D               [ 4]  899 	dec	a
      0002DB 20 F6            [12]  900 	jr	NZ, 00132$
      0002DD 2B               [ 8]  901 	dec	hl
      0002DE 2A               [ 8]  902 	ld	a, (hl+)
      0002DF 5F               [ 4]  903 	ld	e, a
      0002E0 56               [ 8]  904 	ld	d, (hl)
      0002E1 21r00r00         [12]  905 	ld	hl, #_shadow_OAM
      0002E4 19               [ 8]  906 	add	hl, de
      0002E5 33               [ 8]  907 	inc	sp
      0002E6 33               [ 8]  908 	inc	sp
      0002E7 5D               [ 4]  909 	ld	e, l
      0002E8 54               [ 4]  910 	ld	d, h
      0002E9 D5               [16]  911 	push	de
      0002EA 21 02 00         [12]  912 	ld	hl, #0x0002
      0002ED 19               [ 8]  913 	add	hl, de
      0002EE E5               [16]  914 	push	hl
      0002EF 7D               [ 4]  915 	ld	a, l
      0002F0 F8 04            [12]  916 	ldhl	sp,	#4
      0002F2 77               [ 8]  917 	ld	(hl), a
      0002F3 E1               [12]  918 	pop	hl
      0002F4 7C               [ 4]  919 	ld	a, h
      0002F5 F8 03            [12]  920 	ldhl	sp,	#3
      0002F7 32               [ 8]  921 	ld	(hl-), a
      0002F8 2A               [ 8]  922 	ld	a,	(hl+)
      0002F9 66               [ 8]  923 	ld	h, (hl)
      0002FA 6F               [ 4]  924 	ld	l, a
      0002FB 36 05            [12]  925 	ld	(hl), #0x05
                           0002FD   926 	C$main.c$186$3_0$180	= .
                                    927 	.globl	C$main.c$186$3_0$180
                                    928 ;main.c:186: set_sprite_tile(i + 16, 5); // Use the white regular piece sprite tile
      0002FD                        929 00103$:
                                    930 ;main.c:188: move_sprite(i + 16, whitePieces[i].x, whitePieces[i].y);
      0002FD F8 04            [12]  931 	ldhl	sp,#4
      0002FF 2A               [ 8]  932 	ld	a, (hl+)
      000300 4F               [ 4]  933 	ld	c, a
      000301 46               [ 8]  934 	ld	b, (hl)
      000302 69               [ 4]  935 	ld	l, c
      000303 60               [ 4]  936 	ld	h, b
      000304 29               [ 8]  937 	add	hl, hl
      000305 09               [ 8]  938 	add	hl, bc
      000306 11r67r02         [12]  939 	ld	de, #_whitePieces
      000309 19               [ 8]  940 	add	hl, de
      00030A 4D               [ 4]  941 	ld	c, l
      00030B 44               [ 4]  942 	ld	b, h
      00030C 03               [ 8]  943 	inc	bc
      00030D 0A               [ 8]  944 	ld	a, (bc)
      00030E 5F               [ 4]  945 	ld	e, a
      00030F 4E               [ 8]  946 	ld	c, (hl)
      000310 F8 04            [12]  947 	ldhl	sp,	#4
      000312 7E               [ 8]  948 	ld	a, (hl)
      000313 C6 10            [ 8]  949 	add	a, #0x10
                                    950 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      000315 6F               [ 4]  951 	ld	l, a
                                    952 ;	spillPairReg hl
                                    953 ;	spillPairReg hl
      000316 26 00            [ 8]  954 	ld	h, #0x00
                                    955 ;	spillPairReg hl
                                    956 ;	spillPairReg hl
      000318 29               [ 8]  957 	add	hl, hl
      000319 29               [ 8]  958 	add	hl, hl
      00031A D5               [16]  959 	push	de
      00031B 11r00r00         [12]  960 	ld	de, #_shadow_OAM
      00031E 19               [ 8]  961 	add	hl, de
      00031F D1               [12]  962 	pop	de
                                    963 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      000320 7B               [ 4]  964 	ld	a, e
      000321 22               [ 8]  965 	ld	(hl+), a
      000322 71               [ 8]  966 	ld	(hl), c
                           000323   967 	C$main.c$182$2_0$179	= .
                                    968 	.globl	C$main.c$182$2_0$179
                                    969 ;main.c:182: for (int i = 0; i < 12; i++){
      000323 F8 04            [12]  970 	ldhl	sp,	#4
      000325 34               [12]  971 	inc	(hl)
      000326 C2r5Dr02         [16]  972 	jp	NZ,00109$
      000329 23               [ 8]  973 	inc	hl
      00032A 34               [12]  974 	inc	(hl)
      00032B C3r5Dr02         [16]  975 	jp	00109$
      00032E                        976 00111$:
                           00032E   977 	C$main.c$190$2_0$178	= .
                                    978 	.globl	C$main.c$190$2_0$178
                                    979 ;main.c:190: }
      00032E E8 06            [16]  980 	add	sp, #6
                           000330   981 	C$main.c$190$2_0$178	= .
                                    982 	.globl	C$main.c$190$2_0$178
                           000330   983 	XG$printWhite$0$0	= .
                                    984 	.globl	XG$printWhite$0$0
      000330 C9               [16]  985 	ret
                           000331   986 	G$modifyCoordinates$0$0	= .
                                    987 	.globl	G$modifyCoordinates$0$0
                           000331   988 	C$main.c$191$2_0$193	= .
                                    989 	.globl	C$main.c$191$2_0$193
                                    990 ;main.c:191: void modifyCoordinates(Piece input[], int selectedCoords, int newX, int newY) {
                                    991 ;	---------------------------------
                                    992 ; Function modifyCoordinates
                                    993 ; ---------------------------------
      000331                        994 _modifyCoordinates::
      000331 D5               [16]  995 	push	de
                           000332   996 	C$main.c$193$1_0$193	= .
                                    997 	.globl	C$main.c$193$1_0$193
                                    998 ;main.c:193: if (selectedCoords >= 0) {
      000332 CB 78            [ 8]  999 	bit	7, b
      000334 20 56            [12] 1000 	jr	NZ, 00113$
                           000336  1001 	C$main.c$195$2_0$194	= .
                                   1002 	.globl	C$main.c$195$2_0$194
                                   1003 ;main.c:195: input[selectedCoords].x = newX;
      000336 69               [ 4] 1004 	ld	l, c
      000337 60               [ 4] 1005 	ld	h, b
      000338 29               [ 8] 1006 	add	hl, hl
      000339 09               [ 8] 1007 	add	hl, bc
      00033A 4D               [ 4] 1008 	ld	c, l
      00033B 44               [ 4] 1009 	ld	b, h
      00033C E1               [12] 1010 	pop	hl
      00033D E5               [16] 1011 	push	hl
      00033E 09               [ 8] 1012 	add	hl, bc
      00033F 4D               [ 4] 1013 	ld	c, l
      000340 44               [ 4] 1014 	ld	b, h
      000341 F8 04            [12] 1015 	ldhl	sp,	#4
                           000343  1016 	C$main.c$196$2_0$194	= .
                                   1017 	.globl	C$main.c$196$2_0$194
                                   1018 ;main.c:196: input[selectedCoords].y = newY;
      000343 2A               [ 8] 1019 	ld	a, (hl+)
      000344 23               [ 8] 1020 	inc	hl
      000345 02               [ 8] 1021 	ld	(bc), a
      000346 59               [ 4] 1022 	ld	e, c
      000347 50               [ 4] 1023 	ld	d, b
      000348 13               [ 8] 1024 	inc	de
      000349 7E               [ 8] 1025 	ld	a, (hl)
      00034A 12               [ 8] 1026 	ld	(de), a
                           00034B  1027 	C$main.c$198$2_0$194	= .
                                   1028 	.globl	C$main.c$198$2_0$194
                                   1029 ;main.c:198: if (currentPlayer == WHITE_PLAYER && input[selectedCoords].y == 28 ||
      00034B FAr07r00         [16] 1030 	ld	a, (#_currentPlayer)
      00034E 3D               [ 4] 1031 	dec	a
      00034F 20 05            [12] 1032 	jr	NZ, 00108$
      000351 1A               [ 8] 1033 	ld	a, (de)
      000352 D6 1C            [ 8] 1034 	sub	a, #0x1c
      000354 28 0B            [12] 1035 	jr	Z, 00104$
      000356                       1036 00108$:
                           000356  1037 	C$main.c$199$2_0$194	= .
                                   1038 	.globl	C$main.c$199$2_0$194
                                   1039 ;main.c:199: currentPlayer == BLACK_PLAYER && input[selectedCoords].y == 140) {
      000356 FAr07r00         [16] 1040 	ld	a, (#_currentPlayer)
      000359 B7               [ 4] 1041 	or	a, a
      00035A 20 30            [12] 1042 	jr	NZ, 00113$
      00035C 1A               [ 8] 1043 	ld	a, (de)
      00035D D6 8C            [ 8] 1044 	sub	a, #0x8c
      00035F 20 2B            [12] 1045 	jr	NZ, 00113$
      000361                       1046 00104$:
                           000361  1047 	C$main.c$200$3_0$195	= .
                                   1048 	.globl	C$main.c$200$3_0$195
                                   1049 ;main.c:200: input[selectedCoords].isKing = true;
      000361 03               [ 8] 1050 	inc	bc
      000362 03               [ 8] 1051 	inc	bc
      000363 3E 01            [ 8] 1052 	ld	a, #0x01
      000365 02               [ 8] 1053 	ld	(bc), a
                           000366  1054 	C$main.c$203$1_0$193	= .
                                   1055 	.globl	C$main.c$203$1_0$193
                                   1056 ;main.c:203: set_sprite_tile(selectedPieceIndex, 8); // Use the black king sprite tile
      000366 21r03r00         [12] 1057 	ld	hl, #_selectedPieceIndex
      000369 5E               [ 8] 1058 	ld	e, (hl)
                           00036A  1059 	C$main.c$202$3_0$195	= .
                                   1060 	.globl	C$main.c$202$3_0$195
                                   1061 ;main.c:202: if (currentPlayer == BLACK_PLAYER) {
      00036A FAr07r00         [16] 1062 	ld	a, (#_currentPlayer)
      00036D B7               [ 4] 1063 	or	a, a
      00036E 20 0F            [12] 1064 	jr	NZ, 00102$
                                   1065 ;main.c:203: set_sprite_tile(selectedPieceIndex, 8); // Use the black king sprite tile
                                   1066 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      000370 01r00r00         [12] 1067 	ld	bc, #_shadow_OAM+0
      000373 6B               [ 4] 1068 	ld	l, e
                                   1069 ;	spillPairReg hl
                                   1070 ;	spillPairReg hl
      000374 26 00            [ 8] 1071 	ld	h, #0x00
                                   1072 ;	spillPairReg hl
                                   1073 ;	spillPairReg hl
      000376 29               [ 8] 1074 	add	hl, hl
      000377 29               [ 8] 1075 	add	hl, hl
      000378 09               [ 8] 1076 	add	hl, bc
      000379 23               [ 8] 1077 	inc	hl
      00037A 23               [ 8] 1078 	inc	hl
      00037B 36 08            [12] 1079 	ld	(hl), #0x08
                           00037D  1080 	C$main.c$203$3_0$195	= .
                                   1081 	.globl	C$main.c$203$3_0$195
                                   1082 ;main.c:203: set_sprite_tile(selectedPieceIndex, 8); // Use the black king sprite tile
      00037D 18 0D            [12] 1083 	jr	00113$
      00037F                       1084 00102$:
                                   1085 ;main.c:205: set_sprite_tile(selectedPieceIndex, 20); // Use the white king sprite tile
                                   1086 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      00037F 01r00r00         [12] 1087 	ld	bc, #_shadow_OAM+0
      000382 6B               [ 4] 1088 	ld	l, e
                                   1089 ;	spillPairReg hl
                                   1090 ;	spillPairReg hl
      000383 26 00            [ 8] 1091 	ld	h, #0x00
                                   1092 ;	spillPairReg hl
                                   1093 ;	spillPairReg hl
      000385 29               [ 8] 1094 	add	hl, hl
      000386 29               [ 8] 1095 	add	hl, hl
      000387 09               [ 8] 1096 	add	hl, bc
      000388 23               [ 8] 1097 	inc	hl
      000389 23               [ 8] 1098 	inc	hl
      00038A 36 14            [12] 1099 	ld	(hl), #0x14
                           00038C  1100 	C$main.c$205$1_0$193	= .
                                   1101 	.globl	C$main.c$205$1_0$193
                                   1102 ;main.c:205: set_sprite_tile(selectedPieceIndex, 20); // Use the white king sprite tile
      00038C                       1103 00113$:
                           00038C  1104 	C$main.c$209$1_0$193	= .
                                   1105 	.globl	C$main.c$209$1_0$193
                                   1106 ;main.c:209: }
      00038C 33               [ 8] 1107 	inc	sp
      00038D 33               [ 8] 1108 	inc	sp
      00038E E1               [12] 1109 	pop	hl
      00038F E8 04            [16] 1110 	add	sp, #4
      000391 E9               [ 4] 1111 	jp	(hl)
                           000392  1112 	G$isMoveWithinBoard$0$0	= .
                                   1113 	.globl	G$isMoveWithinBoard$0$0
                           000392  1114 	C$main.c$210$1_0$205	= .
                                   1115 	.globl	C$main.c$210$1_0$205
                                   1116 ;main.c:210: bool isMoveWithinBoard(UINT8 x, UINT8 y) {
                                   1117 ;	---------------------------------
                                   1118 ; Function isMoveWithinBoard
                                   1119 ; ---------------------------------
      000392                       1120 _isMoveWithinBoard::
                           000392  1121 	C$main.c$211$1_0$205	= .
                                   1122 	.globl	C$main.c$211$1_0$205
                                   1123 ;main.c:211: return (x >= 20 && x <=140 && y >= 20 && y <= 140);
      000392 4F               [ 4] 1124 	ld	c, a
      000393 D6 14            [ 8] 1125 	sub	a, #0x14
      000395 38 0F            [12] 1126 	jr	C, 00103$
      000397 3E 8C            [ 8] 1127 	ld	a, #0x8c
      000399 91               [ 4] 1128 	sub	a, c
      00039A 38 0A            [12] 1129 	jr	C, 00103$
      00039C 7B               [ 4] 1130 	ld	a, e
      00039D D6 14            [ 8] 1131 	sub	a, #0x14
      00039F 38 05            [12] 1132 	jr	C, 00103$
      0003A1 3E 8C            [ 8] 1133 	ld	a, #0x8c
      0003A3 93               [ 4] 1134 	sub	a, e
      0003A4 30 02            [12] 1135 	jr	NC, 00104$
      0003A6                       1136 00103$:
      0003A6 AF               [ 4] 1137 	xor	a, a
      0003A7 C9               [16] 1138 	ret
      0003A8                       1139 00104$:
      0003A8 3E 01            [ 8] 1140 	ld	a, #0x01
                           0003AA  1141 	C$main.c$212$1_0$205	= .
                                   1142 	.globl	C$main.c$212$1_0$205
                                   1143 ;main.c:212: }
                           0003AA  1144 	C$main.c$212$1_0$205	= .
                                   1145 	.globl	C$main.c$212$1_0$205
                           0003AA  1146 	XG$isMoveWithinBoard$0$0	= .
                                   1147 	.globl	XG$isMoveWithinBoard$0$0
      0003AA C9               [16] 1148 	ret
                           0003AB  1149 	G$capture$0$0	= .
                                   1150 	.globl	G$capture$0$0
                           0003AB  1151 	C$main.c$213$1_0$207	= .
                                   1152 	.globl	C$main.c$213$1_0$207
                                   1153 ;main.c:213: bool capture(UINT8 capturedX, UINT8 capturedY, Piece* opponentPieces) {
                                   1154 ;	---------------------------------
                                   1155 ; Function capture
                                   1156 ; ---------------------------------
      0003AB                       1157 _capture::
      0003AB E8 F4            [16] 1158 	add	sp, #-12
      0003AD F8 0B            [12] 1159 	ldhl	sp,	#11
      0003AF 32               [ 8] 1160 	ld	(hl-), a
      0003B0 73               [ 8] 1161 	ld	(hl), e
                           0003B1  1162 	C$main.c$216$1_0$207	= .
                                   1163 	.globl	C$main.c$216$1_0$207
                                   1164 ;main.c:216: for (int i = 0; i < 12; i++) {
      0003B1 01 00 00         [12] 1165 	ld	bc, #0x0000
      0003B4                       1166 00108$:
      0003B4 79               [ 4] 1167 	ld	a, c
      0003B5 D6 0C            [ 8] 1168 	sub	a, #0x0c
      0003B7 78               [ 4] 1169 	ld	a, b
      0003B8 17               [ 4] 1170 	rla
      0003B9 3F               [ 4] 1171 	ccf
      0003BA 1F               [ 4] 1172 	rra
      0003BB DE 80            [ 8] 1173 	sbc	a, #0x80
      0003BD D2r56r04         [16] 1174 	jp	NC, 00106$
                           0003C0  1175 	C$main.c$217$3_0$209	= .
                                   1176 	.globl	C$main.c$217$3_0$209
                                   1177 ;main.c:217: UINT8 pieceX = opponentPieces[i].x;
      0003C0 69               [ 4] 1178 	ld	l, c
      0003C1 60               [ 4] 1179 	ld	h, b
      0003C2 29               [ 8] 1180 	add	hl, hl
      0003C3 09               [ 8] 1181 	add	hl, bc
      0003C4 E5               [16] 1182 	push	hl
      0003C5 7D               [ 4] 1183 	ld	a, l
      0003C6 F8 0A            [12] 1184 	ldhl	sp,	#10
      0003C8 77               [ 8] 1185 	ld	(hl), a
      0003C9 E1               [12] 1186 	pop	hl
      0003CA 7C               [ 4] 1187 	ld	a, h
      0003CB F8 09            [12] 1188 	ldhl	sp,	#9
      0003CD 32               [ 8] 1189 	ld	(hl-), a
      0003CE 2A               [ 8] 1190 	ld	a, (hl+)
      0003CF 5F               [ 4] 1191 	ld	e, a
      0003D0 56               [ 8] 1192 	ld	d, (hl)
      0003D1 F8 0E            [12] 1193 	ldhl	sp,	#14
      0003D3 2A               [ 8] 1194 	ld	a,	(hl+)
      0003D4 66               [ 8] 1195 	ld	h, (hl)
      0003D5 6F               [ 4] 1196 	ld	l, a
      0003D6 19               [ 8] 1197 	add	hl, de
      0003D7 33               [ 8] 1198 	inc	sp
      0003D8 33               [ 8] 1199 	inc	sp
      0003D9 5D               [ 4] 1200 	ld	e, l
      0003DA 54               [ 4] 1201 	ld	d, h
      0003DB D5               [16] 1202 	push	de
      0003DC 1A               [ 8] 1203 	ld	a, (de)
      0003DD F8 08            [12] 1204 	ldhl	sp,	#8
      0003DF 77               [ 8] 1205 	ld	(hl), a
                           0003E0  1206 	C$main.c$218$3_0$209	= .
                                   1207 	.globl	C$main.c$218$3_0$209
                                   1208 ;main.c:218: UINT8 pieceY = opponentPieces[i].y;
      0003E0 D1               [12] 1209 	pop	de
      0003E1 D5               [16] 1210 	push	de
      0003E2 6B               [ 4] 1211 	ld	l, e
      0003E3 62               [ 4] 1212 	ld	h, d
      0003E4 23               [ 8] 1213 	inc	hl
      0003E5 E5               [16] 1214 	push	hl
      0003E6 7D               [ 4] 1215 	ld	a, l
      0003E7 F8 04            [12] 1216 	ldhl	sp,	#4
      0003E9 77               [ 8] 1217 	ld	(hl), a
      0003EA E1               [12] 1218 	pop	hl
      0003EB 7C               [ 4] 1219 	ld	a, h
      0003EC F8 03            [12] 1220 	ldhl	sp,	#3
      0003EE 32               [ 8] 1221 	ld	(hl-), a
      0003EF 2A               [ 8] 1222 	ld	a, (hl+)
      0003F0 5F               [ 4] 1223 	ld	e, a
      0003F1 56               [ 8] 1224 	ld	d, (hl)
      0003F2 1A               [ 8] 1225 	ld	a, (de)
      0003F3 F8 09            [12] 1226 	ldhl	sp,	#9
                           0003F5  1227 	C$main.c$221$3_0$209	= .
                                   1228 	.globl	C$main.c$221$3_0$209
                                   1229 ;main.c:221: UINT8 pieceLeft = pieceX - 4;
      0003F5 32               [ 8] 1230 	ld	(hl-), a
      0003F6 5E               [ 8] 1231 	ld	e, (hl)
      0003F7 7B               [ 4] 1232 	ld	a, e
      0003F8 C6 FC            [ 8] 1233 	add	a, #0xfc
      0003FA F8 04            [12] 1234 	ldhl	sp,	#4
                           0003FC  1235 	C$main.c$222$3_0$209	= .
                                   1236 	.globl	C$main.c$222$3_0$209
                                   1237 ;main.c:222: UINT8 pieceRight = pieceX + 4;
      0003FC 22               [ 8] 1238 	ld	(hl+), a
      0003FD 7B               [ 4] 1239 	ld	a, e
      0003FE C6 04            [ 8] 1240 	add	a, #0x04
      000400 77               [ 8] 1241 	ld	(hl), a
                           000401  1242 	C$main.c$223$3_0$209	= .
                                   1243 	.globl	C$main.c$223$3_0$209
                                   1244 ;main.c:223: UINT8 pieceTop = pieceY - 4;
      000401 F8 09            [12] 1245 	ldhl	sp,	#9
      000403 5E               [ 8] 1246 	ld	e, (hl)
      000404 7B               [ 4] 1247 	ld	a, e
      000405 C6 FC            [ 8] 1248 	add	a, #0xfc
      000407 F8 06            [12] 1249 	ldhl	sp,	#6
                           000409  1250 	C$main.c$224$3_0$209	= .
                                   1251 	.globl	C$main.c$224$3_0$209
                                   1252 ;main.c:224: UINT8 pieceBottom = pieceY + 4;
      000409 22               [ 8] 1253 	ld	(hl+), a
      00040A 7B               [ 4] 1254 	ld	a, e
      00040B C6 04            [ 8] 1255 	add	a, #0x04
      00040D 77               [ 8] 1256 	ld	(hl), a
                           00040E  1257 	C$main.c$225$3_0$209	= .
                                   1258 	.globl	C$main.c$225$3_0$209
                                   1259 ;main.c:225: UINT8 tileLeft = capturedX - 4;
      00040E F8 0B            [12] 1260 	ldhl	sp,	#11
      000410 5E               [ 8] 1261 	ld	e, (hl)
      000411 7B               [ 4] 1262 	ld	a, e
      000412 C6 FC            [ 8] 1263 	add	a, #0xfc
      000414 57               [ 4] 1264 	ld	d, a
                           000415  1265 	C$main.c$226$3_0$209	= .
                                   1266 	.globl	C$main.c$226$3_0$209
                                   1267 ;main.c:226: UINT8 tileRight = capturedX + 4;
      000415 7B               [ 4] 1268 	ld	a, e
      000416 C6 04            [ 8] 1269 	add	a, #0x04
      000418 F8 08            [12] 1270 	ldhl	sp,	#8
                           00041A  1271 	C$main.c$227$3_0$209	= .
                                   1272 	.globl	C$main.c$227$3_0$209
                                   1273 ;main.c:227: UINT8 tileTop = capturedY - 4;
      00041A 22               [ 8] 1274 	ld	(hl+), a
      00041B 23               [ 8] 1275 	inc	hl
      00041C 6E               [ 8] 1276 	ld	l, (hl)
                                   1277 ;	spillPairReg hl
                                   1278 ;	spillPairReg hl
      00041D 7D               [ 4] 1279 	ld	a, l
      00041E C6 FC            [ 8] 1280 	add	a, #0xfc
      000420 5F               [ 4] 1281 	ld	e, a
                           000421  1282 	C$main.c$228$3_0$209	= .
                                   1283 	.globl	C$main.c$228$3_0$209
                                   1284 ;main.c:228: UINT8 tileBottom = capturedY + 4;
      000421 7D               [ 4] 1285 	ld	a, l
      000422 C6 04            [ 8] 1286 	add	a, #0x04
      000424 F8 09            [12] 1287 	ldhl	sp,	#9
      000426 77               [ 8] 1288 	ld	(hl), a
                           000427  1289 	C$main.c$231$3_0$209	= .
                                   1290 	.globl	C$main.c$231$3_0$209
                                   1291 ;main.c:231: if (tileLeft <= pieceRight && tileRight >= pieceLeft &&
      000427 F8 05            [12] 1292 	ldhl	sp,	#5
      000429 7E               [ 8] 1293 	ld	a, (hl)
      00042A 92               [ 4] 1294 	sub	a, d
      00042B 38 25            [12] 1295 	jr	C, 00109$
      00042D F8 08            [12] 1296 	ldhl	sp,	#8
      00042F 7E               [ 8] 1297 	ld	a, (hl)
      000430 F8 04            [12] 1298 	ldhl	sp,	#4
      000432 96               [ 8] 1299 	sub	a, (hl)
      000433 38 1D            [12] 1300 	jr	C, 00109$
                           000435  1301 	C$main.c$232$3_0$209	= .
                                   1302 	.globl	C$main.c$232$3_0$209
                                   1303 ;main.c:232: tileTop <= pieceBottom && tileBottom >= pieceTop) {
      000435 F8 07            [12] 1304 	ldhl	sp,	#7
      000437 7E               [ 8] 1305 	ld	a, (hl)
      000438 93               [ 4] 1306 	sub	a, e
      000439 38 17            [12] 1307 	jr	C, 00109$
      00043B 23               [ 8] 1308 	inc	hl
      00043C 23               [ 8] 1309 	inc	hl
      00043D 7E               [ 8] 1310 	ld	a, (hl)
      00043E F8 06            [12] 1311 	ldhl	sp,	#6
      000440 96               [ 8] 1312 	sub	a, (hl)
      000441 38 0F            [12] 1313 	jr	C, 00109$
                           000443  1314 	C$main.c$233$4_0$210	= .
                                   1315 	.globl	C$main.c$233$4_0$210
                                   1316 ;main.c:233: opponentPieces[i].x = 0;
      000443 E1               [12] 1317 	pop	hl
      000444 36 00            [12] 1318 	ld	(hl), #0x00
      000446 E5               [16] 1319 	push	hl
                           000447  1320 	C$main.c$234$4_0$210	= .
                                   1321 	.globl	C$main.c$234$4_0$210
                                   1322 ;main.c:234: opponentPieces[i].y = 0;
      000447 F8 02            [12] 1323 	ldhl	sp,	#2
      000449 2A               [ 8] 1324 	ld	a,	(hl+)
      00044A 66               [ 8] 1325 	ld	h, (hl)
      00044B 6F               [ 4] 1326 	ld	l, a
      00044C 36 00            [12] 1327 	ld	(hl), #0x00
                           00044E  1328 	C$main.c$235$4_0$210	= .
                                   1329 	.globl	C$main.c$235$4_0$210
                                   1330 ;main.c:235: return true;
      00044E 3E 01            [ 8] 1331 	ld	a, #0x01
      000450 18 05            [12] 1332 	jr	00110$
      000452                       1333 00109$:
                           000452  1334 	C$main.c$216$2_0$208	= .
                                   1335 	.globl	C$main.c$216$2_0$208
                                   1336 ;main.c:216: for (int i = 0; i < 12; i++) {
      000452 03               [ 8] 1337 	inc	bc
      000453 C3rB4r03         [16] 1338 	jp	00108$
      000456                       1339 00106$:
                           000456  1340 	C$main.c$238$1_0$207	= .
                                   1341 	.globl	C$main.c$238$1_0$207
                                   1342 ;main.c:238: return false;
      000456 AF               [ 4] 1343 	xor	a, a
      000457                       1344 00110$:
                           000457  1345 	C$main.c$239$1_0$207	= .
                                   1346 	.globl	C$main.c$239$1_0$207
                                   1347 ;main.c:239: }
      000457 E8 0C            [16] 1348 	add	sp, #12
      000459 E1               [12] 1349 	pop	hl
      00045A C1               [12] 1350 	pop	bc
      00045B E9               [ 4] 1351 	jp	(hl)
                           00045C  1352 	G$isValidMove$0$0	= .
                                   1353 	.globl	G$isValidMove$0$0
                           00045C  1354 	C$main.c$241$1_0$212	= .
                                   1355 	.globl	C$main.c$241$1_0$212
                                   1356 ;main.c:241: bool isValidMove(UINT8 cursorx, UINT8 cursory, UINT8 currentPlayer, int selectedCoords) {
                                   1357 ;	---------------------------------
                                   1358 ; Function isValidMove
                                   1359 ; ---------------------------------
      00045C                       1360 _isValidMove::
      00045C E8 EC            [16] 1361 	add	sp, #-20
      00045E F8 13            [12] 1362 	ldhl	sp,	#19
      000460 32               [ 8] 1363 	ld	(hl-), a
      000461 73               [ 8] 1364 	ld	(hl), e
                           000462  1365 	C$main.c$248$1_0$212	= .
                                   1366 	.globl	C$main.c$248$1_0$212
                                   1367 ;main.c:248: if (currentPlayer == BLACK_PLAYER) {
      000462 F8 16            [12] 1368 	ldhl	sp,	#22
      000464 7E               [ 8] 1369 	ld	a, (hl)
      000465 B7               [ 4] 1370 	or	a, a
      000466 20 16            [12] 1371 	jr	NZ, 00102$
                           000468  1372 	C$main.c$249$2_0$213	= .
                                   1373 	.globl	C$main.c$249$2_0$213
                                   1374 ;main.c:249: pieces = blackPieces;
      000468 F8 0E            [12] 1375 	ldhl	sp,	#14
      00046A 36r43            [12] 1376 	ld	(hl), #<(_blackPieces)
      00046C 23               [ 8] 1377 	inc	hl
      00046D 36s02            [12] 1378 	ld	(hl), #>(_blackPieces)
                           00046F  1379 	C$main.c$250$2_0$213	= .
                                   1380 	.globl	C$main.c$250$2_0$213
                                   1381 ;main.c:250: opponentPieces = whitePieces;
      00046F F8 02            [12] 1382 	ldhl	sp,	#2
      000471 3Er67            [ 8] 1383 	ld	a, #<(_whitePieces)
      000473 22               [ 8] 1384 	ld	(hl+), a
                           000474  1385 	C$main.c$251$2_0$213	= .
                                   1386 	.globl	C$main.c$251$2_0$213
                                   1387 ;main.c:251: numPieces = MAX_BLACK_PIECES;
      000474 3Es02            [ 8] 1388 	ld	a, #>(_whitePieces)
      000476 22               [ 8] 1389 	ld	(hl+), a
      000477 3E 0C            [ 8] 1390 	ld	a, #0x0c
      000479 22               [ 8] 1391 	ld	(hl+), a
      00047A AF               [ 4] 1392 	xor	a, a
      00047B 77               [ 8] 1393 	ld	(hl), a
                           00047C  1394 	C$main.c$252$1_0$212	= .
                                   1395 	.globl	C$main.c$252$1_0$212
                                   1396 ;main.c:252: numOpponentPieces = MAX_WHITE_PIECES;
      00047C 18 14            [12] 1397 	jr	00103$
      00047E                       1398 00102$:
                           00047E  1399 	C$main.c$254$2_0$214	= .
                                   1400 	.globl	C$main.c$254$2_0$214
                                   1401 ;main.c:254: pieces = whitePieces;
      00047E F8 0E            [12] 1402 	ldhl	sp,	#14
      000480 3Er67            [ 8] 1403 	ld	a, #<(_whitePieces)
      000482 22               [ 8] 1404 	ld	(hl+), a
      000483 36s02            [12] 1405 	ld	(hl), #>(_whitePieces)
                           000485  1406 	C$main.c$255$2_0$214	= .
                                   1407 	.globl	C$main.c$255$2_0$214
                                   1408 ;main.c:255: opponentPieces = blackPieces;
      000485 F8 02            [12] 1409 	ldhl	sp,	#2
      000487 3Er43            [ 8] 1410 	ld	a, #<(_blackPieces)
      000489 22               [ 8] 1411 	ld	(hl+), a
                           00048A  1412 	C$main.c$256$2_0$214	= .
                                   1413 	.globl	C$main.c$256$2_0$214
                                   1414 ;main.c:256: numPieces = MAX_WHITE_PIECES;
      00048A 3Es02            [ 8] 1415 	ld	a, #>(_blackPieces)
      00048C 22               [ 8] 1416 	ld	(hl+), a
      00048D 3E 0C            [ 8] 1417 	ld	a, #0x0c
      00048F 22               [ 8] 1418 	ld	(hl+), a
      000490 AF               [ 4] 1419 	xor	a, a
      000491 77               [ 8] 1420 	ld	(hl), a
                           000492  1421 	C$main.c$257$1_0$212	= .
                                   1422 	.globl	C$main.c$257$1_0$212
                                   1423 ;main.c:257: numOpponentPieces = MAX_BLACK_PIECES;
      000492                       1424 00103$:
                           000492  1425 	C$main.c$261$1_0$212	= .
                                   1426 	.globl	C$main.c$261$1_0$212
                                   1427 ;main.c:261: if (cursorx > 160 || cursorx <= 20 || cursory > 160 || cursory <= 20) {
      000492 3E A0            [ 8] 1428 	ld	a, #0xa0
      000494 F8 13            [12] 1429 	ldhl	sp,	#19
      000496 96               [ 8] 1430 	sub	a, (hl)
      000497 38 10            [12] 1431 	jr	C, 00104$
      000499 3E 14            [ 8] 1432 	ld	a, #0x14
      00049B 96               [ 8] 1433 	sub	a, (hl)
      00049C 30 0B            [12] 1434 	jr	NC, 00104$
      00049E 2B               [ 8] 1435 	dec	hl
      00049F 3E A0            [ 8] 1436 	ld	a, #0xa0
      0004A1 96               [ 8] 1437 	sub	a, (hl)
      0004A2 38 05            [12] 1438 	jr	C, 00104$
      0004A4 3E 14            [ 8] 1439 	ld	a, #0x14
      0004A6 96               [ 8] 1440 	sub	a, (hl)
      0004A7 38 04            [12] 1441 	jr	C, 00105$
      0004A9                       1442 00104$:
                           0004A9  1443 	C$main.c$262$2_0$215	= .
                                   1444 	.globl	C$main.c$262$2_0$215
                                   1445 ;main.c:262: return false;
      0004A9 AF               [ 4] 1446 	xor	a, a
      0004AA C3r09r07         [16] 1447 	jp	00141$
      0004AD                       1448 00105$:
                           0004AD  1449 	C$main.c$266$1_0$212	= .
                                   1450 	.globl	C$main.c$266$1_0$212
                                   1451 ;main.c:266: if (selectedCoords < 0 || selectedCoords >= numPieces) {
      0004AD F8 18            [12] 1452 	ldhl	sp,	#24
      0004AF CB 7E            [12] 1453 	bit	7, (hl)
      0004B1 20 21            [12] 1454 	jr	NZ, 00109$
      0004B3 F8 17            [12] 1455 	ldhl	sp,	#23
      0004B5 5D               [ 4] 1456 	ld	e, l
      0004B6 54               [ 4] 1457 	ld	d, h
      0004B7 F8 04            [12] 1458 	ldhl	sp,	#4
      0004B9 1A               [ 8] 1459 	ld	a, (de)
      0004BA 13               [ 8] 1460 	inc	de
      0004BB 96               [ 8] 1461 	sub	a, (hl)
      0004BC 23               [ 8] 1462 	inc	hl
      0004BD 1A               [ 8] 1463 	ld	a, (de)
      0004BE 9E               [ 8] 1464 	sbc	a, (hl)
      0004BF 1A               [ 8] 1465 	ld	a, (de)
      0004C0 57               [ 4] 1466 	ld	d, a
      0004C1 5E               [ 8] 1467 	ld	e, (hl)
      0004C2 CB 7B            [ 8] 1468 	bit	7, e
      0004C4 28 07            [12] 1469 	jr	Z, 00250$
      0004C6 CB 7A            [ 8] 1470 	bit	7, d
      0004C8 20 08            [12] 1471 	jr	NZ, 00251$
      0004CA BF               [ 4] 1472 	cp	a, a
      0004CB 18 05            [12] 1473 	jr	00251$
      0004CD                       1474 00250$:
      0004CD CB 7A            [ 8] 1475 	bit	7, d
      0004CF 28 01            [12] 1476 	jr	Z, 00251$
      0004D1 37               [ 4] 1477 	scf
      0004D2                       1478 00251$:
      0004D2 38 04            [12] 1479 	jr	C, 00110$
      0004D4                       1480 00109$:
                           0004D4  1481 	C$main.c$267$2_0$216	= .
                                   1482 	.globl	C$main.c$267$2_0$216
                                   1483 ;main.c:267: return false;
      0004D4 AF               [ 4] 1484 	xor	a, a
      0004D5 C3r09r07         [16] 1485 	jp	00141$
      0004D8                       1486 00110$:
                           0004D8  1487 	C$main.c$271$1_1$217	= .
                                   1488 	.globl	C$main.c$271$1_1$217
                                   1489 ;main.c:271: int dx = cursorx - pieces[selectedCoords].x;
      0004D8 F8 13            [12] 1490 	ldhl	sp,	#19
      0004DA 7E               [ 8] 1491 	ld	a, (hl)
      0004DB F8 0C            [12] 1492 	ldhl	sp,	#12
      0004DD 22               [ 8] 1493 	ld	(hl+), a
      0004DE 36 00            [12] 1494 	ld	(hl), #0x00
      0004E0 F8 17            [12] 1495 	ldhl	sp,#23
      0004E2 2A               [ 8] 1496 	ld	a, (hl+)
      0004E3 4F               [ 4] 1497 	ld	c, a
      0004E4 46               [ 8] 1498 	ld	b, (hl)
      0004E5 69               [ 4] 1499 	ld	l, c
      0004E6 60               [ 4] 1500 	ld	h, b
      0004E7 29               [ 8] 1501 	add	hl, hl
      0004E8 09               [ 8] 1502 	add	hl, bc
      0004E9 4D               [ 4] 1503 	ld	c, l
      0004EA 44               [ 4] 1504 	ld	b, h
      0004EB F8 0E            [12] 1505 	ldhl	sp,	#14
      0004ED 2A               [ 8] 1506 	ld	a,	(hl+)
      0004EE 66               [ 8] 1507 	ld	h, (hl)
      0004EF 6F               [ 4] 1508 	ld	l, a
      0004F0 09               [ 8] 1509 	add	hl, bc
      0004F1 E5               [16] 1510 	push	hl
      0004F2 7D               [ 4] 1511 	ld	a, l
      0004F3 F8 12            [12] 1512 	ldhl	sp,	#18
      0004F5 77               [ 8] 1513 	ld	(hl), a
      0004F6 E1               [12] 1514 	pop	hl
      0004F7 7C               [ 4] 1515 	ld	a, h
      0004F8 F8 11            [12] 1516 	ldhl	sp,	#17
      0004FA 32               [ 8] 1517 	ld	(hl-), a
      0004FB 2A               [ 8] 1518 	ld	a, (hl+)
      0004FC 5F               [ 4] 1519 	ld	e, a
      0004FD 56               [ 8] 1520 	ld	d, (hl)
      0004FE 1A               [ 8] 1521 	ld	a, (de)
      0004FF 4F               [ 4] 1522 	ld	c, a
      000500 06 00            [ 8] 1523 	ld	b, #0x00
      000502 F8 0C            [12] 1524 	ldhl	sp,#12
      000504 2A               [ 8] 1525 	ld	a, (hl+)
      000505 5F               [ 4] 1526 	ld	e, a
      000506 2A               [ 8] 1527 	ld	a, (hl+)
      000507 23               [ 8] 1528 	inc	hl
      000508 57               [ 4] 1529 	ld	d, a
      000509 7B               [ 4] 1530 	ld	a, e
      00050A 91               [ 4] 1531 	sub	a, c
      00050B 5F               [ 4] 1532 	ld	e, a
      00050C 7A               [ 4] 1533 	ld	a, d
      00050D 98               [ 4] 1534 	sbc	a, b
      00050E 32               [ 8] 1535 	ld	(hl-), a
      00050F 73               [ 8] 1536 	ld	(hl), e
      000510 7E               [ 8] 1537 	ld	a, (hl)
      000511 F8 06            [12] 1538 	ldhl	sp,	#6
      000513 77               [ 8] 1539 	ld	(hl), a
      000514 F8 0F            [12] 1540 	ldhl	sp,	#15
      000516 7E               [ 8] 1541 	ld	a, (hl)
      000517 F8 07            [12] 1542 	ldhl	sp,	#7
      000519 77               [ 8] 1543 	ld	(hl), a
                           00051A  1544 	C$main.c$272$1_1$217	= .
                                   1545 	.globl	C$main.c$272$1_1$217
                                   1546 ;main.c:272: int dy = cursory - pieces[selectedCoords].y;
      00051A F8 12            [12] 1547 	ldhl	sp,	#18
      00051C 7E               [ 8] 1548 	ld	a, (hl)
      00051D F8 00            [12] 1549 	ldhl	sp,	#0
      00051F 22               [ 8] 1550 	ld	(hl+), a
      000520 36 00            [12] 1551 	ld	(hl), #0x00
      000522 F8 10            [12] 1552 	ldhl	sp,	#16
      000524 7E               [ 8] 1553 	ld	a, (hl)
      000525 F8 08            [12] 1554 	ldhl	sp,	#8
      000527 77               [ 8] 1555 	ld	(hl), a
      000528 F8 11            [12] 1556 	ldhl	sp,	#17
      00052A 7E               [ 8] 1557 	ld	a, (hl)
      00052B F8 09            [12] 1558 	ldhl	sp,	#9
      00052D 77               [ 8] 1559 	ld	(hl), a
      00052E F8 10            [12] 1560 	ldhl	sp,#16
      000530 2A               [ 8] 1561 	ld	a, (hl+)
      000531 5F               [ 4] 1562 	ld	e, a
      000532 56               [ 8] 1563 	ld	d, (hl)
      000533 6B               [ 4] 1564 	ld	l, e
      000534 62               [ 4] 1565 	ld	h, d
      000535 23               [ 8] 1566 	inc	hl
      000536 E5               [16] 1567 	push	hl
      000537 7D               [ 4] 1568 	ld	a, l
      000538 F8 0C            [12] 1569 	ldhl	sp,	#12
      00053A 77               [ 8] 1570 	ld	(hl), a
      00053B E1               [12] 1571 	pop	hl
      00053C 7C               [ 4] 1572 	ld	a, h
      00053D F8 0B            [12] 1573 	ldhl	sp,	#11
      00053F 32               [ 8] 1574 	ld	(hl-), a
      000540 2A               [ 8] 1575 	ld	a, (hl+)
      000541 5F               [ 4] 1576 	ld	e, a
      000542 56               [ 8] 1577 	ld	d, (hl)
      000543 1A               [ 8] 1578 	ld	a, (de)
      000544 F8 0F            [12] 1579 	ldhl	sp,	#15
      000546 77               [ 8] 1580 	ld	(hl), a
      000547 F8 0C            [12] 1581 	ldhl	sp,	#12
      000549 22               [ 8] 1582 	ld	(hl+), a
      00054A 36 00            [12] 1583 	ld	(hl), #0x00
      00054C D1               [12] 1584 	pop	de
      00054D D5               [16] 1585 	push	de
      00054E 3A               [ 8] 1586 	ld	a, (hl-)
      00054F 6E               [ 8] 1587 	ld	l, (hl)
      000550 67               [ 4] 1588 	ld	h, a
      000551 7B               [ 4] 1589 	ld	a, e
      000552 95               [ 4] 1590 	sub	a, l
      000553 5F               [ 4] 1591 	ld	e, a
      000554 7A               [ 4] 1592 	ld	a, d
      000555 9C               [ 4] 1593 	sbc	a, h
      000556 F8 0F            [12] 1594 	ldhl	sp,	#15
      000558 32               [ 8] 1595 	ld	(hl-), a
      000559 73               [ 8] 1596 	ld	(hl), e
      00055A 3A               [ 8] 1597 	ld	a, (hl-)
      00055B 2B               [ 8] 1598 	dec	hl
      00055C 77               [ 8] 1599 	ld	(hl), a
      00055D F8 0F            [12] 1600 	ldhl	sp,	#15
      00055F 3A               [ 8] 1601 	ld	a, (hl-)
      000560 2B               [ 8] 1602 	dec	hl
      000561 77               [ 8] 1603 	ld	(hl), a
                           000562  1604 	C$main.c$275$1_1$217	= .
                                   1605 	.globl	C$main.c$275$1_1$217
                                   1606 ;main.c:275: if (abs(dx) != abs(dy)) {
      000562 F8 06            [12] 1607 	ldhl	sp,	#6
      000564 2A               [ 8] 1608 	ld	a, (hl+)
      000565 5F               [ 4] 1609 	ld	e, a
      000566 56               [ 8] 1610 	ld	d, (hl)
      000567 D5               [16] 1611 	push	de
      000568 CDr00r00         [24] 1612 	call	_abs
      00056B E1               [12] 1613 	pop	hl
      00056C D5               [16] 1614 	push	de
      00056D F8 0E            [12] 1615 	ldhl	sp,	#14
      00056F 2A               [ 8] 1616 	ld	a, (hl+)
      000570 5F               [ 4] 1617 	ld	e, a
      000571 56               [ 8] 1618 	ld	d, (hl)
      000572 D5               [16] 1619 	push	de
      000573 CDr00r00         [24] 1620 	call	_abs
      000576 E1               [12] 1621 	pop	hl
      000577 C1               [12] 1622 	pop	bc
      000578 7B               [ 4] 1623 	ld	a, e
      000579 91               [ 4] 1624 	sub	a, c
      00057A 20 04            [12] 1625 	jr	NZ, 00252$
      00057C 7A               [ 4] 1626 	ld	a, d
      00057D 90               [ 4] 1627 	sub	a, b
      00057E 28 04            [12] 1628 	jr	Z, 00113$
      000580                       1629 00252$:
                           000580  1630 	C$main.c$276$2_1$218	= .
                                   1631 	.globl	C$main.c$276$2_1$218
                                   1632 ;main.c:276: return false;
      000580 AF               [ 4] 1633 	xor	a, a
      000581 C3r09r07         [16] 1634 	jp	00141$
      000584                       1635 00113$:
                           000584  1636 	C$main.c$280$1_1$212	= .
                                   1637 	.globl	C$main.c$280$1_1$212
                                   1638 ;main.c:280: if ((currentPlayer == BLACK_PLAYER && dy < 0 && !pieces[selectedCoords].isKing) ||
      000584 F8 0D            [12] 1639 	ldhl	sp,	#13
      000586 2A               [ 8] 1640 	ld	a, (hl+)
      000587 07               [ 4] 1641 	rlca
      000588 E6 01            [ 8] 1642 	and	a,#0x01
      00058A 22               [ 8] 1643 	ld	(hl+), a
      00058B 23               [ 8] 1644 	inc	hl
      00058C 2A               [ 8] 1645 	ld	a, (hl+)
      00058D 4F               [ 4] 1646 	ld	c, a
      00058E 46               [ 8] 1647 	ld	b, (hl)
      00058F 03               [ 8] 1648 	inc	bc
      000590 03               [ 8] 1649 	inc	bc
      000591 F8 16            [12] 1650 	ldhl	sp,	#22
      000593 7E               [ 8] 1651 	ld	a, (hl)
      000594 B7               [ 4] 1652 	or	a, a
      000595 20 0C            [12] 1653 	jr	NZ, 00120$
      000597 F8 0E            [12] 1654 	ldhl	sp,	#14
      000599 7E               [ 8] 1655 	ld	a, (hl)
      00059A B7               [ 4] 1656 	or	a, a
      00059B 28 06            [12] 1657 	jr	Z, 00120$
      00059D 0A               [ 8] 1658 	ld	a, (bc)
      00059E 5F               [ 4] 1659 	ld	e, a
      00059F CB 43            [ 8] 1660 	bit	0, e
      0005A1 28 2A            [12] 1661 	jr	Z, 00114$
      0005A3                       1662 00120$:
                           0005A3  1663 	C$main.c$281$1_1$217	= .
                                   1664 	.globl	C$main.c$281$1_1$217
                                   1665 ;main.c:281: (currentPlayer == WHITE_PLAYER && dy > 0 && !pieces[selectedCoords].isKing)) {
      0005A3 F8 16            [12] 1666 	ldhl	sp,	#22
      0005A5 7E               [ 8] 1667 	ld	a, (hl)
      0005A6 3D               [ 4] 1668 	dec	a
      0005A7 20 28            [12] 1669 	jr	NZ, 00160$
      0005A9 F8 0C            [12] 1670 	ldhl	sp,	#12
      0005AB AF               [ 4] 1671 	xor	a, a
      0005AC 96               [ 8] 1672 	sub	a, (hl)
      0005AD 23               [ 8] 1673 	inc	hl
      0005AE 3E 00            [ 8] 1674 	ld	a, #0x00
      0005B0 9E               [ 8] 1675 	sbc	a, (hl)
      0005B1 3E 00            [ 8] 1676 	ld	a, #0x00
      0005B3 57               [ 4] 1677 	ld	d, a
      0005B4 5E               [ 8] 1678 	ld	e, (hl)
      0005B5 CB 7B            [ 8] 1679 	bit	7, e
      0005B7 28 07            [12] 1680 	jr	Z, 00255$
      0005B9 CB 7A            [ 8] 1681 	bit	7, d
      0005BB 20 08            [12] 1682 	jr	NZ, 00256$
      0005BD BF               [ 4] 1683 	cp	a, a
      0005BE 18 05            [12] 1684 	jr	00256$
      0005C0                       1685 00255$:
      0005C0 CB 7A            [ 8] 1686 	bit	7, d
      0005C2 28 01            [12] 1687 	jr	Z, 00256$
      0005C4 37               [ 4] 1688 	scf
      0005C5                       1689 00256$:
      0005C5 30 0A            [12] 1690 	jr	NC, 00160$
      0005C7 0A               [ 8] 1691 	ld	a, (bc)
      0005C8 4F               [ 4] 1692 	ld	c, a
      0005C9 CB 41            [ 8] 1693 	bit	0, c
      0005CB 20 04            [12] 1694 	jr	NZ, 00160$
      0005CD                       1695 00114$:
                           0005CD  1696 	C$main.c$282$2_1$219	= .
                                   1697 	.globl	C$main.c$282$2_1$219
                                   1698 ;main.c:282: return false;
      0005CD AF               [ 4] 1699 	xor	a, a
      0005CE C3r09r07         [16] 1700 	jp	00141$
                           0005D1  1701 	C$main.c$286$1_1$212	= .
                                   1702 	.globl	C$main.c$286$1_1$212
                                   1703 ;main.c:286: for (int i = 0; i < numPieces; i++) {
      0005D1                       1704 00160$:
      0005D1 01 00 00         [12] 1705 	ld	bc, #0x0000
      0005D4                       1706 00139$:
      0005D4 F8 04            [12] 1707 	ldhl	sp,	#4
      0005D6 79               [ 4] 1708 	ld	a, c
      0005D7 96               [ 8] 1709 	sub	a, (hl)
      0005D8 23               [ 8] 1710 	inc	hl
      0005D9 78               [ 4] 1711 	ld	a, b
      0005DA 9E               [ 8] 1712 	sbc	a, (hl)
      0005DB 78               [ 4] 1713 	ld	a, b
      0005DC 57               [ 4] 1714 	ld	d, a
      0005DD CB 7E            [12] 1715 	bit	7, (hl)
      0005DF 28 07            [12] 1716 	jr	Z, 00257$
      0005E1 CB 7A            [ 8] 1717 	bit	7, d
      0005E3 20 08            [12] 1718 	jr	NZ, 00258$
      0005E5 BF               [ 4] 1719 	cp	a, a
      0005E6 18 05            [12] 1720 	jr	00258$
      0005E8                       1721 00257$:
      0005E8 CB 7A            [ 8] 1722 	bit	7, d
      0005EA 28 01            [12] 1723 	jr	Z, 00258$
      0005EC 37               [ 4] 1724 	scf
      0005ED                       1725 00258$:
      0005ED 30 53            [12] 1726 	jr	NC, 00127$
                           0005EF  1727 	C$main.c$287$1_1$212	= .
                                   1728 	.globl	C$main.c$287$1_1$212
                                   1729 ;main.c:287: if (whitePieces[i].x == cursorx && whitePieces[i].y == cursory) {
      0005EF 69               [ 4] 1730 	ld	l, c
      0005F0 60               [ 4] 1731 	ld	h, b
      0005F1 29               [ 8] 1732 	add	hl, hl
      0005F2 09               [ 8] 1733 	add	hl, bc
      0005F3 E5               [16] 1734 	push	hl
      0005F4 7D               [ 4] 1735 	ld	a, l
      0005F5 F8 11            [12] 1736 	ldhl	sp,	#17
      0005F7 77               [ 8] 1737 	ld	(hl), a
      0005F8 E1               [12] 1738 	pop	hl
      0005F9 7C               [ 4] 1739 	ld	a, h
      0005FA F8 10            [12] 1740 	ldhl	sp,	#16
      0005FC 77               [ 8] 1741 	ld	(hl), a
      0005FD 11r67r02         [12] 1742 	ld	de, #_whitePieces
      000600 3A               [ 8] 1743 	ld	a, (hl-)
      000601 6E               [ 8] 1744 	ld	l, (hl)
      000602 67               [ 4] 1745 	ld	h, a
      000603 19               [ 8] 1746 	add	hl, de
      000604 5D               [ 4] 1747 	ld	e, l
      000605 54               [ 4] 1748 	ld	d, h
      000606 1A               [ 8] 1749 	ld	a, (de)
      000607 F8 11            [12] 1750 	ldhl	sp,	#17
      000609 22               [ 8] 1751 	ld	(hl+), a
      00060A 23               [ 8] 1752 	inc	hl
      00060B 3A               [ 8] 1753 	ld	a, (hl-)
      00060C 2B               [ 8] 1754 	dec	hl
      00060D 96               [ 8] 1755 	sub	a, (hl)
      00060E 20 0D            [12] 1756 	jr	NZ, 00122$
      000610 13               [ 8] 1757 	inc	de
      000611 1A               [ 8] 1758 	ld	a, (de)
      000612 5F               [ 4] 1759 	ld	e, a
      000613 F8 12            [12] 1760 	ldhl	sp,	#18
      000615 7E               [ 8] 1761 	ld	a, (hl)
      000616 93               [ 4] 1762 	sub	a, e
      000617 20 04            [12] 1763 	jr	NZ, 00122$
                           000619  1764 	C$main.c$288$4_1$222	= .
                                   1765 	.globl	C$main.c$288$4_1$222
                                   1766 ;main.c:288: return false;
      000619 AF               [ 4] 1767 	xor	a, a
      00061A C3r09r07         [16] 1768 	jp	00141$
      00061D                       1769 00122$:
                           00061D  1770 	C$main.c$290$1_1$212	= .
                                   1771 	.globl	C$main.c$290$1_1$212
                                   1772 ;main.c:290: if (blackPieces[i].x == cursorx && blackPieces[i].y == cursory) {
      00061D 11r43r02         [12] 1773 	ld	de, #_blackPieces
      000620 F8 0F            [12] 1774 	ldhl	sp,	#15
      000622 2A               [ 8] 1775 	ld	a,	(hl+)
      000623 66               [ 8] 1776 	ld	h, (hl)
      000624 6F               [ 4] 1777 	ld	l, a
      000625 19               [ 8] 1778 	add	hl, de
      000626 5D               [ 4] 1779 	ld	e, l
      000627 54               [ 4] 1780 	ld	d, h
      000628 1A               [ 8] 1781 	ld	a, (de)
      000629 F8 11            [12] 1782 	ldhl	sp,	#17
      00062B 22               [ 8] 1783 	ld	(hl+), a
      00062C 23               [ 8] 1784 	inc	hl
      00062D 3A               [ 8] 1785 	ld	a, (hl-)
      00062E 2B               [ 8] 1786 	dec	hl
      00062F 96               [ 8] 1787 	sub	a, (hl)
      000630 20 0D            [12] 1788 	jr	NZ, 00140$
      000632 13               [ 8] 1789 	inc	de
      000633 1A               [ 8] 1790 	ld	a, (de)
      000634 5F               [ 4] 1791 	ld	e, a
      000635 F8 12            [12] 1792 	ldhl	sp,	#18
      000637 7E               [ 8] 1793 	ld	a, (hl)
      000638 93               [ 4] 1794 	sub	a, e
      000639 20 04            [12] 1795 	jr	NZ, 00140$
                           00063B  1796 	C$main.c$291$4_1$223	= .
                                   1797 	.globl	C$main.c$291$4_1$223
                                   1798 ;main.c:291: return false;
      00063B AF               [ 4] 1799 	xor	a, a
      00063C C3r09r07         [16] 1800 	jp	00141$
      00063F                       1801 00140$:
                           00063F  1802 	C$main.c$286$2_1$220	= .
                                   1803 	.globl	C$main.c$286$2_1$220
                                   1804 ;main.c:286: for (int i = 0; i < numPieces; i++) {
      00063F 03               [ 8] 1805 	inc	bc
      000640 18 92            [12] 1806 	jr	00139$
      000642                       1807 00127$:
                           000642  1808 	C$main.c$295$1_1$217	= .
                                   1809 	.globl	C$main.c$295$1_1$217
                                   1810 ;main.c:295: if (abs(dx) > 2 * SQUARE_SIZE || abs(dy) > 2 * SQUARE_SIZE) {
      000642 F8 06            [12] 1811 	ldhl	sp,	#6
      000644 2A               [ 8] 1812 	ld	a, (hl+)
      000645 5F               [ 4] 1813 	ld	e, a
      000646 56               [ 8] 1814 	ld	d, (hl)
      000647 D5               [16] 1815 	push	de
      000648 CDr00r00         [24] 1816 	call	_abs
      00064B E1               [12] 1817 	pop	hl
      00064C 4B               [ 4] 1818 	ld	c, e
      00064D 42               [ 4] 1819 	ld	b, d
      00064E 58               [ 4] 1820 	ld	e, b
      00064F 16 00            [ 8] 1821 	ld	d, #0x00
      000651 3E 20            [ 8] 1822 	ld	a, #0x20
      000653 B9               [ 4] 1823 	cp	a, c
      000654 3E 00            [ 8] 1824 	ld	a, #0x00
      000656 98               [ 4] 1825 	sbc	a, b
      000657 CB 7B            [ 8] 1826 	bit	7, e
      000659 28 07            [12] 1827 	jr	Z, 00267$
      00065B CB 7A            [ 8] 1828 	bit	7, d
      00065D 20 08            [12] 1829 	jr	NZ, 00268$
      00065F BF               [ 4] 1830 	cp	a, a
      000660 18 05            [12] 1831 	jr	00268$
      000662                       1832 00267$:
      000662 CB 7A            [ 8] 1833 	bit	7, d
      000664 28 01            [12] 1834 	jr	Z, 00268$
      000666 37               [ 4] 1835 	scf
      000667                       1836 00268$:
      000667 38 27            [12] 1837 	jr	C, 00134$
      000669 F8 0C            [12] 1838 	ldhl	sp,	#12
      00066B 2A               [ 8] 1839 	ld	a, (hl+)
      00066C 5F               [ 4] 1840 	ld	e, a
      00066D 56               [ 8] 1841 	ld	d, (hl)
      00066E D5               [16] 1842 	push	de
      00066F CDr00r00         [24] 1843 	call	_abs
      000672 E1               [12] 1844 	pop	hl
      000673 4B               [ 4] 1845 	ld	c, e
      000674 42               [ 4] 1846 	ld	b, d
      000675 58               [ 4] 1847 	ld	e, b
      000676 16 00            [ 8] 1848 	ld	d, #0x00
      000678 3E 20            [ 8] 1849 	ld	a, #0x20
      00067A B9               [ 4] 1850 	cp	a, c
      00067B 3E 00            [ 8] 1851 	ld	a, #0x00
      00067D 98               [ 4] 1852 	sbc	a, b
      00067E CB 7B            [ 8] 1853 	bit	7, e
      000680 28 07            [12] 1854 	jr	Z, 00269$
      000682 CB 7A            [ 8] 1855 	bit	7, d
      000684 20 08            [12] 1856 	jr	NZ, 00270$
      000686 BF               [ 4] 1857 	cp	a, a
      000687 18 05            [12] 1858 	jr	00270$
      000689                       1859 00269$:
      000689 CB 7A            [ 8] 1860 	bit	7, d
      00068B 28 01            [12] 1861 	jr	Z, 00270$
      00068D 37               [ 4] 1862 	scf
      00068E                       1863 00270$:
      00068E 30 03            [12] 1864 	jr	NC, 00135$
      000690                       1865 00134$:
                           000690  1866 	C$main.c$296$2_1$224	= .
                                   1867 	.globl	C$main.c$296$2_1$224
                                   1868 ;main.c:296: return false;
      000690 AF               [ 4] 1869 	xor	a, a
      000691 18 76            [12] 1870 	jr	00141$
      000693                       1871 00135$:
                           000693  1872 	C$main.c$297$1_1$217	= .
                                   1873 	.globl	C$main.c$297$1_1$217
                                   1874 ;main.c:297: } else if (abs(dx) == 2 * SQUARE_SIZE || abs(dy) == 2 * SQUARE_SIZE) {
      000693 F8 06            [12] 1875 	ldhl	sp,	#6
      000695 2A               [ 8] 1876 	ld	a, (hl+)
      000696 5F               [ 4] 1877 	ld	e, a
      000697 56               [ 8] 1878 	ld	d, (hl)
      000698 D5               [16] 1879 	push	de
      000699 CDr00r00         [24] 1880 	call	_abs
      00069C E1               [12] 1881 	pop	hl
      00069D 7B               [ 4] 1882 	ld	a, e
      00069E D6 20            [ 8] 1883 	sub	a, #0x20
      0006A0 B2               [ 4] 1884 	or	a, d
      0006A1 28 10            [12] 1885 	jr	Z, 00131$
      0006A3 F8 0C            [12] 1886 	ldhl	sp,	#12
      0006A5 2A               [ 8] 1887 	ld	a, (hl+)
      0006A6 5F               [ 4] 1888 	ld	e, a
      0006A7 56               [ 8] 1889 	ld	d, (hl)
      0006A8 D5               [16] 1890 	push	de
      0006A9 CDr00r00         [24] 1891 	call	_abs
      0006AC E1               [12] 1892 	pop	hl
      0006AD 7B               [ 4] 1893 	ld	a, e
      0006AE D6 20            [ 8] 1894 	sub	a, #0x20
      0006B0 B2               [ 4] 1895 	or	a, d
      0006B1 20 54            [12] 1896 	jr	NZ, 00136$
      0006B3                       1897 00131$:
                           0006B3  1898 	C$main.c$299$2_1$225	= .
                                   1899 	.globl	C$main.c$299$2_1$225
                                   1900 ;main.c:299: UINT8 capturedX = pieces[selectedCoords].x + (dx / 2);
      0006B3 F8 08            [12] 1901 	ldhl	sp,#8
      0006B5 2A               [ 8] 1902 	ld	a, (hl+)
      0006B6 5F               [ 4] 1903 	ld	e, a
      0006B7 56               [ 8] 1904 	ld	d, (hl)
      0006B8 1A               [ 8] 1905 	ld	a, (de)
      0006B9 F8 11            [12] 1906 	ldhl	sp,	#17
      0006BB 77               [ 8] 1907 	ld	(hl), a
      0006BC F8 06            [12] 1908 	ldhl	sp,	#6
      0006BE 2A               [ 8] 1909 	ld	a, (hl+)
      0006BF 4F               [ 4] 1910 	ld	c, a
      0006C0 46               [ 8] 1911 	ld	b, (hl)
      0006C1 CB 7E            [12] 1912 	bit	7, (hl)
      0006C3 28 05            [12] 1913 	jr	Z, 00143$
      0006C5 2B               [ 8] 1914 	dec	hl
      0006C6 2A               [ 8] 1915 	ld	a, (hl+)
      0006C7 4F               [ 4] 1916 	ld	c, a
      0006C8 46               [ 8] 1917 	ld	b, (hl)
      0006C9 03               [ 8] 1918 	inc	bc
      0006CA                       1919 00143$:
      0006CA CB 28            [ 8] 1920 	sra	b
      0006CC CB 19            [ 8] 1921 	rr	c
      0006CE F8 11            [12] 1922 	ldhl	sp,	#17
      0006D0 7E               [ 8] 1923 	ld	a, (hl)
      0006D1 81               [ 4] 1924 	add	a, c
      0006D2 47               [ 4] 1925 	ld	b, a
                           0006D3  1926 	C$main.c$300$2_1$225	= .
                                   1927 	.globl	C$main.c$300$2_1$225
                                   1928 ;main.c:300: UINT8 capturedY = pieces[selectedCoords].y + (dy / 2);
      0006D3 F8 0A            [12] 1929 	ldhl	sp,#10
      0006D5 2A               [ 8] 1930 	ld	a, (hl+)
      0006D6 5F               [ 4] 1931 	ld	e, a
      0006D7 2A               [ 8] 1932 	ld	a, (hl+)
      0006D8 57               [ 4] 1933 	ld	d, a
      0006D9 1A               [ 8] 1934 	ld	a, (de)
      0006DA 4F               [ 4] 1935 	ld	c, a
      0006DB 2A               [ 8] 1936 	ld	a, (hl+)
      0006DC 5F               [ 4] 1937 	ld	e, a
      0006DD 2A               [ 8] 1938 	ld	a, (hl+)
      0006DE 57               [ 4] 1939 	ld	d, a
      0006DF 7E               [ 8] 1940 	ld	a, (hl)
      0006E0 B7               [ 4] 1941 	or	a, a
      0006E1 28 06            [12] 1942 	jr	Z, 00144$
      0006E3 2B               [ 8] 1943 	dec	hl
      0006E4 2B               [ 8] 1944 	dec	hl
      0006E5 2A               [ 8] 1945 	ld	a, (hl+)
      0006E6 5F               [ 4] 1946 	ld	e, a
      0006E7 56               [ 8] 1947 	ld	d, (hl)
      0006E8 13               [ 8] 1948 	inc	de
      0006E9                       1949 00144$:
      0006E9 CB 2A            [ 8] 1950 	sra	d
      0006EB CB 1B            [ 8] 1951 	rr	e
      0006ED 7B               [ 4] 1952 	ld	a, e
      0006EE 81               [ 4] 1953 	add	a, c
      0006EF 4F               [ 4] 1954 	ld	c, a
                           0006F0  1955 	C$main.c$301$2_1$225	= .
                                   1956 	.globl	C$main.c$301$2_1$225
                                   1957 ;main.c:301: if (capture(capturedX, capturedY, opponentPieces)) {
      0006F0 F8 02            [12] 1958 	ldhl	sp,	#2
      0006F2 2A               [ 8] 1959 	ld	a, (hl+)
      0006F3 5F               [ 4] 1960 	ld	e, a
      0006F4 56               [ 8] 1961 	ld	d, (hl)
      0006F5 D5               [16] 1962 	push	de
      0006F6 59               [ 4] 1963 	ld	e, c
      0006F7 78               [ 4] 1964 	ld	a, b
      0006F8 CDrABr03         [24] 1965 	call	_capture
      0006FB 4F               [ 4] 1966 	ld	c, a
      0006FC CB 41            [ 8] 1967 	bit	0, c
      0006FE 28 04            [12] 1968 	jr	Z, 00129$
                           000700  1969 	C$main.c$302$3_1$226	= .
                                   1970 	.globl	C$main.c$302$3_1$226
                                   1971 ;main.c:302: return true;
      000700 3E 01            [ 8] 1972 	ld	a, #0x01
      000702 18 05            [12] 1973 	jr	00141$
      000704                       1974 00129$:
                           000704  1975 	C$main.c$304$3_1$227	= .
                                   1976 	.globl	C$main.c$304$3_1$227
                                   1977 ;main.c:304: return false;
      000704 AF               [ 4] 1978 	xor	a, a
      000705 18 02            [12] 1979 	jr	00141$
      000707                       1980 00136$:
                           000707  1981 	C$main.c$307$1_1$217	= .
                                   1982 	.globl	C$main.c$307$1_1$217
                                   1983 ;main.c:307: return true;
      000707 3E 01            [ 8] 1984 	ld	a, #0x01
      000709                       1985 00141$:
                           000709  1986 	C$main.c$308$1_1$212	= .
                                   1987 	.globl	C$main.c$308$1_1$212
                                   1988 ;main.c:308: }
      000709 E8 14            [16] 1989 	add	sp, #20
      00070B E1               [12] 1990 	pop	hl
      00070C E8 03            [16] 1991 	add	sp, #3
      00070E E9               [ 4] 1992 	jp	(hl)
                           00070F  1993 	G$isCaptureMove$0$0	= .
                                   1994 	.globl	G$isCaptureMove$0$0
                           00070F  1995 	C$main.c$310$1_1$229	= .
                                   1996 	.globl	C$main.c$310$1_1$229
                                   1997 ;main.c:310: bool isCaptureMove(UINT8 cursorx, UINT8 cursory, int currentPlayer, int selectedCoords) {
                                   1998 ;	---------------------------------
                                   1999 ; Function isCaptureMove
                                   2000 ; ---------------------------------
      00070F                       2001 _isCaptureMove::
      00070F E8 F6            [16] 2002 	add	sp, #-10
      000711 F8 09            [12] 2003 	ldhl	sp,	#9
      000713 32               [ 8] 2004 	ld	(hl-), a
      000714 73               [ 8] 2005 	ld	(hl), e
                           000715  2006 	C$main.c$317$1_0$229	= .
                                   2007 	.globl	C$main.c$317$1_0$229
                                   2008 ;main.c:317: if (currentPlayer == BLACK_PLAYER) {
      000715 F8 0D            [12] 2009 	ldhl	sp,	#13
      000717 3A               [ 8] 2010 	ld	a, (hl-)
      000718 B6               [ 8] 2011 	or	a, (hl)
      000719 20 10            [12] 2012 	jr	NZ, 00102$
                           00071B  2013 	C$main.c$318$2_0$230	= .
                                   2014 	.globl	C$main.c$318$2_0$230
                                   2015 ;main.c:318: pieces = blackPieces;
      00071B F8 04            [12] 2016 	ldhl	sp,	#4
      00071D 36r43            [12] 2017 	ld	(hl), #<(_blackPieces)
      00071F 23               [ 8] 2018 	inc	hl
      000720 36s02            [12] 2019 	ld	(hl), #>(_blackPieces)
                           000722  2020 	C$main.c$319$2_0$230	= .
                                   2021 	.globl	C$main.c$319$2_0$230
                                   2022 ;main.c:319: opponentPieces = whitePieces;
      000722 F8 00            [12] 2023 	ldhl	sp,	#0
      000724 3Er67            [ 8] 2024 	ld	a, #<(_whitePieces)
      000726 22               [ 8] 2025 	ld	(hl+), a
      000727 36s02            [12] 2026 	ld	(hl), #>(_whitePieces)
                           000729  2027 	C$main.c$321$1_0$229	= .
                                   2028 	.globl	C$main.c$321$1_0$229
                                   2029 ;main.c:321: numOpponentPieces = MAX_WHITE_PIECES;
      000729 18 0E            [12] 2030 	jr	00103$
      00072B                       2031 00102$:
                           00072B  2032 	C$main.c$323$2_0$231	= .
                                   2033 	.globl	C$main.c$323$2_0$231
                                   2034 ;main.c:323: pieces = whitePieces;
      00072B F8 04            [12] 2035 	ldhl	sp,	#4
      00072D 36r67            [12] 2036 	ld	(hl), #<(_whitePieces)
      00072F 23               [ 8] 2037 	inc	hl
      000730 36s02            [12] 2038 	ld	(hl), #>(_whitePieces)
                           000732  2039 	C$main.c$324$2_0$231	= .
                                   2040 	.globl	C$main.c$324$2_0$231
                                   2041 ;main.c:324: opponentPieces = blackPieces;
      000732 F8 00            [12] 2042 	ldhl	sp,	#0
      000734 36r43            [12] 2043 	ld	(hl), #<(_blackPieces)
      000736 23               [ 8] 2044 	inc	hl
      000737 36s02            [12] 2045 	ld	(hl), #>(_blackPieces)
                           000739  2046 	C$main.c$326$1_0$229	= .
                                   2047 	.globl	C$main.c$326$1_0$229
                                   2048 ;main.c:326: numOpponentPieces = MAX_BLACK_PIECES;
      000739                       2049 00103$:
                           000739  2050 	C$main.c$329$1_1$232	= .
                                   2051 	.globl	C$main.c$329$1_1$232
                                   2052 ;main.c:329: int dx = cursorx - pieces[selectedCoords].x;
      000739 F8 09            [12] 2053 	ldhl	sp,	#9
      00073B 4E               [ 8] 2054 	ld	c, (hl)
      00073C 06 00            [ 8] 2055 	ld	b, #0x00
      00073E F8 0E            [12] 2056 	ldhl	sp,#14
      000740 2A               [ 8] 2057 	ld	a, (hl+)
      000741 5F               [ 4] 2058 	ld	e, a
      000742 56               [ 8] 2059 	ld	d, (hl)
      000743 6B               [ 4] 2060 	ld	l, e
      000744 62               [ 4] 2061 	ld	h, d
      000745 29               [ 8] 2062 	add	hl, hl
      000746 19               [ 8] 2063 	add	hl, de
      000747 E5               [16] 2064 	push	hl
      000748 7D               [ 4] 2065 	ld	a, l
      000749 F8 08            [12] 2066 	ldhl	sp,	#8
      00074B 77               [ 8] 2067 	ld	(hl), a
      00074C E1               [12] 2068 	pop	hl
      00074D 7C               [ 4] 2069 	ld	a, h
      00074E F8 07            [12] 2070 	ldhl	sp,	#7
      000750 32               [ 8] 2071 	ld	(hl-), a
      000751 2A               [ 8] 2072 	ld	a, (hl+)
      000752 5F               [ 4] 2073 	ld	e, a
      000753 56               [ 8] 2074 	ld	d, (hl)
      000754 F8 04            [12] 2075 	ldhl	sp,	#4
      000756 2A               [ 8] 2076 	ld	a,	(hl+)
      000757 66               [ 8] 2077 	ld	h, (hl)
      000758 6F               [ 4] 2078 	ld	l, a
      000759 19               [ 8] 2079 	add	hl, de
      00075A 5D               [ 4] 2080 	ld	e, l
      00075B 54               [ 4] 2081 	ld	d, h
      00075C 1A               [ 8] 2082 	ld	a, (de)
      00075D 6F               [ 4] 2083 	ld	l, a
                                   2084 ;	spillPairReg hl
                                   2085 ;	spillPairReg hl
      00075E 26 00            [ 8] 2086 	ld	h, #0x00
                                   2087 ;	spillPairReg hl
                                   2088 ;	spillPairReg hl
      000760 79               [ 4] 2089 	ld	a, c
      000761 95               [ 4] 2090 	sub	a, l
      000762 4F               [ 4] 2091 	ld	c, a
      000763 78               [ 4] 2092 	ld	a, b
      000764 9C               [ 4] 2093 	sbc	a, h
      000765 F8 06            [12] 2094 	ldhl	sp,	#6
      000767 71               [ 8] 2095 	ld	(hl), c
      000768 23               [ 8] 2096 	inc	hl
                           000769  2097 	C$main.c$330$1_1$232	= .
                                   2098 	.globl	C$main.c$330$1_1$232
                                   2099 ;main.c:330: int dy = cursory - pieces[selectedCoords].y;
      000769 22               [ 8] 2100 	ld	(hl+), a
                           00076A  2101 	C$main.c$331$1_1$232	= .
                                   2102 	.globl	C$main.c$331$1_1$232
                                   2103 ;main.c:331: if (abs(dx) == 2 * SQUARE_SIZE || abs(dy) == 2 * SQUARE_SIZE) {
      00076A 3A               [ 8] 2104 	ld	a, (hl-)
      00076B 2B               [ 8] 2105 	dec	hl
      00076C 4F               [ 4] 2106 	ld	c, a
      00076D 06 00            [ 8] 2107 	ld	b, #0x00
      00076F 13               [ 8] 2108 	inc	de
      000770 1A               [ 8] 2109 	ld	a, (de)
      000771 5F               [ 4] 2110 	ld	e, a
      000772 16 00            [ 8] 2111 	ld	d, #0x00
      000774 79               [ 4] 2112 	ld	a, c
      000775 93               [ 4] 2113 	sub	a, e
      000776 4F               [ 4] 2114 	ld	c, a
      000777 78               [ 4] 2115 	ld	a, b
      000778 9A               [ 4] 2116 	sbc	a, d
      000779 47               [ 4] 2117 	ld	b, a
      00077A C5               [16] 2118 	push	bc
      00077B 2A               [ 8] 2119 	ld	a, (hl+)
      00077C 5F               [ 4] 2120 	ld	e, a
      00077D 56               [ 8] 2121 	ld	d, (hl)
      00077E D5               [16] 2122 	push	de
      00077F CDr00r00         [24] 2123 	call	_abs
      000782 E1               [12] 2124 	pop	hl
      000783 C1               [12] 2125 	pop	bc
      000784 7B               [ 4] 2126 	ld	a, e
      000785 D6 20            [ 8] 2127 	sub	a, #0x20
      000787 B2               [ 4] 2128 	or	a, d
      000788 28 0B            [12] 2129 	jr	Z, 00125$
      00078A C5               [16] 2130 	push	bc
      00078B CDr00r00         [24] 2131 	call	_abs
      00078E E1               [12] 2132 	pop	hl
      00078F 7B               [ 4] 2133 	ld	a, e
      000790 D6 20            [ 8] 2134 	sub	a, #0x20
      000792 B2               [ 4] 2135 	or	a, d
      000793 20 76            [12] 2136 	jr	NZ, 00111$
                           000795  2137 	C$main.c$333$1_1$229	= .
                                   2138 	.globl	C$main.c$333$1_1$229
                                   2139 ;main.c:333: for (int i = 0; i < 12; i++) {
      000795                       2140 00125$:
      000795 01 00 00         [12] 2141 	ld	bc, #0x0000
      000798                       2142 00114$:
      000798 79               [ 4] 2143 	ld	a, c
      000799 D6 0C            [ 8] 2144 	sub	a, #0x0c
      00079B 78               [ 4] 2145 	ld	a, b
      00079C 17               [ 4] 2146 	rla
      00079D 3F               [ 4] 2147 	ccf
      00079E 1F               [ 4] 2148 	rra
      00079F DE 80            [ 8] 2149 	sbc	a, #0x80
      0007A1 30 68            [12] 2150 	jr	NC, 00111$
                           0007A3  2151 	C$main.c$334$4_1$235	= .
                                   2152 	.globl	C$main.c$334$4_1$235
                                   2153 ;main.c:334: UINT8 pieceX = opponentPieces[i].x;
      0007A3 69               [ 4] 2154 	ld	l, c
      0007A4 60               [ 4] 2155 	ld	h, b
      0007A5 29               [ 8] 2156 	add	hl, hl
      0007A6 09               [ 8] 2157 	add	hl, bc
      0007A7 E5               [16] 2158 	push	hl
      0007A8 7D               [ 4] 2159 	ld	a, l
      0007A9 F8 08            [12] 2160 	ldhl	sp,	#8
      0007AB 77               [ 8] 2161 	ld	(hl), a
      0007AC E1               [12] 2162 	pop	hl
      0007AD 7C               [ 4] 2163 	ld	a, h
      0007AE F8 07            [12] 2164 	ldhl	sp,	#7
      0007B0 32               [ 8] 2165 	ld	(hl-), a
      0007B1 2A               [ 8] 2166 	ld	a, (hl+)
      0007B2 5F               [ 4] 2167 	ld	e, a
      0007B3 56               [ 8] 2168 	ld	d, (hl)
      0007B4 E1               [12] 2169 	pop	hl
      0007B5 E5               [16] 2170 	push	hl
      0007B6 19               [ 8] 2171 	add	hl, de
      0007B7 5D               [ 4] 2172 	ld	e, l
      0007B8 54               [ 4] 2173 	ld	d, h
      0007B9 1A               [ 8] 2174 	ld	a, (de)
      0007BA 6F               [ 4] 2175 	ld	l, a
                                   2176 ;	spillPairReg hl
                                   2177 ;	spillPairReg hl
                           0007BB  2178 	C$main.c$335$4_1$235	= .
                                   2179 	.globl	C$main.c$335$4_1$235
                                   2180 ;main.c:335: UINT8 pieceY = opponentPieces[i].y;
      0007BB 13               [ 8] 2181 	inc	de
      0007BC 1A               [ 8] 2182 	ld	a, (de)
      0007BD 5F               [ 4] 2183 	ld	e, a
                           0007BE  2184 	C$main.c$338$4_1$235	= .
                                   2185 	.globl	C$main.c$338$4_1$235
                                   2186 ;main.c:338: UINT8 pieceLeft = pieceX - 4;
      0007BE 7D               [ 4] 2187 	ld	a, l
      0007BF C6 FC            [ 8] 2188 	add	a, #0xfc
      0007C1 57               [ 4] 2189 	ld	d, a
                           0007C2  2190 	C$main.c$339$4_1$235	= .
                                   2191 	.globl	C$main.c$339$4_1$235
                                   2192 ;main.c:339: UINT8 pieceRight = pieceX + 4;
      0007C2 7D               [ 4] 2193 	ld	a, l
      0007C3 C6 04            [ 8] 2194 	add	a, #0x04
      0007C5 F8 02            [12] 2195 	ldhl	sp,	#2
                           0007C7  2196 	C$main.c$340$4_1$235	= .
                                   2197 	.globl	C$main.c$340$4_1$235
                                   2198 ;main.c:340: UINT8 pieceTop = pieceY - 4;
      0007C7 22               [ 8] 2199 	ld	(hl+), a
      0007C8 7B               [ 4] 2200 	ld	a, e
      0007C9 C6 FC            [ 8] 2201 	add	a, #0xfc
                           0007CB  2202 	C$main.c$341$4_1$235	= .
                                   2203 	.globl	C$main.c$341$4_1$235
                                   2204 ;main.c:341: UINT8 pieceBottom = pieceY + 4;
      0007CB 22               [ 8] 2205 	ld	(hl+), a
      0007CC 7B               [ 4] 2206 	ld	a, e
      0007CD C6 04            [ 8] 2207 	add	a, #0x04
      0007CF 77               [ 8] 2208 	ld	(hl), a
                           0007D0  2209 	C$main.c$342$4_1$235	= .
                                   2210 	.globl	C$main.c$342$4_1$235
                                   2211 ;main.c:342: UINT8 tileLeft = cursorx - 4;
      0007D0 F8 09            [12] 2212 	ldhl	sp,	#9
      0007D2 5E               [ 8] 2213 	ld	e, (hl)
      0007D3 7B               [ 4] 2214 	ld	a, e
      0007D4 C6 FC            [ 8] 2215 	add	a, #0xfc
      0007D6 F8 05            [12] 2216 	ldhl	sp,	#5
                           0007D8  2217 	C$main.c$343$4_1$235	= .
                                   2218 	.globl	C$main.c$343$4_1$235
                                   2219 ;main.c:343: UINT8 tileRight = cursorx + 4;
      0007D8 22               [ 8] 2220 	ld	(hl+), a
      0007D9 7B               [ 4] 2221 	ld	a, e
      0007DA C6 04            [ 8] 2222 	add	a, #0x04
                           0007DC  2223 	C$main.c$344$4_1$235	= .
                                   2224 	.globl	C$main.c$344$4_1$235
                                   2225 ;main.c:344: UINT8 tileTop = cursory - 4;
      0007DC 22               [ 8] 2226 	ld	(hl+), a
      0007DD 23               [ 8] 2227 	inc	hl
      0007DE 6E               [ 8] 2228 	ld	l, (hl)
                                   2229 ;	spillPairReg hl
                                   2230 ;	spillPairReg hl
      0007DF 7D               [ 4] 2231 	ld	a, l
      0007E0 C6 FC            [ 8] 2232 	add	a, #0xfc
      0007E2 5F               [ 4] 2233 	ld	e, a
                           0007E3  2234 	C$main.c$345$4_1$235	= .
                                   2235 	.globl	C$main.c$345$4_1$235
                                   2236 ;main.c:345: UINT8 tileBottom = cursory + 4;
      0007E3 7D               [ 4] 2237 	ld	a, l
      0007E4 C6 04            [ 8] 2238 	add	a, #0x04
      0007E6 F8 07            [12] 2239 	ldhl	sp,	#7
      0007E8 77               [ 8] 2240 	ld	(hl), a
                           0007E9  2241 	C$main.c$348$4_1$235	= .
                                   2242 	.globl	C$main.c$348$4_1$235
                                   2243 ;main.c:348: if (tileLeft <= pieceRight && tileRight >= pieceLeft &&
      0007E9 F8 02            [12] 2244 	ldhl	sp,	#2
      0007EB 7E               [ 8] 2245 	ld	a, (hl)
      0007EC F8 05            [12] 2246 	ldhl	sp,	#5
      0007EE 96               [ 8] 2247 	sub	a, (hl)
      0007EF 38 17            [12] 2248 	jr	C, 00115$
      0007F1 23               [ 8] 2249 	inc	hl
      0007F2 7E               [ 8] 2250 	ld	a, (hl)
      0007F3 92               [ 4] 2251 	sub	a, d
      0007F4 38 12            [12] 2252 	jr	C, 00115$
                           0007F6  2253 	C$main.c$349$4_1$235	= .
                                   2254 	.globl	C$main.c$349$4_1$235
                                   2255 ;main.c:349: tileTop <= pieceBottom && tileBottom >= pieceTop) {
      0007F6 2B               [ 8] 2256 	dec	hl
      0007F7 2B               [ 8] 2257 	dec	hl
      0007F8 7E               [ 8] 2258 	ld	a, (hl)
      0007F9 93               [ 4] 2259 	sub	a, e
      0007FA 38 0C            [12] 2260 	jr	C, 00115$
      0007FC F8 07            [12] 2261 	ldhl	sp,	#7
      0007FE 7E               [ 8] 2262 	ld	a, (hl)
      0007FF F8 03            [12] 2263 	ldhl	sp,	#3
      000801 96               [ 8] 2264 	sub	a, (hl)
      000802 38 04            [12] 2265 	jr	C, 00115$
                           000804  2266 	C$main.c$351$5_1$236	= .
                                   2267 	.globl	C$main.c$351$5_1$236
                                   2268 ;main.c:351: return true;
      000804 3E 01            [ 8] 2269 	ld	a, #0x01
      000806 18 04            [12] 2270 	jr	00116$
      000808                       2271 00115$:
                           000808  2272 	C$main.c$333$3_1$234	= .
                                   2273 	.globl	C$main.c$333$3_1$234
                                   2274 ;main.c:333: for (int i = 0; i < 12; i++) {
      000808 03               [ 8] 2275 	inc	bc
      000809 18 8D            [12] 2276 	jr	00114$
      00080B                       2277 00111$:
                           00080B  2278 	C$main.c$356$1_1$232	= .
                                   2279 	.globl	C$main.c$356$1_1$232
                                   2280 ;main.c:356: return false;
      00080B AF               [ 4] 2281 	xor	a, a
      00080C                       2282 00116$:
                           00080C  2283 	C$main.c$357$1_1$229	= .
                                   2284 	.globl	C$main.c$357$1_1$229
                                   2285 ;main.c:357: }
      00080C E8 0A            [16] 2286 	add	sp, #10
      00080E E1               [12] 2287 	pop	hl
      00080F E8 04            [16] 2288 	add	sp, #4
      000811 E9               [ 4] 2289 	jp	(hl)
                           000812  2290 	G$testValidMove$0$0	= .
                                   2291 	.globl	G$testValidMove$0$0
                           000812  2292 	C$main.c$358$1_1$238	= .
                                   2293 	.globl	C$main.c$358$1_1$238
                                   2294 ;main.c:358: bool testValidMove(UINT8 cursorx, UINT8 cursory, UINT8 currentPlayer, int selectedCoords) {
                                   2295 ;	---------------------------------
                                   2296 ; Function testValidMove
                                   2297 ; ---------------------------------
      000812                       2298 _testValidMove::
      000812 E8 EE            [16] 2299 	add	sp, #-18
      000814 F8 11            [12] 2300 	ldhl	sp,	#17
      000816 32               [ 8] 2301 	ld	(hl-), a
      000817 73               [ 8] 2302 	ld	(hl), e
                           000818  2303 	C$main.c$365$1_0$238	= .
                                   2304 	.globl	C$main.c$365$1_0$238
                                   2305 ;main.c:365: if (currentPlayer == BLACK_PLAYER) {
      000818 F8 14            [12] 2306 	ldhl	sp,	#20
      00081A 7E               [ 8] 2307 	ld	a, (hl)
      00081B B7               [ 4] 2308 	or	a, a
      00081C 20 10            [12] 2309 	jr	NZ, 00102$
                           00081E  2310 	C$main.c$366$2_0$239	= .
                                   2311 	.globl	C$main.c$366$2_0$239
                                   2312 ;main.c:366: pieces = blackPieces;
      00081E F8 0C            [12] 2313 	ldhl	sp,	#12
      000820 36r43            [12] 2314 	ld	(hl), #<(_blackPieces)
      000822 23               [ 8] 2315 	inc	hl
      000823 36s02            [12] 2316 	ld	(hl), #>(_blackPieces)
                           000825  2317 	C$main.c$368$2_0$239	= .
                                   2318 	.globl	C$main.c$368$2_0$239
                                   2319 ;main.c:368: numPieces = MAX_BLACK_PIECES;
      000825 F8 02            [12] 2320 	ldhl	sp,	#2
      000827 3E 0C            [ 8] 2321 	ld	a, #0x0c
      000829 22               [ 8] 2322 	ld	(hl+), a
      00082A AF               [ 4] 2323 	xor	a, a
      00082B 77               [ 8] 2324 	ld	(hl), a
                           00082C  2325 	C$main.c$369$1_0$238	= .
                                   2326 	.globl	C$main.c$369$1_0$238
                                   2327 ;main.c:369: numOpponentPieces = MAX_WHITE_PIECES;
      00082C 18 0E            [12] 2328 	jr	00103$
      00082E                       2329 00102$:
                           00082E  2330 	C$main.c$371$2_0$240	= .
                                   2331 	.globl	C$main.c$371$2_0$240
                                   2332 ;main.c:371: pieces = whitePieces;
      00082E F8 0C            [12] 2333 	ldhl	sp,	#12
      000830 3Er67            [ 8] 2334 	ld	a, #<(_whitePieces)
      000832 22               [ 8] 2335 	ld	(hl+), a
      000833 36s02            [12] 2336 	ld	(hl), #>(_whitePieces)
                           000835  2337 	C$main.c$373$2_0$240	= .
                                   2338 	.globl	C$main.c$373$2_0$240
                                   2339 ;main.c:373: numPieces = MAX_WHITE_PIECES;
      000835 F8 02            [12] 2340 	ldhl	sp,	#2
      000837 3E 0C            [ 8] 2341 	ld	a, #0x0c
      000839 22               [ 8] 2342 	ld	(hl+), a
      00083A AF               [ 4] 2343 	xor	a, a
      00083B 77               [ 8] 2344 	ld	(hl), a
                           00083C  2345 	C$main.c$374$1_0$238	= .
                                   2346 	.globl	C$main.c$374$1_0$238
                                   2347 ;main.c:374: numOpponentPieces = MAX_BLACK_PIECES;
      00083C                       2348 00103$:
                           00083C  2349 	C$main.c$378$1_0$238	= .
                                   2350 	.globl	C$main.c$378$1_0$238
                                   2351 ;main.c:378: if (cursorx > 160 || cursorx <= 20 || cursory > 160 || cursory <= 20) {
      00083C 3E A0            [ 8] 2352 	ld	a, #0xa0
      00083E F8 11            [12] 2353 	ldhl	sp,	#17
      000840 96               [ 8] 2354 	sub	a, (hl)
      000841 38 10            [12] 2355 	jr	C, 00104$
      000843 3E 14            [ 8] 2356 	ld	a, #0x14
      000845 96               [ 8] 2357 	sub	a, (hl)
      000846 30 0B            [12] 2358 	jr	NC, 00104$
      000848 2B               [ 8] 2359 	dec	hl
      000849 3E A0            [ 8] 2360 	ld	a, #0xa0
      00084B 96               [ 8] 2361 	sub	a, (hl)
      00084C 38 05            [12] 2362 	jr	C, 00104$
      00084E 3E 14            [ 8] 2363 	ld	a, #0x14
      000850 96               [ 8] 2364 	sub	a, (hl)
      000851 38 04            [12] 2365 	jr	C, 00105$
      000853                       2366 00104$:
                           000853  2367 	C$main.c$379$2_0$241	= .
                                   2368 	.globl	C$main.c$379$2_0$241
                                   2369 ;main.c:379: return false;
      000853 AF               [ 4] 2370 	xor	a, a
      000854 C3rB8r0A         [16] 2371 	jp	00141$
      000857                       2372 00105$:
                           000857  2373 	C$main.c$383$1_0$238	= .
                                   2374 	.globl	C$main.c$383$1_0$238
                                   2375 ;main.c:383: if (selectedCoords < 0 || selectedCoords >= numPieces) {
      000857 F8 16            [12] 2376 	ldhl	sp,	#22
      000859 CB 7E            [12] 2377 	bit	7, (hl)
      00085B 20 21            [12] 2378 	jr	NZ, 00109$
      00085D F8 15            [12] 2379 	ldhl	sp,	#21
      00085F 5D               [ 4] 2380 	ld	e, l
      000860 54               [ 4] 2381 	ld	d, h
      000861 F8 02            [12] 2382 	ldhl	sp,	#2
      000863 1A               [ 8] 2383 	ld	a, (de)
      000864 13               [ 8] 2384 	inc	de
      000865 96               [ 8] 2385 	sub	a, (hl)
      000866 23               [ 8] 2386 	inc	hl
      000867 1A               [ 8] 2387 	ld	a, (de)
      000868 9E               [ 8] 2388 	sbc	a, (hl)
      000869 1A               [ 8] 2389 	ld	a, (de)
      00086A 57               [ 4] 2390 	ld	d, a
      00086B 5E               [ 8] 2391 	ld	e, (hl)
      00086C CB 7B            [ 8] 2392 	bit	7, e
      00086E 28 07            [12] 2393 	jr	Z, 00250$
      000870 CB 7A            [ 8] 2394 	bit	7, d
      000872 20 08            [12] 2395 	jr	NZ, 00251$
      000874 BF               [ 4] 2396 	cp	a, a
      000875 18 05            [12] 2397 	jr	00251$
      000877                       2398 00250$:
      000877 CB 7A            [ 8] 2399 	bit	7, d
      000879 28 01            [12] 2400 	jr	Z, 00251$
      00087B 37               [ 4] 2401 	scf
      00087C                       2402 00251$:
      00087C 38 04            [12] 2403 	jr	C, 00110$
      00087E                       2404 00109$:
                           00087E  2405 	C$main.c$384$2_0$242	= .
                                   2406 	.globl	C$main.c$384$2_0$242
                                   2407 ;main.c:384: return false;
      00087E AF               [ 4] 2408 	xor	a, a
      00087F C3rB8r0A         [16] 2409 	jp	00141$
      000882                       2410 00110$:
                           000882  2411 	C$main.c$388$1_1$243	= .
                                   2412 	.globl	C$main.c$388$1_1$243
                                   2413 ;main.c:388: int dx = cursorx - pieces[selectedCoords].x;
      000882 F8 11            [12] 2414 	ldhl	sp,	#17
      000884 7E               [ 8] 2415 	ld	a, (hl)
      000885 F8 0A            [12] 2416 	ldhl	sp,	#10
      000887 22               [ 8] 2417 	ld	(hl+), a
      000888 36 00            [12] 2418 	ld	(hl), #0x00
      00088A F8 15            [12] 2419 	ldhl	sp,#21
      00088C 2A               [ 8] 2420 	ld	a, (hl+)
      00088D 4F               [ 4] 2421 	ld	c, a
      00088E 46               [ 8] 2422 	ld	b, (hl)
      00088F 69               [ 4] 2423 	ld	l, c
      000890 60               [ 4] 2424 	ld	h, b
      000891 29               [ 8] 2425 	add	hl, hl
      000892 09               [ 8] 2426 	add	hl, bc
      000893 4D               [ 4] 2427 	ld	c, l
      000894 44               [ 4] 2428 	ld	b, h
      000895 F8 0C            [12] 2429 	ldhl	sp,	#12
      000897 2A               [ 8] 2430 	ld	a,	(hl+)
      000898 66               [ 8] 2431 	ld	h, (hl)
      000899 6F               [ 4] 2432 	ld	l, a
      00089A 09               [ 8] 2433 	add	hl, bc
      00089B E5               [16] 2434 	push	hl
      00089C 7D               [ 4] 2435 	ld	a, l
      00089D F8 10            [12] 2436 	ldhl	sp,	#16
      00089F 77               [ 8] 2437 	ld	(hl), a
      0008A0 E1               [12] 2438 	pop	hl
      0008A1 7C               [ 4] 2439 	ld	a, h
      0008A2 F8 0F            [12] 2440 	ldhl	sp,	#15
      0008A4 32               [ 8] 2441 	ld	(hl-), a
      0008A5 2A               [ 8] 2442 	ld	a, (hl+)
      0008A6 5F               [ 4] 2443 	ld	e, a
      0008A7 56               [ 8] 2444 	ld	d, (hl)
      0008A8 1A               [ 8] 2445 	ld	a, (de)
      0008A9 4F               [ 4] 2446 	ld	c, a
      0008AA 06 00            [ 8] 2447 	ld	b, #0x00
      0008AC F8 0A            [12] 2448 	ldhl	sp,#10
      0008AE 2A               [ 8] 2449 	ld	a, (hl+)
      0008AF 5F               [ 4] 2450 	ld	e, a
      0008B0 2A               [ 8] 2451 	ld	a, (hl+)
      0008B1 23               [ 8] 2452 	inc	hl
      0008B2 57               [ 4] 2453 	ld	d, a
      0008B3 7B               [ 4] 2454 	ld	a, e
      0008B4 91               [ 4] 2455 	sub	a, c
      0008B5 5F               [ 4] 2456 	ld	e, a
      0008B6 7A               [ 4] 2457 	ld	a, d
      0008B7 98               [ 4] 2458 	sbc	a, b
      0008B8 32               [ 8] 2459 	ld	(hl-), a
      0008B9 73               [ 8] 2460 	ld	(hl), e
      0008BA 7E               [ 8] 2461 	ld	a, (hl)
      0008BB F8 04            [12] 2462 	ldhl	sp,	#4
      0008BD 77               [ 8] 2463 	ld	(hl), a
      0008BE F8 0D            [12] 2464 	ldhl	sp,	#13
      0008C0 7E               [ 8] 2465 	ld	a, (hl)
      0008C1 F8 05            [12] 2466 	ldhl	sp,	#5
      0008C3 77               [ 8] 2467 	ld	(hl), a
                           0008C4  2468 	C$main.c$389$1_1$243	= .
                                   2469 	.globl	C$main.c$389$1_1$243
                                   2470 ;main.c:389: int dy = cursory - pieces[selectedCoords].y;
      0008C4 F8 10            [12] 2471 	ldhl	sp,	#16
      0008C6 7E               [ 8] 2472 	ld	a, (hl)
      0008C7 F8 00            [12] 2473 	ldhl	sp,	#0
      0008C9 22               [ 8] 2474 	ld	(hl+), a
      0008CA 36 00            [12] 2475 	ld	(hl), #0x00
      0008CC F8 0E            [12] 2476 	ldhl	sp,	#14
      0008CE 7E               [ 8] 2477 	ld	a, (hl)
      0008CF F8 06            [12] 2478 	ldhl	sp,	#6
      0008D1 77               [ 8] 2479 	ld	(hl), a
      0008D2 F8 0F            [12] 2480 	ldhl	sp,	#15
      0008D4 7E               [ 8] 2481 	ld	a, (hl)
      0008D5 F8 07            [12] 2482 	ldhl	sp,	#7
      0008D7 77               [ 8] 2483 	ld	(hl), a
      0008D8 F8 0E            [12] 2484 	ldhl	sp,#14
      0008DA 2A               [ 8] 2485 	ld	a, (hl+)
      0008DB 5F               [ 4] 2486 	ld	e, a
      0008DC 56               [ 8] 2487 	ld	d, (hl)
      0008DD 6B               [ 4] 2488 	ld	l, e
      0008DE 62               [ 4] 2489 	ld	h, d
      0008DF 23               [ 8] 2490 	inc	hl
      0008E0 E5               [16] 2491 	push	hl
      0008E1 7D               [ 4] 2492 	ld	a, l
      0008E2 F8 0A            [12] 2493 	ldhl	sp,	#10
      0008E4 77               [ 8] 2494 	ld	(hl), a
      0008E5 E1               [12] 2495 	pop	hl
      0008E6 7C               [ 4] 2496 	ld	a, h
      0008E7 F8 09            [12] 2497 	ldhl	sp,	#9
      0008E9 32               [ 8] 2498 	ld	(hl-), a
      0008EA 2A               [ 8] 2499 	ld	a, (hl+)
      0008EB 5F               [ 4] 2500 	ld	e, a
      0008EC 56               [ 8] 2501 	ld	d, (hl)
      0008ED 1A               [ 8] 2502 	ld	a, (de)
      0008EE F8 0D            [12] 2503 	ldhl	sp,	#13
      0008F0 77               [ 8] 2504 	ld	(hl), a
      0008F1 F8 0A            [12] 2505 	ldhl	sp,	#10
      0008F3 22               [ 8] 2506 	ld	(hl+), a
      0008F4 36 00            [12] 2507 	ld	(hl), #0x00
      0008F6 D1               [12] 2508 	pop	de
      0008F7 D5               [16] 2509 	push	de
      0008F8 3A               [ 8] 2510 	ld	a, (hl-)
      0008F9 6E               [ 8] 2511 	ld	l, (hl)
      0008FA 67               [ 4] 2512 	ld	h, a
      0008FB 7B               [ 4] 2513 	ld	a, e
      0008FC 95               [ 4] 2514 	sub	a, l
      0008FD 5F               [ 4] 2515 	ld	e, a
      0008FE 7A               [ 4] 2516 	ld	a, d
      0008FF 9C               [ 4] 2517 	sbc	a, h
      000900 F8 0D            [12] 2518 	ldhl	sp,	#13
      000902 32               [ 8] 2519 	ld	(hl-), a
      000903 73               [ 8] 2520 	ld	(hl), e
      000904 3A               [ 8] 2521 	ld	a, (hl-)
      000905 2B               [ 8] 2522 	dec	hl
      000906 77               [ 8] 2523 	ld	(hl), a
      000907 F8 0D            [12] 2524 	ldhl	sp,	#13
      000909 3A               [ 8] 2525 	ld	a, (hl-)
      00090A 2B               [ 8] 2526 	dec	hl
      00090B 77               [ 8] 2527 	ld	(hl), a
                           00090C  2528 	C$main.c$392$1_1$243	= .
                                   2529 	.globl	C$main.c$392$1_1$243
                                   2530 ;main.c:392: if (abs(dx) != abs(dy)) {
      00090C F8 04            [12] 2531 	ldhl	sp,	#4
      00090E 2A               [ 8] 2532 	ld	a, (hl+)
      00090F 5F               [ 4] 2533 	ld	e, a
      000910 56               [ 8] 2534 	ld	d, (hl)
      000911 D5               [16] 2535 	push	de
      000912 CDr00r00         [24] 2536 	call	_abs
      000915 E1               [12] 2537 	pop	hl
      000916 D5               [16] 2538 	push	de
      000917 F8 0C            [12] 2539 	ldhl	sp,	#12
      000919 2A               [ 8] 2540 	ld	a, (hl+)
      00091A 5F               [ 4] 2541 	ld	e, a
      00091B 56               [ 8] 2542 	ld	d, (hl)
      00091C D5               [16] 2543 	push	de
      00091D CDr00r00         [24] 2544 	call	_abs
      000920 E1               [12] 2545 	pop	hl
      000921 C1               [12] 2546 	pop	bc
      000922 7B               [ 4] 2547 	ld	a, e
      000923 91               [ 4] 2548 	sub	a, c
      000924 20 04            [12] 2549 	jr	NZ, 00252$
      000926 7A               [ 4] 2550 	ld	a, d
      000927 90               [ 4] 2551 	sub	a, b
      000928 28 04            [12] 2552 	jr	Z, 00113$
      00092A                       2553 00252$:
                           00092A  2554 	C$main.c$393$2_1$244	= .
                                   2555 	.globl	C$main.c$393$2_1$244
                                   2556 ;main.c:393: return false;
      00092A AF               [ 4] 2557 	xor	a, a
      00092B C3rB8r0A         [16] 2558 	jp	00141$
      00092E                       2559 00113$:
                           00092E  2560 	C$main.c$397$1_1$238	= .
                                   2561 	.globl	C$main.c$397$1_1$238
                                   2562 ;main.c:397: if ((currentPlayer == BLACK_PLAYER && dy < 0 && !pieces[selectedCoords].isKing) ||
      00092E F8 0B            [12] 2563 	ldhl	sp,	#11
      000930 2A               [ 8] 2564 	ld	a, (hl+)
      000931 07               [ 4] 2565 	rlca
      000932 E6 01            [ 8] 2566 	and	a,#0x01
      000934 22               [ 8] 2567 	ld	(hl+), a
      000935 23               [ 8] 2568 	inc	hl
      000936 2A               [ 8] 2569 	ld	a, (hl+)
      000937 4F               [ 4] 2570 	ld	c, a
      000938 46               [ 8] 2571 	ld	b, (hl)
      000939 03               [ 8] 2572 	inc	bc
      00093A 03               [ 8] 2573 	inc	bc
      00093B F8 14            [12] 2574 	ldhl	sp,	#20
      00093D 7E               [ 8] 2575 	ld	a, (hl)
      00093E B7               [ 4] 2576 	or	a, a
      00093F 20 0C            [12] 2577 	jr	NZ, 00120$
      000941 F8 0C            [12] 2578 	ldhl	sp,	#12
      000943 7E               [ 8] 2579 	ld	a, (hl)
      000944 B7               [ 4] 2580 	or	a, a
      000945 28 06            [12] 2581 	jr	Z, 00120$
      000947 0A               [ 8] 2582 	ld	a, (bc)
      000948 5F               [ 4] 2583 	ld	e, a
      000949 CB 43            [ 8] 2584 	bit	0, e
      00094B 28 2A            [12] 2585 	jr	Z, 00114$
      00094D                       2586 00120$:
                           00094D  2587 	C$main.c$398$1_1$243	= .
                                   2588 	.globl	C$main.c$398$1_1$243
                                   2589 ;main.c:398: (currentPlayer == WHITE_PLAYER && dy > 0 && !pieces[selectedCoords].isKing)) {
      00094D F8 14            [12] 2590 	ldhl	sp,	#20
      00094F 7E               [ 8] 2591 	ld	a, (hl)
      000950 3D               [ 4] 2592 	dec	a
      000951 20 28            [12] 2593 	jr	NZ, 00160$
      000953 F8 0A            [12] 2594 	ldhl	sp,	#10
      000955 AF               [ 4] 2595 	xor	a, a
      000956 96               [ 8] 2596 	sub	a, (hl)
      000957 23               [ 8] 2597 	inc	hl
      000958 3E 00            [ 8] 2598 	ld	a, #0x00
      00095A 9E               [ 8] 2599 	sbc	a, (hl)
      00095B 3E 00            [ 8] 2600 	ld	a, #0x00
      00095D 57               [ 4] 2601 	ld	d, a
      00095E 5E               [ 8] 2602 	ld	e, (hl)
      00095F CB 7B            [ 8] 2603 	bit	7, e
      000961 28 07            [12] 2604 	jr	Z, 00255$
      000963 CB 7A            [ 8] 2605 	bit	7, d
      000965 20 08            [12] 2606 	jr	NZ, 00256$
      000967 BF               [ 4] 2607 	cp	a, a
      000968 18 05            [12] 2608 	jr	00256$
      00096A                       2609 00255$:
      00096A CB 7A            [ 8] 2610 	bit	7, d
      00096C 28 01            [12] 2611 	jr	Z, 00256$
      00096E 37               [ 4] 2612 	scf
      00096F                       2613 00256$:
      00096F 30 0A            [12] 2614 	jr	NC, 00160$
      000971 0A               [ 8] 2615 	ld	a, (bc)
      000972 4F               [ 4] 2616 	ld	c, a
      000973 CB 41            [ 8] 2617 	bit	0, c
      000975 20 04            [12] 2618 	jr	NZ, 00160$
      000977                       2619 00114$:
                           000977  2620 	C$main.c$399$2_1$245	= .
                                   2621 	.globl	C$main.c$399$2_1$245
                                   2622 ;main.c:399: return false;
      000977 AF               [ 4] 2623 	xor	a, a
      000978 C3rB8r0A         [16] 2624 	jp	00141$
                           00097B  2625 	C$main.c$403$1_1$238	= .
                                   2626 	.globl	C$main.c$403$1_1$238
                                   2627 ;main.c:403: for (int i = 0; i < numPieces; i++) {
      00097B                       2628 00160$:
      00097B 01 00 00         [12] 2629 	ld	bc, #0x0000
      00097E                       2630 00139$:
      00097E F8 02            [12] 2631 	ldhl	sp,	#2
      000980 79               [ 4] 2632 	ld	a, c
      000981 96               [ 8] 2633 	sub	a, (hl)
      000982 23               [ 8] 2634 	inc	hl
      000983 78               [ 4] 2635 	ld	a, b
      000984 9E               [ 8] 2636 	sbc	a, (hl)
      000985 78               [ 4] 2637 	ld	a, b
      000986 57               [ 4] 2638 	ld	d, a
      000987 CB 7E            [12] 2639 	bit	7, (hl)
      000989 28 07            [12] 2640 	jr	Z, 00257$
      00098B CB 7A            [ 8] 2641 	bit	7, d
      00098D 20 08            [12] 2642 	jr	NZ, 00258$
      00098F BF               [ 4] 2643 	cp	a, a
      000990 18 05            [12] 2644 	jr	00258$
      000992                       2645 00257$:
      000992 CB 7A            [ 8] 2646 	bit	7, d
      000994 28 01            [12] 2647 	jr	Z, 00258$
      000996 37               [ 4] 2648 	scf
      000997                       2649 00258$:
      000997 30 53            [12] 2650 	jr	NC, 00127$
                           000999  2651 	C$main.c$404$1_1$238	= .
                                   2652 	.globl	C$main.c$404$1_1$238
                                   2653 ;main.c:404: if (whitePieces[i].x == cursorx && whitePieces[i].y == cursory) {
      000999 69               [ 4] 2654 	ld	l, c
      00099A 60               [ 4] 2655 	ld	h, b
      00099B 29               [ 8] 2656 	add	hl, hl
      00099C 09               [ 8] 2657 	add	hl, bc
      00099D E5               [16] 2658 	push	hl
      00099E 7D               [ 4] 2659 	ld	a, l
      00099F F8 0F            [12] 2660 	ldhl	sp,	#15
      0009A1 77               [ 8] 2661 	ld	(hl), a
      0009A2 E1               [12] 2662 	pop	hl
      0009A3 7C               [ 4] 2663 	ld	a, h
      0009A4 F8 0E            [12] 2664 	ldhl	sp,	#14
      0009A6 77               [ 8] 2665 	ld	(hl), a
      0009A7 11r67r02         [12] 2666 	ld	de, #_whitePieces
      0009AA 3A               [ 8] 2667 	ld	a, (hl-)
      0009AB 6E               [ 8] 2668 	ld	l, (hl)
      0009AC 67               [ 4] 2669 	ld	h, a
      0009AD 19               [ 8] 2670 	add	hl, de
      0009AE 5D               [ 4] 2671 	ld	e, l
      0009AF 54               [ 4] 2672 	ld	d, h
      0009B0 1A               [ 8] 2673 	ld	a, (de)
      0009B1 F8 0F            [12] 2674 	ldhl	sp,	#15
      0009B3 22               [ 8] 2675 	ld	(hl+), a
      0009B4 23               [ 8] 2676 	inc	hl
      0009B5 3A               [ 8] 2677 	ld	a, (hl-)
      0009B6 2B               [ 8] 2678 	dec	hl
      0009B7 96               [ 8] 2679 	sub	a, (hl)
      0009B8 20 0D            [12] 2680 	jr	NZ, 00122$
      0009BA 13               [ 8] 2681 	inc	de
      0009BB 1A               [ 8] 2682 	ld	a, (de)
      0009BC 5F               [ 4] 2683 	ld	e, a
      0009BD F8 10            [12] 2684 	ldhl	sp,	#16
      0009BF 7E               [ 8] 2685 	ld	a, (hl)
      0009C0 93               [ 4] 2686 	sub	a, e
      0009C1 20 04            [12] 2687 	jr	NZ, 00122$
                           0009C3  2688 	C$main.c$405$4_1$248	= .
                                   2689 	.globl	C$main.c$405$4_1$248
                                   2690 ;main.c:405: return false;
      0009C3 AF               [ 4] 2691 	xor	a, a
      0009C4 C3rB8r0A         [16] 2692 	jp	00141$
      0009C7                       2693 00122$:
                           0009C7  2694 	C$main.c$407$1_1$238	= .
                                   2695 	.globl	C$main.c$407$1_1$238
                                   2696 ;main.c:407: if (blackPieces[i].x == cursorx && blackPieces[i].y == cursory) {
      0009C7 11r43r02         [12] 2697 	ld	de, #_blackPieces
      0009CA F8 0D            [12] 2698 	ldhl	sp,	#13
      0009CC 2A               [ 8] 2699 	ld	a,	(hl+)
      0009CD 66               [ 8] 2700 	ld	h, (hl)
      0009CE 6F               [ 4] 2701 	ld	l, a
      0009CF 19               [ 8] 2702 	add	hl, de
      0009D0 5D               [ 4] 2703 	ld	e, l
      0009D1 54               [ 4] 2704 	ld	d, h
      0009D2 1A               [ 8] 2705 	ld	a, (de)
      0009D3 F8 0F            [12] 2706 	ldhl	sp,	#15
      0009D5 22               [ 8] 2707 	ld	(hl+), a
      0009D6 23               [ 8] 2708 	inc	hl
      0009D7 3A               [ 8] 2709 	ld	a, (hl-)
      0009D8 2B               [ 8] 2710 	dec	hl
      0009D9 96               [ 8] 2711 	sub	a, (hl)
      0009DA 20 0D            [12] 2712 	jr	NZ, 00140$
      0009DC 13               [ 8] 2713 	inc	de
      0009DD 1A               [ 8] 2714 	ld	a, (de)
      0009DE 5F               [ 4] 2715 	ld	e, a
      0009DF F8 10            [12] 2716 	ldhl	sp,	#16
      0009E1 7E               [ 8] 2717 	ld	a, (hl)
      0009E2 93               [ 4] 2718 	sub	a, e
      0009E3 20 04            [12] 2719 	jr	NZ, 00140$
                           0009E5  2720 	C$main.c$408$4_1$249	= .
                                   2721 	.globl	C$main.c$408$4_1$249
                                   2722 ;main.c:408: return false;
      0009E5 AF               [ 4] 2723 	xor	a, a
      0009E6 C3rB8r0A         [16] 2724 	jp	00141$
      0009E9                       2725 00140$:
                           0009E9  2726 	C$main.c$403$2_1$246	= .
                                   2727 	.globl	C$main.c$403$2_1$246
                                   2728 ;main.c:403: for (int i = 0; i < numPieces; i++) {
      0009E9 03               [ 8] 2729 	inc	bc
      0009EA 18 92            [12] 2730 	jr	00139$
      0009EC                       2731 00127$:
                           0009EC  2732 	C$main.c$412$1_1$243	= .
                                   2733 	.globl	C$main.c$412$1_1$243
                                   2734 ;main.c:412: if (abs(dx) > 2 * SQUARE_SIZE || abs(dy) > 2 * SQUARE_SIZE) {
      0009EC F8 04            [12] 2735 	ldhl	sp,	#4
      0009EE 2A               [ 8] 2736 	ld	a, (hl+)
      0009EF 5F               [ 4] 2737 	ld	e, a
      0009F0 56               [ 8] 2738 	ld	d, (hl)
      0009F1 D5               [16] 2739 	push	de
      0009F2 CDr00r00         [24] 2740 	call	_abs
      0009F5 E1               [12] 2741 	pop	hl
      0009F6 4B               [ 4] 2742 	ld	c, e
      0009F7 42               [ 4] 2743 	ld	b, d
      0009F8 58               [ 4] 2744 	ld	e, b
      0009F9 16 00            [ 8] 2745 	ld	d, #0x00
      0009FB 3E 20            [ 8] 2746 	ld	a, #0x20
      0009FD B9               [ 4] 2747 	cp	a, c
      0009FE 3E 00            [ 8] 2748 	ld	a, #0x00
      000A00 98               [ 4] 2749 	sbc	a, b
      000A01 CB 7B            [ 8] 2750 	bit	7, e
      000A03 28 07            [12] 2751 	jr	Z, 00267$
      000A05 CB 7A            [ 8] 2752 	bit	7, d
      000A07 20 08            [12] 2753 	jr	NZ, 00268$
      000A09 BF               [ 4] 2754 	cp	a, a
      000A0A 18 05            [12] 2755 	jr	00268$
      000A0C                       2756 00267$:
      000A0C CB 7A            [ 8] 2757 	bit	7, d
      000A0E 28 01            [12] 2758 	jr	Z, 00268$
      000A10 37               [ 4] 2759 	scf
      000A11                       2760 00268$:
      000A11 38 27            [12] 2761 	jr	C, 00134$
      000A13 F8 0A            [12] 2762 	ldhl	sp,	#10
      000A15 2A               [ 8] 2763 	ld	a, (hl+)
      000A16 5F               [ 4] 2764 	ld	e, a
      000A17 56               [ 8] 2765 	ld	d, (hl)
      000A18 D5               [16] 2766 	push	de
      000A19 CDr00r00         [24] 2767 	call	_abs
      000A1C E1               [12] 2768 	pop	hl
      000A1D 4B               [ 4] 2769 	ld	c, e
      000A1E 42               [ 4] 2770 	ld	b, d
      000A1F 58               [ 4] 2771 	ld	e, b
      000A20 16 00            [ 8] 2772 	ld	d, #0x00
      000A22 3E 20            [ 8] 2773 	ld	a, #0x20
      000A24 B9               [ 4] 2774 	cp	a, c
      000A25 3E 00            [ 8] 2775 	ld	a, #0x00
      000A27 98               [ 4] 2776 	sbc	a, b
      000A28 CB 7B            [ 8] 2777 	bit	7, e
      000A2A 28 07            [12] 2778 	jr	Z, 00269$
      000A2C CB 7A            [ 8] 2779 	bit	7, d
      000A2E 20 08            [12] 2780 	jr	NZ, 00270$
      000A30 BF               [ 4] 2781 	cp	a, a
      000A31 18 05            [12] 2782 	jr	00270$
      000A33                       2783 00269$:
      000A33 CB 7A            [ 8] 2784 	bit	7, d
      000A35 28 01            [12] 2785 	jr	Z, 00270$
      000A37 37               [ 4] 2786 	scf
      000A38                       2787 00270$:
      000A38 30 03            [12] 2788 	jr	NC, 00135$
      000A3A                       2789 00134$:
                           000A3A  2790 	C$main.c$413$2_1$250	= .
                                   2791 	.globl	C$main.c$413$2_1$250
                                   2792 ;main.c:413: return false;
      000A3A AF               [ 4] 2793 	xor	a, a
      000A3B 18 7B            [12] 2794 	jr	00141$
      000A3D                       2795 00135$:
                           000A3D  2796 	C$main.c$414$1_1$243	= .
                                   2797 	.globl	C$main.c$414$1_1$243
                                   2798 ;main.c:414: } else if (abs(dx) == 2 * SQUARE_SIZE || abs(dy) == 2 * SQUARE_SIZE) {
      000A3D F8 04            [12] 2799 	ldhl	sp,	#4
      000A3F 2A               [ 8] 2800 	ld	a, (hl+)
      000A40 5F               [ 4] 2801 	ld	e, a
      000A41 56               [ 8] 2802 	ld	d, (hl)
      000A42 D5               [16] 2803 	push	de
      000A43 CDr00r00         [24] 2804 	call	_abs
      000A46 E1               [12] 2805 	pop	hl
      000A47 7B               [ 4] 2806 	ld	a, e
      000A48 D6 20            [ 8] 2807 	sub	a, #0x20
      000A4A B2               [ 4] 2808 	or	a, d
      000A4B 28 10            [12] 2809 	jr	Z, 00131$
      000A4D F8 0A            [12] 2810 	ldhl	sp,	#10
      000A4F 2A               [ 8] 2811 	ld	a, (hl+)
      000A50 5F               [ 4] 2812 	ld	e, a
      000A51 56               [ 8] 2813 	ld	d, (hl)
      000A52 D5               [16] 2814 	push	de
      000A53 CDr00r00         [24] 2815 	call	_abs
      000A56 E1               [12] 2816 	pop	hl
      000A57 7B               [ 4] 2817 	ld	a, e
      000A58 D6 20            [ 8] 2818 	sub	a, #0x20
      000A5A B2               [ 4] 2819 	or	a, d
      000A5B 20 59            [12] 2820 	jr	NZ, 00136$
      000A5D                       2821 00131$:
                           000A5D  2822 	C$main.c$416$2_1$251	= .
                                   2823 	.globl	C$main.c$416$2_1$251
                                   2824 ;main.c:416: UINT8 capturedX = pieces[selectedCoords].x + (dx / 2);
      000A5D F8 06            [12] 2825 	ldhl	sp,#6
      000A5F 2A               [ 8] 2826 	ld	a, (hl+)
      000A60 5F               [ 4] 2827 	ld	e, a
      000A61 56               [ 8] 2828 	ld	d, (hl)
      000A62 1A               [ 8] 2829 	ld	a, (de)
      000A63 F8 0F            [12] 2830 	ldhl	sp,	#15
      000A65 77               [ 8] 2831 	ld	(hl), a
      000A66 F8 04            [12] 2832 	ldhl	sp,	#4
      000A68 2A               [ 8] 2833 	ld	a, (hl+)
      000A69 4F               [ 4] 2834 	ld	c, a
      000A6A 46               [ 8] 2835 	ld	b, (hl)
      000A6B CB 7E            [12] 2836 	bit	7, (hl)
      000A6D 28 05            [12] 2837 	jr	Z, 00143$
      000A6F 2B               [ 8] 2838 	dec	hl
      000A70 2A               [ 8] 2839 	ld	a, (hl+)
      000A71 4F               [ 4] 2840 	ld	c, a
      000A72 46               [ 8] 2841 	ld	b, (hl)
      000A73 03               [ 8] 2842 	inc	bc
      000A74                       2843 00143$:
      000A74 CB 28            [ 8] 2844 	sra	b
      000A76 CB 19            [ 8] 2845 	rr	c
      000A78 F8 0F            [12] 2846 	ldhl	sp,	#15
      000A7A 7E               [ 8] 2847 	ld	a, (hl)
      000A7B 81               [ 4] 2848 	add	a, c
      000A7C 47               [ 4] 2849 	ld	b, a
                           000A7D  2850 	C$main.c$417$2_1$251	= .
                                   2851 	.globl	C$main.c$417$2_1$251
                                   2852 ;main.c:417: UINT8 capturedY = pieces[selectedCoords].y + (dy / 2);
      000A7D F8 08            [12] 2853 	ldhl	sp,#8
      000A7F 2A               [ 8] 2854 	ld	a, (hl+)
      000A80 5F               [ 4] 2855 	ld	e, a
      000A81 2A               [ 8] 2856 	ld	a, (hl+)
      000A82 57               [ 4] 2857 	ld	d, a
      000A83 1A               [ 8] 2858 	ld	a, (de)
      000A84 4F               [ 4] 2859 	ld	c, a
      000A85 2A               [ 8] 2860 	ld	a, (hl+)
      000A86 5F               [ 4] 2861 	ld	e, a
      000A87 2A               [ 8] 2862 	ld	a, (hl+)
      000A88 57               [ 4] 2863 	ld	d, a
      000A89 7E               [ 8] 2864 	ld	a, (hl)
      000A8A B7               [ 4] 2865 	or	a, a
      000A8B 28 06            [12] 2866 	jr	Z, 00144$
      000A8D 2B               [ 8] 2867 	dec	hl
      000A8E 2B               [ 8] 2868 	dec	hl
      000A8F 2A               [ 8] 2869 	ld	a, (hl+)
      000A90 5F               [ 4] 2870 	ld	e, a
      000A91 56               [ 8] 2871 	ld	d, (hl)
      000A92 13               [ 8] 2872 	inc	de
      000A93                       2873 00144$:
      000A93 CB 2A            [ 8] 2874 	sra	d
      000A95 CB 1B            [ 8] 2875 	rr	e
      000A97 7B               [ 4] 2876 	ld	a, e
      000A98 81               [ 4] 2877 	add	a, c
      000A99 4F               [ 4] 2878 	ld	c, a
                           000A9A  2879 	C$main.c$418$2_1$251	= .
                                   2880 	.globl	C$main.c$418$2_1$251
                                   2881 ;main.c:418: if (isCaptureMove(capturedX, capturedY, currentPlayer, selectedCoords)) {
      000A9A F8 14            [12] 2882 	ldhl	sp,	#20
      000A9C 2A               [ 8] 2883 	ld	a, (hl+)
      000A9D 5F               [ 4] 2884 	ld	e, a
      000A9E 16 00            [ 8] 2885 	ld	d, #0x00
      000AA0 2A               [ 8] 2886 	ld	a, (hl+)
      000AA1 66               [ 8] 2887 	ld	h, (hl)
                                   2888 ;	spillPairReg hl
                                   2889 ;	spillPairReg hl
      000AA2 6F               [ 4] 2890 	ld	l, a
                                   2891 ;	spillPairReg hl
                                   2892 ;	spillPairReg hl
      000AA3 E5               [16] 2893 	push	hl
      000AA4 D5               [16] 2894 	push	de
      000AA5 59               [ 4] 2895 	ld	e, c
      000AA6 78               [ 4] 2896 	ld	a, b
      000AA7 CDr0Fr07         [24] 2897 	call	_isCaptureMove
      000AAA 4F               [ 4] 2898 	ld	c, a
      000AAB CB 41            [ 8] 2899 	bit	0, c
      000AAD 28 04            [12] 2900 	jr	Z, 00129$
                           000AAF  2901 	C$main.c$419$3_1$252	= .
                                   2902 	.globl	C$main.c$419$3_1$252
                                   2903 ;main.c:419: return true;
      000AAF 3E 01            [ 8] 2904 	ld	a, #0x01
      000AB1 18 05            [12] 2905 	jr	00141$
      000AB3                       2906 00129$:
                           000AB3  2907 	C$main.c$421$3_1$253	= .
                                   2908 	.globl	C$main.c$421$3_1$253
                                   2909 ;main.c:421: return false;
      000AB3 AF               [ 4] 2910 	xor	a, a
      000AB4 18 02            [12] 2911 	jr	00141$
      000AB6                       2912 00136$:
                           000AB6  2913 	C$main.c$424$1_1$243	= .
                                   2914 	.globl	C$main.c$424$1_1$243
                                   2915 ;main.c:424: return true;
      000AB6 3E 01            [ 8] 2916 	ld	a, #0x01
      000AB8                       2917 00141$:
                           000AB8  2918 	C$main.c$425$1_1$238	= .
                                   2919 	.globl	C$main.c$425$1_1$238
                                   2920 ;main.c:425: }
      000AB8 E8 12            [16] 2921 	add	sp, #18
      000ABA E1               [12] 2922 	pop	hl
      000ABB E8 03            [16] 2923 	add	sp, #3
      000ABD E9               [ 4] 2924 	jp	(hl)
                           000ABE  2925 	G$testMoves$0$0	= .
                                   2926 	.globl	G$testMoves$0$0
                           000ABE  2927 	C$main.c$427$1_1$255	= .
                                   2928 	.globl	C$main.c$427$1_1$255
                                   2929 ;main.c:427: void testMoves(UINT8 currentPlayer, int* validNonCaptureMoves, int* validCaptureMoves) {
                                   2930 ;	---------------------------------
                                   2931 ; Function testMoves
                                   2932 ; ---------------------------------
      000ABE                       2933 _testMoves::
      000ABE E8 CD            [16] 2934 	add	sp, #-51
      000AC0 F8 30            [12] 2935 	ldhl	sp,	#48
      000AC2 32               [ 8] 2936 	ld	(hl-), a
      000AC3 2B               [ 8] 2937 	dec	hl
      000AC4 7B               [ 4] 2938 	ld	a, e
      000AC5 22               [ 8] 2939 	ld	(hl+), a
                           000AC6  2940 	C$main.c$433$1_0$255	= .
                                   2941 	.globl	C$main.c$433$1_0$255
                                   2942 ;main.c:433: if (currentPlayer == BLACK_PLAYER) {
      000AC6 7A               [ 4] 2943 	ld	a, d
      000AC7 22               [ 8] 2944 	ld	(hl+), a
      000AC8 7E               [ 8] 2945 	ld	a, (hl)
      000AC9 B7               [ 4] 2946 	or	a, a
      000ACA 20 0F            [12] 2947 	jr	NZ, 00102$
                           000ACC  2948 	C$main.c$434$2_0$256	= .
                                   2949 	.globl	C$main.c$434$2_0$256
                                   2950 ;main.c:434: pieces = blackPieces;
      000ACC F8 20            [12] 2951 	ldhl	sp,	#32
      000ACE 3Er43            [ 8] 2952 	ld	a, #<(_blackPieces)
      000AD0 22               [ 8] 2953 	ld	(hl+), a
                           000AD1  2954 	C$main.c$436$2_0$256	= .
                                   2955 	.globl	C$main.c$436$2_0$256
                                   2956 ;main.c:436: numPieces = MAX_BLACK_PIECES;
      000AD1 3Es02            [ 8] 2957 	ld	a, #>(_blackPieces)
      000AD3 22               [ 8] 2958 	ld	(hl+), a
      000AD4 3E 0C            [ 8] 2959 	ld	a, #0x0c
      000AD6 22               [ 8] 2960 	ld	(hl+), a
      000AD7 AF               [ 4] 2961 	xor	a, a
      000AD8 77               [ 8] 2962 	ld	(hl), a
      000AD9 18 0D            [12] 2963 	jr	00103$
      000ADB                       2964 00102$:
                           000ADB  2965 	C$main.c$438$2_0$257	= .
                                   2966 	.globl	C$main.c$438$2_0$257
                                   2967 ;main.c:438: pieces = whitePieces;
      000ADB F8 20            [12] 2968 	ldhl	sp,	#32
      000ADD 3Er67            [ 8] 2969 	ld	a, #<(_whitePieces)
      000ADF 22               [ 8] 2970 	ld	(hl+), a
                           000AE0  2971 	C$main.c$440$2_0$257	= .
                                   2972 	.globl	C$main.c$440$2_0$257
                                   2973 ;main.c:440: numPieces = MAX_WHITE_PIECES;
      000AE0 3Es02            [ 8] 2974 	ld	a, #>(_whitePieces)
      000AE2 22               [ 8] 2975 	ld	(hl+), a
      000AE3 3E 0C            [ 8] 2976 	ld	a, #0x0c
      000AE5 22               [ 8] 2977 	ld	(hl+), a
      000AE6 AF               [ 4] 2978 	xor	a, a
      000AE7 77               [ 8] 2979 	ld	(hl), a
      000AE8                       2980 00103$:
                           000AE8  2981 	C$main.c$443$1_0$255	= .
                                   2982 	.globl	C$main.c$443$1_0$255
                                   2983 ;main.c:443: *validNonCaptureMoves = 0;
      000AE8 F8 2E            [12] 2984 	ldhl	sp,	#46
      000AEA 2A               [ 8] 2985 	ld	a,	(hl+)
      000AEB 66               [ 8] 2986 	ld	h, (hl)
      000AEC 6F               [ 4] 2987 	ld	l, a
      000AED AF               [ 4] 2988 	xor	a, a
      000AEE 22               [ 8] 2989 	ld	(hl+), a
      000AEF 77               [ 8] 2990 	ld	(hl), a
                           000AF0  2991 	C$main.c$444$1_0$255	= .
                                   2992 	.globl	C$main.c$444$1_0$255
                                   2993 ;main.c:444: *validCaptureMoves = 0;
      000AF0 F8 35            [12] 2994 	ldhl	sp,	#53
      000AF2 7E               [ 8] 2995 	ld	a, (hl)
      000AF3 F8 24            [12] 2996 	ldhl	sp,	#36
      000AF5 77               [ 8] 2997 	ld	(hl), a
      000AF6 F8 36            [12] 2998 	ldhl	sp,	#54
      000AF8 7E               [ 8] 2999 	ld	a, (hl)
      000AF9 F8 25            [12] 3000 	ldhl	sp,	#37
      000AFB 32               [ 8] 3001 	ld	(hl-), a
      000AFC 2A               [ 8] 3002 	ld	a,	(hl+)
      000AFD 66               [ 8] 3003 	ld	h, (hl)
      000AFE 6F               [ 4] 3004 	ld	l, a
      000AFF AF               [ 4] 3005 	xor	a, a
      000B00 22               [ 8] 3006 	ld	(hl+), a
      000B01 77               [ 8] 3007 	ld	(hl), a
                           000B02  3008 	C$main.c$447$3_0$259	= .
                                   3009 	.globl	C$main.c$447$3_0$259
                                   3010 ;main.c:447: for (int i = 0; i < numPieces; i++) {
      000B02 AF               [ 4] 3011 	xor	a, a
      000B03 F8 31            [12] 3012 	ldhl	sp,	#49
      000B05 22               [ 8] 3013 	ld	(hl+), a
      000B06 77               [ 8] 3014 	ld	(hl), a
      000B07                       3015 00115$:
      000B07 F8 31            [12] 3016 	ldhl	sp,	#49
      000B09 5D               [ 4] 3017 	ld	e, l
      000B0A 54               [ 4] 3018 	ld	d, h
      000B0B F8 22            [12] 3019 	ldhl	sp,	#34
      000B0D 1A               [ 8] 3020 	ld	a, (de)
      000B0E 13               [ 8] 3021 	inc	de
      000B0F 96               [ 8] 3022 	sub	a, (hl)
      000B10 23               [ 8] 3023 	inc	hl
      000B11 1A               [ 8] 3024 	ld	a, (de)
      000B12 9E               [ 8] 3025 	sbc	a, (hl)
      000B13 1A               [ 8] 3026 	ld	a, (de)
      000B14 57               [ 4] 3027 	ld	d, a
      000B15 5E               [ 8] 3028 	ld	e, (hl)
      000B16 CB 7B            [ 8] 3029 	bit	7, e
      000B18 28 07            [12] 3030 	jr	Z, 00156$
      000B1A CB 7A            [ 8] 3031 	bit	7, d
      000B1C 20 08            [12] 3032 	jr	NZ, 00157$
      000B1E BF               [ 4] 3033 	cp	a, a
      000B1F 18 05            [12] 3034 	jr	00157$
      000B21                       3035 00156$:
      000B21 CB 7A            [ 8] 3036 	bit	7, d
      000B23 28 01            [12] 3037 	jr	Z, 00157$
      000B25 37               [ 4] 3038 	scf
      000B26                       3039 00157$:
      000B26 D2r15r0D         [16] 3040 	jp	NC, 00117$
                           000B29  3041 	C$main.c$448$3_0$259	= .
                                   3042 	.globl	C$main.c$448$3_0$259
                                   3043 ;main.c:448: UINT8 pieceX = pieces[i].x;
      000B29 F8 31            [12] 3044 	ldhl	sp,#49
      000B2B 2A               [ 8] 3045 	ld	a, (hl+)
      000B2C 4F               [ 4] 3046 	ld	c, a
      000B2D 46               [ 8] 3047 	ld	b, (hl)
      000B2E 69               [ 4] 3048 	ld	l, c
      000B2F 60               [ 4] 3049 	ld	h, b
      000B30 29               [ 8] 3050 	add	hl, hl
      000B31 09               [ 8] 3051 	add	hl, bc
      000B32 E5               [16] 3052 	push	hl
      000B33 7D               [ 4] 3053 	ld	a, l
      000B34 F8 2E            [12] 3054 	ldhl	sp,	#46
      000B36 77               [ 8] 3055 	ld	(hl), a
      000B37 E1               [12] 3056 	pop	hl
      000B38 7C               [ 4] 3057 	ld	a, h
      000B39 F8 2D            [12] 3058 	ldhl	sp,	#45
      000B3B 32               [ 8] 3059 	ld	(hl-), a
      000B3C 2A               [ 8] 3060 	ld	a, (hl+)
      000B3D 5F               [ 4] 3061 	ld	e, a
      000B3E 56               [ 8] 3062 	ld	d, (hl)
      000B3F F8 20            [12] 3063 	ldhl	sp,	#32
      000B41 2A               [ 8] 3064 	ld	a,	(hl+)
      000B42 66               [ 8] 3065 	ld	h, (hl)
      000B43 6F               [ 4] 3066 	ld	l, a
      000B44 19               [ 8] 3067 	add	hl, de
      000B45 E5               [16] 3068 	push	hl
      000B46 7D               [ 4] 3069 	ld	a, l
      000B47 F8 2C            [12] 3070 	ldhl	sp,	#44
      000B49 77               [ 8] 3071 	ld	(hl), a
      000B4A E1               [12] 3072 	pop	hl
      000B4B 7C               [ 4] 3073 	ld	a, h
      000B4C F8 2B            [12] 3074 	ldhl	sp,	#43
      000B4E 32               [ 8] 3075 	ld	(hl-), a
      000B4F 2A               [ 8] 3076 	ld	a, (hl+)
      000B50 5F               [ 4] 3077 	ld	e, a
      000B51 2A               [ 8] 3078 	ld	a, (hl+)
      000B52 57               [ 4] 3079 	ld	d, a
      000B53 1A               [ 8] 3080 	ld	a, (de)
                           000B54  3081 	C$main.c$449$3_0$259	= .
                                   3082 	.globl	C$main.c$449$3_0$259
                                   3083 ;main.c:449: UINT8 pieceY = pieces[i].y;
      000B54 32               [ 8] 3084 	ld	(hl-), a
      000B55 2B               [ 8] 3085 	dec	hl
      000B56 2A               [ 8] 3086 	ld	a, (hl+)
      000B57 4F               [ 4] 3087 	ld	c, a
      000B58 2A               [ 8] 3088 	ld	a, (hl+)
      000B59 23               [ 8] 3089 	inc	hl
      000B5A 47               [ 4] 3090 	ld	b, a
      000B5B 03               [ 8] 3091 	inc	bc
      000B5C 0A               [ 8] 3092 	ld	a, (bc)
                           000B5D  3093 	C$main.c$452$3_0$259	= .
                                   3094 	.globl	C$main.c$452$3_0$259
                                   3095 ;main.c:452: int possibleMoves[8][2] = {
      000B5D 32               [ 8] 3096 	ld	(hl-), a
      000B5E 7E               [ 8] 3097 	ld	a, (hl)
      000B5F F8 26            [12] 3098 	ldhl	sp,	#38
      000B61 22               [ 8] 3099 	ld	(hl+), a
      000B62 AF               [ 4] 3100 	xor	a, a
      000B63 32               [ 8] 3101 	ld	(hl-), a
      000B64 2A               [ 8] 3102 	ld	a, (hl+)
      000B65 5F               [ 4] 3103 	ld	e, a
      000B66 56               [ 8] 3104 	ld	d, (hl)
      000B67 21 10 00         [12] 3105 	ld	hl, #0x0010
      000B6A 19               [ 8] 3106 	add	hl, de
      000B6B E5               [16] 3107 	push	hl
      000B6C 7D               [ 4] 3108 	ld	a, l
      000B6D F8 2C            [12] 3109 	ldhl	sp,	#44
      000B6F 77               [ 8] 3110 	ld	(hl), a
      000B70 E1               [12] 3111 	pop	hl
      000B71 7C               [ 4] 3112 	ld	a, h
      000B72 F8 2B            [12] 3113 	ldhl	sp,	#43
      000B74 32               [ 8] 3114 	ld	(hl-), a
      000B75 7E               [ 8] 3115 	ld	a, (hl)
      000B76 F8 00            [12] 3116 	ldhl	sp,	#0
      000B78 77               [ 8] 3117 	ld	(hl), a
      000B79 F8 2B            [12] 3118 	ldhl	sp,	#43
      000B7B 7E               [ 8] 3119 	ld	a, (hl)
      000B7C F8 01            [12] 3120 	ldhl	sp,	#1
      000B7E 77               [ 8] 3121 	ld	(hl), a
      000B7F F8 2D            [12] 3122 	ldhl	sp,	#45
      000B81 7E               [ 8] 3123 	ld	a, (hl)
      000B82 F8 28            [12] 3124 	ldhl	sp,	#40
      000B84 22               [ 8] 3125 	ld	(hl+), a
      000B85 AF               [ 4] 3126 	xor	a, a
      000B86 32               [ 8] 3127 	ld	(hl-), a
      000B87 2A               [ 8] 3128 	ld	a, (hl+)
      000B88 5F               [ 4] 3129 	ld	e, a
      000B89 56               [ 8] 3130 	ld	d, (hl)
      000B8A 21 10 00         [12] 3131 	ld	hl, #0x0010
      000B8D 19               [ 8] 3132 	add	hl, de
      000B8E 4D               [ 4] 3133 	ld	c, l
      000B8F 44               [ 4] 3134 	ld	b, h
      000B90 F8 02            [12] 3135 	ldhl	sp,	#2
      000B92 79               [ 4] 3136 	ld	a, c
      000B93 22               [ 8] 3137 	ld	(hl+), a
      000B94 70               [ 8] 3138 	ld	(hl), b
      000B95 F8 26            [12] 3139 	ldhl	sp,#38
      000B97 2A               [ 8] 3140 	ld	a, (hl+)
      000B98 5F               [ 4] 3141 	ld	e, a
      000B99 56               [ 8] 3142 	ld	d, (hl)
      000B9A 21 10 00         [12] 3143 	ld	hl, #0x0010
      000B9D 7B               [ 4] 3144 	ld	a, e
      000B9E 95               [ 4] 3145 	sub	a, l
      000B9F 5F               [ 4] 3146 	ld	e, a
      000BA0 7A               [ 4] 3147 	ld	a, d
      000BA1 9C               [ 4] 3148 	sbc	a, h
      000BA2 F8 2D            [12] 3149 	ldhl	sp,	#45
      000BA4 32               [ 8] 3150 	ld	(hl-), a
      000BA5 73               [ 8] 3151 	ld	(hl), e
      000BA6 7E               [ 8] 3152 	ld	a, (hl)
      000BA7 F8 04            [12] 3153 	ldhl	sp,	#4
      000BA9 77               [ 8] 3154 	ld	(hl), a
      000BAA F8 2D            [12] 3155 	ldhl	sp,	#45
      000BAC 7E               [ 8] 3156 	ld	a, (hl)
      000BAD F8 05            [12] 3157 	ldhl	sp,	#5
      000BAF 22               [ 8] 3158 	ld	(hl+), a
      000BB0 79               [ 4] 3159 	ld	a, c
      000BB1 22               [ 8] 3160 	ld	(hl+), a
      000BB2 70               [ 8] 3161 	ld	(hl), b
      000BB3 F8 2A            [12] 3162 	ldhl	sp,	#42
      000BB5 7E               [ 8] 3163 	ld	a, (hl)
      000BB6 F8 08            [12] 3164 	ldhl	sp,	#8
      000BB8 77               [ 8] 3165 	ld	(hl), a
      000BB9 F8 2B            [12] 3166 	ldhl	sp,	#43
      000BBB 7E               [ 8] 3167 	ld	a, (hl)
      000BBC F8 09            [12] 3168 	ldhl	sp,	#9
      000BBE 77               [ 8] 3169 	ld	(hl), a
      000BBF F8 28            [12] 3170 	ldhl	sp,#40
      000BC1 2A               [ 8] 3171 	ld	a, (hl+)
      000BC2 5F               [ 4] 3172 	ld	e, a
      000BC3 56               [ 8] 3173 	ld	d, (hl)
      000BC4 21 10 00         [12] 3174 	ld	hl, #0x0010
      000BC7 7B               [ 4] 3175 	ld	a, e
      000BC8 95               [ 4] 3176 	sub	a, l
      000BC9 5F               [ 4] 3177 	ld	e, a
      000BCA 7A               [ 4] 3178 	ld	a, d
      000BCB 9C               [ 4] 3179 	sbc	a, h
      000BCC 47               [ 4] 3180 	ld	b, a
      000BCD 4B               [ 4] 3181 	ld	c, e
      000BCE F8 0A            [12] 3182 	ldhl	sp,	#10
      000BD0 79               [ 4] 3183 	ld	a, c
      000BD1 22               [ 8] 3184 	ld	(hl+), a
      000BD2 70               [ 8] 3185 	ld	(hl), b
      000BD3 F8 2C            [12] 3186 	ldhl	sp,	#44
      000BD5 7E               [ 8] 3187 	ld	a, (hl)
      000BD6 F8 0C            [12] 3188 	ldhl	sp,	#12
      000BD8 77               [ 8] 3189 	ld	(hl), a
      000BD9 F8 2D            [12] 3190 	ldhl	sp,	#45
      000BDB 7E               [ 8] 3191 	ld	a, (hl)
      000BDC F8 0D            [12] 3192 	ldhl	sp,	#13
      000BDE 22               [ 8] 3193 	ld	(hl+), a
      000BDF 79               [ 4] 3194 	ld	a, c
      000BE0 22               [ 8] 3195 	ld	(hl+), a
      000BE1 70               [ 8] 3196 	ld	(hl), b
      000BE2 F8 26            [12] 3197 	ldhl	sp,#38
      000BE4 2A               [ 8] 3198 	ld	a, (hl+)
      000BE5 5F               [ 4] 3199 	ld	e, a
      000BE6 56               [ 8] 3200 	ld	d, (hl)
      000BE7 21 20 00         [12] 3201 	ld	hl, #0x0020
      000BEA 19               [ 8] 3202 	add	hl, de
      000BEB E5               [16] 3203 	push	hl
      000BEC 7D               [ 4] 3204 	ld	a, l
      000BED F8 2C            [12] 3205 	ldhl	sp,	#44
      000BEF 77               [ 8] 3206 	ld	(hl), a
      000BF0 E1               [12] 3207 	pop	hl
      000BF1 7C               [ 4] 3208 	ld	a, h
      000BF2 F8 2B            [12] 3209 	ldhl	sp,	#43
      000BF4 32               [ 8] 3210 	ld	(hl-), a
      000BF5 7E               [ 8] 3211 	ld	a, (hl)
      000BF6 F8 10            [12] 3212 	ldhl	sp,	#16
      000BF8 77               [ 8] 3213 	ld	(hl), a
      000BF9 F8 2B            [12] 3214 	ldhl	sp,	#43
      000BFB 7E               [ 8] 3215 	ld	a, (hl)
      000BFC F8 11            [12] 3216 	ldhl	sp,	#17
      000BFE 77               [ 8] 3217 	ld	(hl), a
      000BFF F8 28            [12] 3218 	ldhl	sp,#40
      000C01 2A               [ 8] 3219 	ld	a, (hl+)
      000C02 5F               [ 4] 3220 	ld	e, a
      000C03 56               [ 8] 3221 	ld	d, (hl)
      000C04 21 20 00         [12] 3222 	ld	hl, #0x0020
      000C07 19               [ 8] 3223 	add	hl, de
      000C08 4D               [ 4] 3224 	ld	c, l
      000C09 44               [ 4] 3225 	ld	b, h
      000C0A F8 12            [12] 3226 	ldhl	sp,	#18
      000C0C 79               [ 4] 3227 	ld	a, c
      000C0D 22               [ 8] 3228 	ld	(hl+), a
      000C0E 70               [ 8] 3229 	ld	(hl), b
      000C0F F8 26            [12] 3230 	ldhl	sp,#38
      000C11 2A               [ 8] 3231 	ld	a, (hl+)
      000C12 5F               [ 4] 3232 	ld	e, a
      000C13 56               [ 8] 3233 	ld	d, (hl)
      000C14 21 20 00         [12] 3234 	ld	hl, #0x0020
      000C17 7B               [ 4] 3235 	ld	a, e
      000C18 95               [ 4] 3236 	sub	a, l
      000C19 5F               [ 4] 3237 	ld	e, a
      000C1A 7A               [ 4] 3238 	ld	a, d
      000C1B 9C               [ 4] 3239 	sbc	a, h
      000C1C F8 2D            [12] 3240 	ldhl	sp,	#45
      000C1E 32               [ 8] 3241 	ld	(hl-), a
      000C1F 73               [ 8] 3242 	ld	(hl), e
      000C20 7E               [ 8] 3243 	ld	a, (hl)
      000C21 F8 14            [12] 3244 	ldhl	sp,	#20
      000C23 77               [ 8] 3245 	ld	(hl), a
      000C24 F8 2D            [12] 3246 	ldhl	sp,	#45
      000C26 7E               [ 8] 3247 	ld	a, (hl)
      000C27 F8 15            [12] 3248 	ldhl	sp,	#21
      000C29 22               [ 8] 3249 	ld	(hl+), a
      000C2A 79               [ 4] 3250 	ld	a, c
      000C2B 22               [ 8] 3251 	ld	(hl+), a
      000C2C 70               [ 8] 3252 	ld	(hl), b
      000C2D F8 2A            [12] 3253 	ldhl	sp,	#42
      000C2F 7E               [ 8] 3254 	ld	a, (hl)
      000C30 F8 18            [12] 3255 	ldhl	sp,	#24
      000C32 77               [ 8] 3256 	ld	(hl), a
      000C33 F8 2B            [12] 3257 	ldhl	sp,	#43
      000C35 7E               [ 8] 3258 	ld	a, (hl)
      000C36 F8 19            [12] 3259 	ldhl	sp,	#25
      000C38 77               [ 8] 3260 	ld	(hl), a
      000C39 F8 28            [12] 3261 	ldhl	sp,#40
      000C3B 2A               [ 8] 3262 	ld	a, (hl+)
      000C3C 5F               [ 4] 3263 	ld	e, a
      000C3D 56               [ 8] 3264 	ld	d, (hl)
      000C3E 21 20 00         [12] 3265 	ld	hl, #0x0020
      000C41 7B               [ 4] 3266 	ld	a, e
      000C42 95               [ 4] 3267 	sub	a, l
      000C43 5F               [ 4] 3268 	ld	e, a
      000C44 7A               [ 4] 3269 	ld	a, d
      000C45 9C               [ 4] 3270 	sbc	a, h
      000C46 47               [ 4] 3271 	ld	b, a
      000C47 4B               [ 4] 3272 	ld	c, e
      000C48 F8 1A            [12] 3273 	ldhl	sp,	#26
      000C4A 79               [ 4] 3274 	ld	a, c
      000C4B 22               [ 8] 3275 	ld	(hl+), a
      000C4C 70               [ 8] 3276 	ld	(hl), b
      000C4D F8 2C            [12] 3277 	ldhl	sp,	#44
      000C4F 7E               [ 8] 3278 	ld	a, (hl)
      000C50 F8 1C            [12] 3279 	ldhl	sp,	#28
      000C52 77               [ 8] 3280 	ld	(hl), a
      000C53 F8 2D            [12] 3281 	ldhl	sp,	#45
      000C55 7E               [ 8] 3282 	ld	a, (hl)
      000C56 F8 1D            [12] 3283 	ldhl	sp,	#29
      000C58 22               [ 8] 3284 	ld	(hl+), a
      000C59 79               [ 4] 3285 	ld	a, c
      000C5A 22               [ 8] 3286 	ld	(hl+), a
      000C5B 70               [ 8] 3287 	ld	(hl), b
                           000C5C  3288 	C$main.c$463$2_0$255	= .
                                   3289 	.globl	C$main.c$463$2_0$255
                                   3290 ;main.c:463: for (int j = 0; j < 8; j++) {
      000C5C 01 00 00         [12] 3291 	ld	bc, #0x0000
      000C5F                       3292 00112$:
      000C5F 79               [ 4] 3293 	ld	a, c
      000C60 D6 08            [ 8] 3294 	sub	a, #0x08
      000C62 78               [ 4] 3295 	ld	a, b
      000C63 17               [ 4] 3296 	rla
      000C64 3F               [ 4] 3297 	ccf
      000C65 1F               [ 4] 3298 	rra
      000C66 DE 80            [ 8] 3299 	sbc	a, #0x80
      000C68 D2r0Ar0D         [16] 3300 	jp	NC, 00116$
                           000C6B  3301 	C$main.c$464$5_0$261	= .
                                   3302 	.globl	C$main.c$464$5_0$261
                                   3303 ;main.c:464: UINT8 moveX = possibleMoves[j][0];
      000C6B 69               [ 4] 3304 	ld	l, c
      000C6C 60               [ 4] 3305 	ld	h, b
      000C6D 29               [ 8] 3306 	add	hl, hl
      000C6E 29               [ 8] 3307 	add	hl, hl
      000C6F E5               [16] 3308 	push	hl
      000C70 21 02 00         [12] 3309 	ld	hl, #2
      000C73 39               [ 8] 3310 	add	hl, sp
      000C74 5D               [ 4] 3311 	ld	e, l
      000C75 54               [ 4] 3312 	ld	d, h
      000C76 E1               [12] 3313 	pop	hl
      000C77 19               [ 8] 3314 	add	hl, de
                           000C78  3315 	C$main.c$465$5_0$261	= .
                                   3316 	.globl	C$main.c$465$5_0$261
                                   3317 ;main.c:465: UINT8 moveY = possibleMoves[j][1];
      000C78 2A               [ 8] 3318 	ld	a, (hl+)
      000C79 23               [ 8] 3319 	inc	hl
      000C7A 57               [ 4] 3320 	ld	d, a
      000C7B 7E               [ 8] 3321 	ld	a, (hl)
      000C7C F8 2D            [12] 3322 	ldhl	sp,	#45
      000C7E 77               [ 8] 3323 	ld	(hl), a
                           000C7F  3324 	C$main.c$468$5_0$261	= .
                                   3325 	.globl	C$main.c$468$5_0$261
                                   3326 ;main.c:468: if (testValidMove(moveX, moveY, currentPlayer, i)) {
      000C7F C5               [16] 3327 	push	bc
      000C80 D5               [16] 3328 	push	de
      000C81 F8 35            [12] 3329 	ldhl	sp,	#53
      000C83 2A               [ 8] 3330 	ld	a, (hl+)
      000C84 66               [ 8] 3331 	ld	h, (hl)
                                   3332 ;	spillPairReg hl
                                   3333 ;	spillPairReg hl
      000C85 6F               [ 4] 3334 	ld	l, a
                                   3335 ;	spillPairReg hl
                                   3336 ;	spillPairReg hl
      000C86 E5               [16] 3337 	push	hl
      000C87 F8 36            [12] 3338 	ldhl	sp,	#54
      000C89 7E               [ 8] 3339 	ld	a, (hl)
      000C8A F5               [16] 3340 	push	af
      000C8B 33               [ 8] 3341 	inc	sp
      000C8C F8 34            [12] 3342 	ldhl	sp,	#52
      000C8E 5E               [ 8] 3343 	ld	e, (hl)
      000C8F 7A               [ 4] 3344 	ld	a, d
      000C90 CDr12r08         [24] 3345 	call	_testValidMove
      000C93 6F               [ 4] 3346 	ld	l, a
                                   3347 ;	spillPairReg hl
                                   3348 ;	spillPairReg hl
      000C94 D1               [12] 3349 	pop	de
      000C95 C1               [12] 3350 	pop	bc
      000C96 CB 45            [ 8] 3351 	bit	0, l
      000C98 28 6C            [12] 3352 	jr	Z, 00113$
                           000C9A  3353 	C$main.c$469$6_0$262	= .
                                   3354 	.globl	C$main.c$469$6_0$262
                                   3355 ;main.c:469: if (!isCaptureMove(moveX, moveY, currentPlayer, i)) {
      000C9A F8 30            [12] 3356 	ldhl	sp,	#48
      000C9C 2A               [ 8] 3357 	ld	a, (hl+)
      000C9D 1E 00            [ 8] 3358 	ld	e, #0x00
      000C9F C5               [16] 3359 	push	bc
      000CA0 F5               [16] 3360 	push	af
      000CA1 2A               [ 8] 3361 	ld	a, (hl+)
      000CA2 66               [ 8] 3362 	ld	h, (hl)
                                   3363 ;	spillPairReg hl
                                   3364 ;	spillPairReg hl
      000CA3 6F               [ 4] 3365 	ld	l, a
                                   3366 ;	spillPairReg hl
                                   3367 ;	spillPairReg hl
      000CA4 F1               [12] 3368 	pop	af
      000CA5 E5               [16] 3369 	push	hl
      000CA6 6F               [ 4] 3370 	ld	l, a
                                   3371 ;	spillPairReg hl
                                   3372 ;	spillPairReg hl
      000CA7 63               [ 4] 3373 	ld	h, e
                                   3374 ;	spillPairReg hl
                                   3375 ;	spillPairReg hl
      000CA8 E5               [16] 3376 	push	hl
      000CA9 F8 33            [12] 3377 	ldhl	sp,	#51
      000CAB 5E               [ 8] 3378 	ld	e, (hl)
      000CAC 7A               [ 4] 3379 	ld	a, d
      000CAD CDr0Fr07         [24] 3380 	call	_isCaptureMove
      000CB0 5F               [ 4] 3381 	ld	e, a
      000CB1 C1               [12] 3382 	pop	bc
      000CB2 CB 43            [ 8] 3383 	bit	0, e
      000CB4 20 28            [12] 3384 	jr	NZ, 00105$
                           000CB6  3385 	C$main.c$470$7_0$263	= .
                                   3386 	.globl	C$main.c$470$7_0$263
                                   3387 ;main.c:470: (*validNonCaptureMoves)++;
      000CB6 F8 2E            [12] 3388 	ldhl	sp,#46
      000CB8 2A               [ 8] 3389 	ld	a, (hl+)
      000CB9 5F               [ 4] 3390 	ld	e, a
      000CBA 56               [ 8] 3391 	ld	d, (hl)
      000CBB 1A               [ 8] 3392 	ld	a, (de)
      000CBC F8 2A            [12] 3393 	ldhl	sp,	#42
      000CBE 22               [ 8] 3394 	ld	(hl+), a
      000CBF 13               [ 8] 3395 	inc	de
      000CC0 1A               [ 8] 3396 	ld	a, (de)
      000CC1 32               [ 8] 3397 	ld	(hl-), a
      000CC2 2A               [ 8] 3398 	ld	a, (hl+)
      000CC3 5F               [ 4] 3399 	ld	e, a
      000CC4 56               [ 8] 3400 	ld	d, (hl)
      000CC5 6B               [ 4] 3401 	ld	l, e
      000CC6 62               [ 4] 3402 	ld	h, d
      000CC7 23               [ 8] 3403 	inc	hl
      000CC8 E5               [16] 3404 	push	hl
      000CC9 7D               [ 4] 3405 	ld	a, l
      000CCA F8 2E            [12] 3406 	ldhl	sp,	#46
      000CCC 77               [ 8] 3407 	ld	(hl), a
      000CCD E1               [12] 3408 	pop	hl
      000CCE 7C               [ 4] 3409 	ld	a, h
      000CCF F8 2D            [12] 3410 	ldhl	sp,	#45
      000CD1 22               [ 8] 3411 	ld	(hl+), a
      000CD2 2A               [ 8] 3412 	ld	a, (hl+)
      000CD3 5F               [ 4] 3413 	ld	e, a
      000CD4 56               [ 8] 3414 	ld	d, (hl)
      000CD5 F8 2C            [12] 3415 	ldhl	sp,	#44
      000CD7 2A               [ 8] 3416 	ld	a, (hl+)
      000CD8 12               [ 8] 3417 	ld	(de), a
      000CD9 13               [ 8] 3418 	inc	de
      000CDA 7E               [ 8] 3419 	ld	a, (hl)
      000CDB 12               [ 8] 3420 	ld	(de), a
      000CDC 18 28            [12] 3421 	jr	00113$
      000CDE                       3422 00105$:
                           000CDE  3423 	C$main.c$472$7_0$264	= .
                                   3424 	.globl	C$main.c$472$7_0$264
                                   3425 ;main.c:472: (*validCaptureMoves)++;
      000CDE F8 24            [12] 3426 	ldhl	sp,#36
      000CE0 2A               [ 8] 3427 	ld	a, (hl+)
      000CE1 5F               [ 4] 3428 	ld	e, a
      000CE2 56               [ 8] 3429 	ld	d, (hl)
      000CE3 1A               [ 8] 3430 	ld	a, (de)
      000CE4 F8 2A            [12] 3431 	ldhl	sp,	#42
      000CE6 22               [ 8] 3432 	ld	(hl+), a
      000CE7 13               [ 8] 3433 	inc	de
      000CE8 1A               [ 8] 3434 	ld	a, (de)
      000CE9 32               [ 8] 3435 	ld	(hl-), a
      000CEA 2A               [ 8] 3436 	ld	a, (hl+)
      000CEB 5F               [ 4] 3437 	ld	e, a
      000CEC 56               [ 8] 3438 	ld	d, (hl)
      000CED 6B               [ 4] 3439 	ld	l, e
      000CEE 62               [ 4] 3440 	ld	h, d
      000CEF 23               [ 8] 3441 	inc	hl
      000CF0 E5               [16] 3442 	push	hl
      000CF1 7D               [ 4] 3443 	ld	a, l
      000CF2 F8 2E            [12] 3444 	ldhl	sp,	#46
      000CF4 77               [ 8] 3445 	ld	(hl), a
      000CF5 E1               [12] 3446 	pop	hl
      000CF6 7C               [ 4] 3447 	ld	a, h
      000CF7 F8 2D            [12] 3448 	ldhl	sp,	#45
      000CF9 77               [ 8] 3449 	ld	(hl), a
      000CFA F8 24            [12] 3450 	ldhl	sp,#36
      000CFC 2A               [ 8] 3451 	ld	a, (hl+)
      000CFD 5F               [ 4] 3452 	ld	e, a
      000CFE 56               [ 8] 3453 	ld	d, (hl)
      000CFF F8 2C            [12] 3454 	ldhl	sp,	#44
      000D01 2A               [ 8] 3455 	ld	a, (hl+)
      000D02 12               [ 8] 3456 	ld	(de), a
      000D03 13               [ 8] 3457 	inc	de
      000D04 7E               [ 8] 3458 	ld	a, (hl)
      000D05 12               [ 8] 3459 	ld	(de), a
      000D06                       3460 00113$:
                           000D06  3461 	C$main.c$463$4_0$260	= .
                                   3462 	.globl	C$main.c$463$4_0$260
                                   3463 ;main.c:463: for (int j = 0; j < 8; j++) {
      000D06 03               [ 8] 3464 	inc	bc
      000D07 C3r5Fr0C         [16] 3465 	jp	00112$
      000D0A                       3466 00116$:
                           000D0A  3467 	C$main.c$447$2_0$258	= .
                                   3468 	.globl	C$main.c$447$2_0$258
                                   3469 ;main.c:447: for (int i = 0; i < numPieces; i++) {
      000D0A F8 31            [12] 3470 	ldhl	sp,	#49
      000D0C 34               [12] 3471 	inc	(hl)
      000D0D C2r07r0B         [16] 3472 	jp	NZ,00115$
      000D10 23               [ 8] 3473 	inc	hl
      000D11 34               [12] 3474 	inc	(hl)
      000D12 C3r07r0B         [16] 3475 	jp	00115$
      000D15                       3476 00117$:
                           000D15  3477 	C$main.c$477$2_0$255	= .
                                   3478 	.globl	C$main.c$477$2_0$255
                                   3479 ;main.c:477: }
      000D15 E8 33            [16] 3480 	add	sp, #51
      000D17 E1               [12] 3481 	pop	hl
      000D18 F1               [12] 3482 	pop	af
      000D19 E9               [ 4] 3483 	jp	(hl)
                           000D1A  3484 	G$checkCollision$0$0	= .
                                   3485 	.globl	G$checkCollision$0$0
                           000D1A  3486 	C$main.c$479$2_0$266	= .
                                   3487 	.globl	C$main.c$479$2_0$266
                                   3488 ;main.c:479: bool checkCollision(UINT8 cursorx, UINT8 cursory, int currentPlayer) {
                                   3489 ;	---------------------------------
                                   3490 ; Function checkCollision
                                   3491 ; ---------------------------------
      000D1A                       3492 _checkCollision::
      000D1A E8 F2            [16] 3493 	add	sp, #-14
      000D1C F8 0D            [12] 3494 	ldhl	sp,	#13
      000D1E 32               [ 8] 3495 	ld	(hl-), a
      000D1F 73               [ 8] 3496 	ld	(hl), e
                           000D20  3497 	C$main.c$484$1_0$266	= .
                                   3498 	.globl	C$main.c$484$1_0$266
                                   3499 ;main.c:484: if (currentPlayer == BLACK_PLAYER) {
      000D20 F8 11            [12] 3500 	ldhl	sp,	#17
      000D22 3A               [ 8] 3501 	ld	a, (hl-)
      000D23 B6               [ 8] 3502 	or	a, (hl)
      000D24 20 0F            [12] 3503 	jr	NZ, 00102$
                           000D26  3504 	C$main.c$485$2_0$267	= .
                                   3505 	.globl	C$main.c$485$2_0$267
                                   3506 ;main.c:485: pieces = blackPieces;
      000D26 F8 00            [12] 3507 	ldhl	sp,	#0
      000D28 3Er43            [ 8] 3508 	ld	a, #<(_blackPieces)
      000D2A 22               [ 8] 3509 	ld	(hl+), a
                           000D2B  3510 	C$main.c$486$2_0$267	= .
                                   3511 	.globl	C$main.c$486$2_0$267
                                   3512 ;main.c:486: numPieces = 12;
      000D2B 3Es02            [ 8] 3513 	ld	a, #>(_blackPieces)
      000D2D 22               [ 8] 3514 	ld	(hl+), a
      000D2E 3E 0C            [ 8] 3515 	ld	a, #0x0c
      000D30 22               [ 8] 3516 	ld	(hl+), a
      000D31 AF               [ 4] 3517 	xor	a, a
      000D32 77               [ 8] 3518 	ld	(hl), a
      000D33 18 0D            [12] 3519 	jr	00103$
      000D35                       3520 00102$:
                           000D35  3521 	C$main.c$488$2_0$268	= .
                                   3522 	.globl	C$main.c$488$2_0$268
                                   3523 ;main.c:488: pieces = whitePieces;
      000D35 F8 00            [12] 3524 	ldhl	sp,	#0
      000D37 3Er67            [ 8] 3525 	ld	a, #<(_whitePieces)
      000D39 22               [ 8] 3526 	ld	(hl+), a
                           000D3A  3527 	C$main.c$489$2_0$268	= .
                                   3528 	.globl	C$main.c$489$2_0$268
                                   3529 ;main.c:489: numPieces = 12;
      000D3A 3Es02            [ 8] 3530 	ld	a, #>(_whitePieces)
      000D3C 22               [ 8] 3531 	ld	(hl+), a
      000D3D 3E 0C            [ 8] 3532 	ld	a, #0x0c
      000D3F 22               [ 8] 3533 	ld	(hl+), a
      000D40 AF               [ 4] 3534 	xor	a, a
      000D41 77               [ 8] 3535 	ld	(hl), a
      000D42                       3536 00103$:
                           000D42  3537 	C$main.c$493$3_0$269	= .
                                   3538 	.globl	C$main.c$493$3_0$269
                                   3539 ;main.c:493: for (int i = 0; i < numPieces; i++) {
      000D42 AF               [ 4] 3540 	xor	a, a
      000D43 F8 04            [12] 3541 	ldhl	sp,	#4
      000D45 22               [ 8] 3542 	ld	(hl+), a
      000D46 77               [ 8] 3543 	ld	(hl), a
      000D47 01 00 00         [12] 3544 	ld	bc, #0x0000
      000D4A                       3545 00114$:
      000D4A F8 02            [12] 3546 	ldhl	sp,	#2
      000D4C 79               [ 4] 3547 	ld	a, c
      000D4D 96               [ 8] 3548 	sub	a, (hl)
      000D4E 23               [ 8] 3549 	inc	hl
      000D4F 78               [ 4] 3550 	ld	a, b
      000D50 9E               [ 8] 3551 	sbc	a, (hl)
      000D51 78               [ 4] 3552 	ld	a, b
      000D52 57               [ 4] 3553 	ld	d, a
      000D53 5E               [ 8] 3554 	ld	e, (hl)
      000D54 CB 7B            [ 8] 3555 	bit	7, e
      000D56 28 07            [12] 3556 	jr	Z, 00158$
      000D58 CB 7A            [ 8] 3557 	bit	7, d
      000D5A 20 08            [12] 3558 	jr	NZ, 00159$
      000D5C BF               [ 4] 3559 	cp	a, a
      000D5D 18 05            [12] 3560 	jr	00159$
      000D5F                       3561 00158$:
      000D5F CB 7A            [ 8] 3562 	bit	7, d
      000D61 28 01            [12] 3563 	jr	Z, 00159$
      000D63 37               [ 4] 3564 	scf
      000D64                       3565 00159$:
      000D64 D2r17r0E         [16] 3566 	jp	NC, 00112$
                           000D67  3567 	C$main.c$494$3_0$270	= .
                                   3568 	.globl	C$main.c$494$3_0$270
                                   3569 ;main.c:494: UINT8 pieceX = pieces[i].x;
      000D67 69               [ 4] 3570 	ld	l, c
      000D68 60               [ 4] 3571 	ld	h, b
      000D69 29               [ 8] 3572 	add	hl, hl
      000D6A 09               [ 8] 3573 	add	hl, bc
      000D6B E5               [16] 3574 	push	hl
      000D6C 7D               [ 4] 3575 	ld	a, l
      000D6D F8 0C            [12] 3576 	ldhl	sp,	#12
      000D6F 77               [ 8] 3577 	ld	(hl), a
      000D70 E1               [12] 3578 	pop	hl
      000D71 7C               [ 4] 3579 	ld	a, h
      000D72 F8 0B            [12] 3580 	ldhl	sp,	#11
      000D74 32               [ 8] 3581 	ld	(hl-), a
      000D75 2A               [ 8] 3582 	ld	a, (hl+)
      000D76 5F               [ 4] 3583 	ld	e, a
      000D77 56               [ 8] 3584 	ld	d, (hl)
      000D78 E1               [12] 3585 	pop	hl
      000D79 E5               [16] 3586 	push	hl
      000D7A 19               [ 8] 3587 	add	hl, de
      000D7B 5D               [ 4] 3588 	ld	e, l
      000D7C 54               [ 4] 3589 	ld	d, h
      000D7D 1A               [ 8] 3590 	ld	a, (de)
      000D7E 6F               [ 4] 3591 	ld	l, a
                                   3592 ;	spillPairReg hl
                                   3593 ;	spillPairReg hl
                           000D7F  3594 	C$main.c$495$3_0$270	= .
                                   3595 	.globl	C$main.c$495$3_0$270
                                   3596 ;main.c:495: UINT8 pieceY = pieces[i].y;
      000D7F 13               [ 8] 3597 	inc	de
      000D80 1A               [ 8] 3598 	ld	a, (de)
      000D81 5F               [ 4] 3599 	ld	e, a
                           000D82  3600 	C$main.c$498$3_0$270	= .
                                   3601 	.globl	C$main.c$498$3_0$270
                                   3602 ;main.c:498: UINT8 pieceLeft = pieceX - 4;
      000D82 7D               [ 4] 3603 	ld	a, l
      000D83 C6 FC            [ 8] 3604 	add	a, #0xfc
      000D85 57               [ 4] 3605 	ld	d, a
                           000D86  3606 	C$main.c$499$3_0$270	= .
                                   3607 	.globl	C$main.c$499$3_0$270
                                   3608 ;main.c:499: UINT8 pieceRight = pieceX + 4;
      000D86 7D               [ 4] 3609 	ld	a, l
      000D87 C6 04            [ 8] 3610 	add	a, #0x04
      000D89 F8 06            [12] 3611 	ldhl	sp,	#6
                           000D8B  3612 	C$main.c$500$3_0$270	= .
                                   3613 	.globl	C$main.c$500$3_0$270
                                   3614 ;main.c:500: UINT8 pieceTop = pieceY - 4;
      000D8B 22               [ 8] 3615 	ld	(hl+), a
      000D8C 7B               [ 4] 3616 	ld	a, e
      000D8D C6 FC            [ 8] 3617 	add	a, #0xfc
                           000D8F  3618 	C$main.c$501$3_0$270	= .
                                   3619 	.globl	C$main.c$501$3_0$270
                                   3620 ;main.c:501: UINT8 pieceBottom = pieceY + 4;
      000D8F 22               [ 8] 3621 	ld	(hl+), a
      000D90 7B               [ 4] 3622 	ld	a, e
      000D91 C6 04            [ 8] 3623 	add	a, #0x04
      000D93 77               [ 8] 3624 	ld	(hl), a
                           000D94  3625 	C$main.c$504$3_0$270	= .
                                   3626 	.globl	C$main.c$504$3_0$270
                                   3627 ;main.c:504: UINT8 cursorLeft = cursorx - 4;
      000D94 F8 0D            [12] 3628 	ldhl	sp,	#13
      000D96 5E               [ 8] 3629 	ld	e, (hl)
      000D97 7B               [ 4] 3630 	ld	a, e
      000D98 C6 FC            [ 8] 3631 	add	a, #0xfc
      000D9A F8 09            [12] 3632 	ldhl	sp,	#9
                           000D9C  3633 	C$main.c$505$3_0$270	= .
                                   3634 	.globl	C$main.c$505$3_0$270
                                   3635 ;main.c:505: UINT8 cursorRight = cursorx + 4;
      000D9C 22               [ 8] 3636 	ld	(hl+), a
      000D9D 7B               [ 4] 3637 	ld	a, e
      000D9E C6 04            [ 8] 3638 	add	a, #0x04
                           000DA0  3639 	C$main.c$506$3_0$270	= .
                                   3640 	.globl	C$main.c$506$3_0$270
                                   3641 ;main.c:506: UINT8 cursorTop = cursory - 4;
      000DA0 22               [ 8] 3642 	ld	(hl+), a
      000DA1 23               [ 8] 3643 	inc	hl
      000DA2 6E               [ 8] 3644 	ld	l, (hl)
                                   3645 ;	spillPairReg hl
                                   3646 ;	spillPairReg hl
      000DA3 7D               [ 4] 3647 	ld	a, l
      000DA4 C6 FC            [ 8] 3648 	add	a, #0xfc
      000DA6 5F               [ 4] 3649 	ld	e, a
                           000DA7  3650 	C$main.c$507$3_0$270	= .
                                   3651 	.globl	C$main.c$507$3_0$270
                                   3652 ;main.c:507: UINT8 cursorBottom = cursory + 4;
      000DA7 7D               [ 4] 3653 	ld	a, l
      000DA8 C6 04            [ 8] 3654 	add	a, #0x04
      000DAA F8 0B            [12] 3655 	ldhl	sp,	#11
      000DAC 77               [ 8] 3656 	ld	(hl), a
                           000DAD  3657 	C$main.c$510$3_0$270	= .
                                   3658 	.globl	C$main.c$510$3_0$270
                                   3659 ;main.c:510: if (cursorLeft <= pieceRight && cursorRight >= pieceLeft &&
      000DAD F8 06            [12] 3660 	ldhl	sp,	#6
      000DAF 7E               [ 8] 3661 	ld	a, (hl)
      000DB0 F8 09            [12] 3662 	ldhl	sp,	#9
      000DB2 96               [ 8] 3663 	sub	a, (hl)
      000DB3 38 59            [12] 3664 	jr	C, 00115$
      000DB5 23               [ 8] 3665 	inc	hl
      000DB6 7E               [ 8] 3666 	ld	a, (hl)
      000DB7 92               [ 4] 3667 	sub	a, d
      000DB8 38 54            [12] 3668 	jr	C, 00115$
                           000DBA  3669 	C$main.c$511$3_0$270	= .
                                   3670 	.globl	C$main.c$511$3_0$270
                                   3671 ;main.c:511: cursorTop <= pieceBottom && cursorBottom >= pieceTop) {
      000DBA 2B               [ 8] 3672 	dec	hl
      000DBB 2B               [ 8] 3673 	dec	hl
      000DBC 7E               [ 8] 3674 	ld	a, (hl)
      000DBD 93               [ 4] 3675 	sub	a, e
      000DBE 38 4E            [12] 3676 	jr	C, 00115$
      000DC0 F8 0B            [12] 3677 	ldhl	sp,	#11
      000DC2 7E               [ 8] 3678 	ld	a, (hl)
      000DC3 F8 07            [12] 3679 	ldhl	sp,	#7
      000DC5 96               [ 8] 3680 	sub	a, (hl)
      000DC6 38 46            [12] 3681 	jr	C, 00115$
                           000DC8  3682 	C$main.c$512$4_0$271	= .
                                   3683 	.globl	C$main.c$512$4_0$271
                                   3684 ;main.c:512: if (currentPlayer == BLACK_PLAYER) {
      000DC8 F8 11            [12] 3685 	ldhl	sp,	#17
      000DCA 3A               [ 8] 3686 	ld	a, (hl-)
      000DCB B6               [ 8] 3687 	or	a, (hl)
      000DCC 20 1F            [12] 3688 	jr	NZ, 00105$
                           000DCE  3689 	C$main.c$513$5_0$272	= .
                                   3690 	.globl	C$main.c$513$5_0$272
                                   3691 ;main.c:513: selectedCoords = i;
      000DCE F8 04            [12] 3692 	ldhl	sp,	#4
      000DD0 7E               [ 8] 3693 	ld	a, (hl)
      000DD1 EAr08r00         [16] 3694 	ld	(#_selectedCoords),a
      000DD4 F8 05            [12] 3695 	ldhl	sp,	#5
      000DD6 7E               [ 8] 3696 	ld	a, (hl)
      000DD7 EAr09r00         [16] 3697 	ld	(#_selectedCoords + 1),a
                           000DDA  3698 	C$main.c$514$5_0$272	= .
                                   3699 	.globl	C$main.c$514$5_0$272
                                   3700 ;main.c:514: selectedPieceIndex = i + 4;
      000DDA F8 04            [12] 3701 	ldhl	sp,#4
      000DDC 2A               [ 8] 3702 	ld	a, (hl+)
      000DDD 5F               [ 4] 3703 	ld	e, a
      000DDE 56               [ 8] 3704 	ld	d, (hl)
      000DDF 21 04 00         [12] 3705 	ld	hl, #0x0004
      000DE2 19               [ 8] 3706 	add	hl, de
      000DE3 5D               [ 4] 3707 	ld	e, l
      000DE4 54               [ 4] 3708 	ld	d, h
      000DE5 21r03r00         [12] 3709 	ld	hl, #_selectedPieceIndex
      000DE8 7B               [ 4] 3710 	ld	a, e
      000DE9 22               [ 8] 3711 	ld	(hl+), a
      000DEA 72               [ 8] 3712 	ld	(hl), d
      000DEB 18 1D            [12] 3713 	jr	00106$
      000DED                       3714 00105$:
                           000DED  3715 	C$main.c$516$5_0$273	= .
                                   3716 	.globl	C$main.c$516$5_0$273
                                   3717 ;main.c:516: selectedCoords = i;
      000DED F8 04            [12] 3718 	ldhl	sp,	#4
      000DEF 7E               [ 8] 3719 	ld	a, (hl)
      000DF0 EAr08r00         [16] 3720 	ld	(#_selectedCoords),a
      000DF3 F8 05            [12] 3721 	ldhl	sp,	#5
      000DF5 7E               [ 8] 3722 	ld	a, (hl)
      000DF6 EAr09r00         [16] 3723 	ld	(#_selectedCoords + 1),a
                           000DF9  3724 	C$main.c$517$5_0$273	= .
                                   3725 	.globl	C$main.c$517$5_0$273
                                   3726 ;main.c:517: selectedPieceIndex = i + 16;
      000DF9 F8 04            [12] 3727 	ldhl	sp,#4
      000DFB 2A               [ 8] 3728 	ld	a, (hl+)
      000DFC 5F               [ 4] 3729 	ld	e, a
      000DFD 56               [ 8] 3730 	ld	d, (hl)
      000DFE 21 10 00         [12] 3731 	ld	hl, #0x0010
      000E01 19               [ 8] 3732 	add	hl, de
      000E02 5D               [ 4] 3733 	ld	e, l
      000E03 54               [ 4] 3734 	ld	d, h
      000E04 21r03r00         [12] 3735 	ld	hl, #_selectedPieceIndex
      000E07 7B               [ 4] 3736 	ld	a, e
      000E08 22               [ 8] 3737 	ld	(hl+), a
      000E09 72               [ 8] 3738 	ld	(hl), d
      000E0A                       3739 00106$:
                           000E0A  3740 	C$main.c$519$4_0$271	= .
                                   3741 	.globl	C$main.c$519$4_0$271
                                   3742 ;main.c:519: return true;
      000E0A 3E 01            [ 8] 3743 	ld	a, #0x01
      000E0C 18 12            [12] 3744 	jr	00116$
      000E0E                       3745 00115$:
                           000E0E  3746 	C$main.c$493$2_0$269	= .
                                   3747 	.globl	C$main.c$493$2_0$269
                                   3748 ;main.c:493: for (int i = 0; i < numPieces; i++) {
      000E0E 03               [ 8] 3749 	inc	bc
      000E0F F8 04            [12] 3750 	ldhl	sp,	#4
      000E11 79               [ 4] 3751 	ld	a, c
      000E12 22               [ 8] 3752 	ld	(hl+), a
      000E13 70               [ 8] 3753 	ld	(hl), b
      000E14 C3r4Ar0D         [16] 3754 	jp	00114$
      000E17                       3755 00112$:
                           000E17  3756 	C$main.c$523$1_0$266	= .
                                   3757 	.globl	C$main.c$523$1_0$266
                                   3758 ;main.c:523: selectedPieceIndex = -1;
      000E17 21r03r00         [12] 3759 	ld	hl, #_selectedPieceIndex
      000E1A 3E FF            [ 8] 3760 	ld	a, #0xff
      000E1C 22               [ 8] 3761 	ld	(hl+), a
      000E1D 36 FF            [12] 3762 	ld	(hl), #0xff
                           000E1F  3763 	C$main.c$524$1_0$266	= .
                                   3764 	.globl	C$main.c$524$1_0$266
                                   3765 ;main.c:524: return false;
      000E1F AF               [ 4] 3766 	xor	a, a
      000E20                       3767 00116$:
                           000E20  3768 	C$main.c$525$1_0$266	= .
                                   3769 	.globl	C$main.c$525$1_0$266
                                   3770 ;main.c:525: }
      000E20 E8 0E            [16] 3771 	add	sp, #14
      000E22 E1               [12] 3772 	pop	hl
      000E23 C1               [12] 3773 	pop	bc
      000E24 E9               [ 4] 3774 	jp	(hl)
                           000E25  3775 	G$main$0$0	= .
                                   3776 	.globl	G$main$0$0
                           000E25  3777 	C$main.c$526$1_0$274	= .
                                   3778 	.globl	C$main.c$526$1_0$274
                                   3779 ;main.c:526: void main() {
                                   3780 ;	---------------------------------
                                   3781 ; Function main
                                   3782 ; ---------------------------------
      000E25                       3783 _main::
      000E25 E8 FA            [16] 3784 	add	sp, #-6
                           000E27  3785 	C$main.c$527$1_0$274	= .
                                   3786 	.globl	C$main.c$527$1_0$274
                                   3787 ;main.c:527: font();
      000E27 CDr7Dr00         [24] 3788 	call	_font
                           000E2A  3789 	C$main.c$528$1_0$274	= .
                                   3790 	.globl	C$main.c$528$1_0$274
                                   3791 ;main.c:528: printTurn();
      000E2A CDr8Er00         [24] 3792 	call	_printTurn
                           000E2D  3793 	C$main.c$529$1_0$274	= .
                                   3794 	.globl	C$main.c$529$1_0$274
                                   3795 ;main.c:529: printbkg();
      000E2D CDrC1r00         [24] 3796 	call	_printbkg
                           000E30  3797 	C$main.c$530$1_0$274	= .
                                   3798 	.globl	C$main.c$530$1_0$274
                                   3799 ;main.c:530: printSquare();
      000E30 CDrF9r00         [24] 3800 	call	_printSquare
                           000E33  3801 	C$main.c$531$1_0$274	= .
                                   3802 	.globl	C$main.c$531$1_0$274
                                   3803 ;main.c:531: printBlack();
      000E33 CDr47r01         [24] 3804 	call	_printBlack
                           000E36  3805 	C$main.c$532$1_0$274	= .
                                   3806 	.globl	C$main.c$532$1_0$274
                                   3807 ;main.c:532: printWhite();
      000E36 CDr3Cr02         [24] 3808 	call	_printWhite
                           000E39  3809 	C$main.c$533$1_0$274	= .
                                   3810 	.globl	C$main.c$533$1_0$274
                                   3811 ;main.c:533: SHOW_BKG;  
      000E39 F0r00            [12] 3812 	ldh	a, (_LCDC_REG + 0)
      000E3B F6 01            [ 8] 3813 	or	a, #0x01
      000E3D E0r00            [12] 3814 	ldh	(_LCDC_REG + 0), a
                           000E3F  3815 	C$main.c$534$1_0$274	= .
                                   3816 	.globl	C$main.c$534$1_0$274
                                   3817 ;main.c:534: SHOW_SPRITES;
      000E3F F0r00            [12] 3818 	ldh	a, (_LCDC_REG + 0)
      000E41 F6 02            [ 8] 3819 	or	a, #0x02
      000E43 E0r00            [12] 3820 	ldh	(_LCDC_REG + 0), a
                           000E45  3821 	C$main.c$535$1_0$274	= .
                                   3822 	.globl	C$main.c$535$1_0$274
                                   3823 ;main.c:535: SHOW_WIN;
      000E45 F0r00            [12] 3824 	ldh	a, (_LCDC_REG + 0)
      000E47 F6 20            [ 8] 3825 	or	a, #0x20
      000E49 E0r00            [12] 3826 	ldh	(_LCDC_REG + 0), a
                           000E4B  3827 	C$main.c$537$1_1$275	= .
                                   3828 	.globl	C$main.c$537$1_1$275
                                   3829 ;main.c:537: while(1) {
      000E4B                       3830 00143$:
                           000E4B  3831 	C$main.c$538$2_1$276	= .
                                   3832 	.globl	C$main.c$538$2_1$276
                                   3833 ;main.c:538: joypad_input = joypad();
      000E4B CDr00r00         [24] 3834 	call	_joypad
      000E4E 21r00r00         [12] 3835 	ld	hl, #_joypad_input
      000E51 77               [ 8] 3836 	ld	(hl), a
                           000E52  3837 	C$main.c$540$2_1$276	= .
                                   3838 	.globl	C$main.c$540$2_1$276
                                   3839 ;main.c:540: if (joypad_input != lastButtonState) {
      000E52 7E               [ 8] 3840 	ld	a, (hl)
      000E53 21r00r00         [12] 3841 	ld	hl, #_lastButtonState
      000E56 96               [ 8] 3842 	sub	a, (hl)
      000E57 28 0E            [12] 3843 	jr	Z, 00104$
                           000E59  3844 	C$main.c$541$3_1$277	= .
                                   3845 	.globl	C$main.c$541$3_1$277
                                   3846 ;main.c:541: debounceTimer = 0; // Reset the debounce timer
      000E59 AF               [ 4] 3847 	xor	a, a
      000E5A 21r01r00         [12] 3848 	ld	hl, #_debounceTimer
      000E5D 22               [ 8] 3849 	ld	(hl+), a
      000E5E 77               [ 8] 3850 	ld	(hl), a
                           000E5F  3851 	C$main.c$542$3_1$277	= .
                                   3852 	.globl	C$main.c$542$3_1$277
                                   3853 ;main.c:542: lastButtonState = joypad_input;
      000E5F FAr00r00         [16] 3854 	ld	a, (#_joypad_input)
      000E62 EAr00r00         [16] 3855 	ld	(#_lastButtonState),a
      000E65 18 16            [12] 3856 	jr	00105$
      000E67                       3857 00104$:
                           000E67  3858 	C$main.c$543$2_1$276	= .
                                   3859 	.globl	C$main.c$543$2_1$276
                                   3860 ;main.c:543: } else if (debounceTimer < DEBOUNCE_DELAY) {
      000E67 21r01r00         [12] 3861 	ld	hl, #_debounceTimer
      000E6A 2A               [ 8] 3862 	ld	a, (hl+)
      000E6B D6 06            [ 8] 3863 	sub	a, #0x06
      000E6D 7E               [ 8] 3864 	ld	a, (hl)
      000E6E DE 00            [ 8] 3865 	sbc	a, #0x00
      000E70 30 0B            [12] 3866 	jr	NC, 00105$
                           000E72  3867 	C$main.c$544$3_1$278	= .
                                   3868 	.globl	C$main.c$544$3_1$278
                                   3869 ;main.c:544: debounceTimer += 100; // Increment the debounce timer based on the loop delay (100ms in this code)
      000E72 2B               [ 8] 3870 	dec	hl
      000E73 7E               [ 8] 3871 	ld	a, (hl)
      000E74 C6 64            [ 8] 3872 	add	a, #0x64
      000E76 22               [ 8] 3873 	ld	(hl+), a
      000E77 7E               [ 8] 3874 	ld	a, (hl)
      000E78 CE 00            [ 8] 3875 	adc	a, #0x00
      000E7A 77               [ 8] 3876 	ld	(hl), a
                           000E7B  3877 	C$main.c$545$3_1$278	= .
                                   3878 	.globl	C$main.c$545$3_1$278
                                   3879 ;main.c:545: continue; // Skip processing input until the debounce delay is reached
      000E7B 18 CE            [12] 3880 	jr	00143$
      000E7D                       3881 00105$:
                           000E7D  3882 	C$main.c$548$2_1$276	= .
                                   3883 	.globl	C$main.c$548$2_1$276
                                   3884 ;main.c:548: dpad();
      000E7D CDr49r00         [24] 3885 	call	_dpad
                           000E80  3886 	C$main.c$549$2_1$276	= .
                                   3887 	.globl	C$main.c$549$2_1$276
                                   3888 ;main.c:549: if (joypad_input & J_A) {
      000E80 FAr00r00         [16] 3889 	ld	a, (#_joypad_input)
      000E83 CB 67            [ 8] 3890 	bit	4, a
      000E85 CAr17r0F         [16] 3891 	jp	Z,00167$
                           000E88  3892 	C$main.c$550$3_1$279	= .
                                   3893 	.globl	C$main.c$550$3_1$279
                                   3894 ;main.c:550: if (pieceSelected == false) {
      000E88 21r0Ar00         [12] 3895 	ld	hl, #_pieceSelected
      000E8B CB 46            [12] 3896 	bit	0, (hl)
      000E8D C2r17r0F         [16] 3897 	jp	NZ, 00167$
                           000E90  3898 	C$main.c$551$4_1$280	= .
                                   3899 	.globl	C$main.c$551$4_1$280
                                   3900 ;main.c:551: checkCollision(cursorx, cursory, currentPlayer);
      000E90 21r07r00         [12] 3901 	ld	hl, #_currentPlayer
      000E93 4E               [ 8] 3902 	ld	c, (hl)
      000E94 06 00            [ 8] 3903 	ld	b, #0x00
      000E96 C5               [16] 3904 	push	bc
      000E97 21r06r00         [12] 3905 	ld	hl, #_cursory
      000E9A 5E               [ 8] 3906 	ld	e, (hl)
      000E9B FAr05r00         [16] 3907 	ld	a, (#_cursorx)
      000E9E CDr1Ar0D         [24] 3908 	call	_checkCollision
                           000EA1  3909 	C$main.c$553$1_1$274	= .
                                   3910 	.globl	C$main.c$553$1_1$274
                                   3911 ;main.c:553: if (selectedPieceIndex >= 4 && selectedPieceIndex < 16){
      000EA1 21r03r00         [12] 3912 	ld	hl, #_selectedPieceIndex
      000EA4 2A               [ 8] 3913 	ld	a, (hl+)
      000EA5 D6 10            [ 8] 3914 	sub	a, #0x10
      000EA7 7E               [ 8] 3915 	ld	a, (hl)
      000EA8 DE 00            [ 8] 3916 	sbc	a, #0x00
      000EAA 56               [ 8] 3917 	ld	d, (hl)
      000EAB 3E 00            [ 8] 3918 	ld	a, #0x00
      000EAD CB 7F            [ 8] 3919 	bit	7,a
      000EAF 28 07            [12] 3920 	jr	Z, 00255$
      000EB1 CB 7A            [ 8] 3921 	bit	7, d
      000EB3 20 08            [12] 3922 	jr	NZ, 00256$
      000EB5 BF               [ 4] 3923 	cp	a, a
      000EB6 18 05            [12] 3924 	jr	00256$
      000EB8                       3925 00255$:
      000EB8 CB 7A            [ 8] 3926 	bit	7, d
      000EBA 28 01            [12] 3927 	jr	Z, 00256$
      000EBC 37               [ 4] 3928 	scf
      000EBD                       3929 00256$:
      000EBD 3E 00            [ 8] 3930 	ld	a, #0x00
      000EBF 17               [ 4] 3931 	rla
      000EC0 4F               [ 4] 3932 	ld	c, a
                           000EC1  3933 	C$main.c$552$4_1$280	= .
                                   3934 	.globl	C$main.c$552$4_1$280
                                   3935 ;main.c:552: if (currentPlayer == BLACK_PLAYER) {
      000EC1 FAr07r00         [16] 3936 	ld	a, (#_currentPlayer)
      000EC4 B7               [ 4] 3937 	or	a, a
      000EC5 20 29            [12] 3938 	jr	NZ, 00113$
                           000EC7  3939 	C$main.c$553$5_1$281	= .
                                   3940 	.globl	C$main.c$553$5_1$281
                                   3941 ;main.c:553: if (selectedPieceIndex >= 4 && selectedPieceIndex < 16){
      000EC7 21r03r00         [12] 3942 	ld	hl, #_selectedPieceIndex
      000ECA 2A               [ 8] 3943 	ld	a, (hl+)
      000ECB D6 04            [ 8] 3944 	sub	a, #0x04
      000ECD 7E               [ 8] 3945 	ld	a, (hl)
      000ECE DE 00            [ 8] 3946 	sbc	a, #0x00
      000ED0 56               [ 8] 3947 	ld	d, (hl)
      000ED1 3E 00            [ 8] 3948 	ld	a, #0x00
      000ED3 CB 7F            [ 8] 3949 	bit	7,a
      000ED5 28 07            [12] 3950 	jr	Z, 00257$
      000ED7 CB 7A            [ 8] 3951 	bit	7, d
      000ED9 20 08            [12] 3952 	jr	NZ, 00258$
      000EDB BF               [ 4] 3953 	cp	a, a
      000EDC 18 05            [12] 3954 	jr	00258$
      000EDE                       3955 00257$:
      000EDE CB 7A            [ 8] 3956 	bit	7, d
      000EE0 28 01            [12] 3957 	jr	Z, 00258$
      000EE2 37               [ 4] 3958 	scf
      000EE3                       3959 00258$:
      000EE3 38 32            [12] 3960 	jr	C, 00167$
      000EE5 79               [ 4] 3961 	ld	a, c
      000EE6 B7               [ 4] 3962 	or	a, a
      000EE7 28 2E            [12] 3963 	jr	Z, 00167$
                           000EE9  3964 	C$main.c$554$6_1$282	= .
                                   3965 	.globl	C$main.c$554$6_1$282
                                   3966 ;main.c:554: pieceSelected = true;
      000EE9 21r0Ar00         [12] 3967 	ld	hl, #_pieceSelected
      000EEC 36 01            [12] 3968 	ld	(hl), #0x01
      000EEE 18 27            [12] 3969 	jr	00167$
      000EF0                       3970 00113$:
                           000EF0  3971 	C$main.c$556$4_1$280	= .
                                   3972 	.globl	C$main.c$556$4_1$280
                                   3973 ;main.c:556: } else if (selectedPieceIndex >= 16 && selectedPieceIndex < 28) {
      000EF0 CB 41            [ 8] 3974 	bit	0, c
      000EF2 20 23            [12] 3975 	jr	NZ, 00167$
      000EF4 21r03r00         [12] 3976 	ld	hl, #_selectedPieceIndex
      000EF7 2A               [ 8] 3977 	ld	a, (hl+)
      000EF8 D6 1C            [ 8] 3978 	sub	a, #0x1c
      000EFA 7E               [ 8] 3979 	ld	a, (hl)
      000EFB DE 00            [ 8] 3980 	sbc	a, #0x00
      000EFD 56               [ 8] 3981 	ld	d, (hl)
      000EFE 3E 00            [ 8] 3982 	ld	a, #0x00
      000F00 CB 7F            [ 8] 3983 	bit	7,a
      000F02 28 07            [12] 3984 	jr	Z, 00259$
      000F04 CB 7A            [ 8] 3985 	bit	7, d
      000F06 20 08            [12] 3986 	jr	NZ, 00260$
      000F08 BF               [ 4] 3987 	cp	a, a
      000F09 18 05            [12] 3988 	jr	00260$
      000F0B                       3989 00259$:
      000F0B CB 7A            [ 8] 3990 	bit	7, d
      000F0D 28 01            [12] 3991 	jr	Z, 00260$
      000F0F 37               [ 4] 3992 	scf
      000F10                       3993 00260$:
      000F10 30 05            [12] 3994 	jr	NC, 00167$
                           000F12  3995 	C$main.c$557$5_1$283	= .
                                   3996 	.globl	C$main.c$557$5_1$283
                                   3997 ;main.c:557: pieceSelected = true;
      000F12 21r0Ar00         [12] 3998 	ld	hl, #_pieceSelected
      000F15 36 01            [12] 3999 	ld	(hl), #0x01
                           000F17  4000 	C$main.c$561$1_1$274	= .
                                   4001 	.globl	C$main.c$561$1_1$274
                                   4002 ;main.c:561: while (pieceSelected == true) {
      000F17                       4003 00167$:
      000F17                       4004 00139$:
      000F17 21r0Ar00         [12] 4005 	ld	hl, #_pieceSelected
      000F1A CB 46            [12] 4006 	bit	0, (hl)
      000F1C CAr54r10         [16] 4007 	jp	Z, 00141$
                           000F1F  4008 	C$main.c$562$3_1$284	= .
                                   4009 	.globl	C$main.c$562$3_1$284
                                   4010 ;main.c:562: delay(100);
      000F1F 11 64 00         [12] 4011 	ld	de, #0x0064
      000F22 CDr00r00         [24] 4012 	call	_delay
                           000F25  4013 	C$main.c$563$3_1$284	= .
                                   4014 	.globl	C$main.c$563$3_1$284
                                   4015 ;main.c:563: joypad_input = joypad(); // Update the input inside the loop
      000F25 CDr00r00         [24] 4016 	call	_joypad
      000F28 EAr00r00         [16] 4017 	ld	(#_joypad_input),a
                           000F2B  4018 	C$main.c$564$3_1$284	= .
                                   4019 	.globl	C$main.c$564$3_1$284
                                   4020 ;main.c:564: dpad();
      000F2B CDr49r00         [24] 4021 	call	_dpad
                                   4022 ;main.c:565: move_sprite(selectedPieceIndex, cursorx, cursory);
      000F2E 21r06r00         [12] 4023 	ld	hl, #_cursory
      000F31 46               [ 8] 4024 	ld	b, (hl)
      000F32 21r05r00         [12] 4025 	ld	hl, #_cursorx
      000F35 4E               [ 8] 4026 	ld	c, (hl)
      000F36 21r03r00         [12] 4027 	ld	hl, #_selectedPieceIndex
                                   4028 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      000F39 6E               [ 8] 4029 	ld	l, (hl)
                                   4030 ;	spillPairReg hl
                                   4031 ;	spillPairReg hl
      000F3A 26 00            [ 8] 4032 	ld	h, #0x00
                                   4033 ;	spillPairReg hl
                                   4034 ;	spillPairReg hl
      000F3C 29               [ 8] 4035 	add	hl, hl
      000F3D 29               [ 8] 4036 	add	hl, hl
      000F3E 11r00r00         [12] 4037 	ld	de, #_shadow_OAM
      000F41 19               [ 8] 4038 	add	hl, de
                                   4039 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      000F42 78               [ 4] 4040 	ld	a, b
      000F43 22               [ 8] 4041 	ld	(hl+), a
      000F44 71               [ 8] 4042 	ld	(hl), c
                           000F45  4043 	C$main.c$566$3_1$284	= .
                                   4044 	.globl	C$main.c$566$3_1$284
                                   4045 ;main.c:566: if (joypad_input & J_A) {
      000F45 FAr00r00         [16] 4046 	ld	a, (#_joypad_input)
      000F48 CB 67            [ 8] 4047 	bit	4, a
      000F4A CAr41r10         [16] 4048 	jp	Z,00136$
                           000F4D  4049 	C$main.c$568$4_1$285	= .
                                   4050 	.globl	C$main.c$568$4_1$285
                                   4051 ;main.c:568: testMoves(currentPlayer, &validNonCaptureMoves, &validCaptureMoves);
      000F4D F8 02            [12] 4052 	ldhl	sp,	#2
      000F4F 4D               [ 4] 4053 	ld	c, l
      000F50 44               [ 4] 4054 	ld	b, h
      000F51 F8 00            [12] 4055 	ldhl	sp,	#0
      000F53 5D               [ 4] 4056 	ld	e, l
      000F54 54               [ 4] 4057 	ld	d, h
      000F55 C5               [16] 4058 	push	bc
      000F56 FAr07r00         [16] 4059 	ld	a, (#_currentPlayer)
      000F59 CDrBEr0A         [24] 4060 	call	_testMoves
                           000F5C  4061 	C$main.c$569$4_1$285	= .
                                   4062 	.globl	C$main.c$569$4_1$285
                                   4063 ;main.c:569: if (currentPlayer == BLACK_PLAYER){
      000F5C FAr07r00         [16] 4064 	ld	a, (#_currentPlayer)
      000F5F B7               [ 4] 4065 	or	a, a
      000F60 20 09            [12] 4066 	jr	NZ, 00120$
                           000F62  4067 	C$main.c$570$5_1$286	= .
                                   4068 	.globl	C$main.c$570$5_1$286
                                   4069 ;main.c:570: input = blackPieces;
      000F62 F8 04            [12] 4070 	ldhl	sp,	#4
      000F64 36r43            [12] 4071 	ld	(hl), #<(_blackPieces)
      000F66 23               [ 8] 4072 	inc	hl
      000F67 36s02            [12] 4073 	ld	(hl), #>(_blackPieces)
      000F69 18 07            [12] 4074 	jr	00121$
      000F6B                       4075 00120$:
                           000F6B  4076 	C$main.c$572$5_1$287	= .
                                   4077 	.globl	C$main.c$572$5_1$287
                                   4078 ;main.c:572: input = whitePieces;
      000F6B F8 04            [12] 4079 	ldhl	sp,	#4
      000F6D 3Er67            [ 8] 4080 	ld	a, #<(_whitePieces)
      000F6F 22               [ 8] 4081 	ld	(hl+), a
      000F70 36s02            [12] 4082 	ld	(hl), #>(_whitePieces)
      000F72                       4083 00121$:
                           000F72  4084 	C$main.c$574$4_1$285	= .
                                   4085 	.globl	C$main.c$574$4_1$285
                                   4086 ;main.c:574: if (cursorx == input[selectedCoords].x && cursory == input[selectedCoords].y){
      000F72 21r08r00         [12] 4087 	ld	hl, #_selectedCoords
      000F75 2A               [ 8] 4088 	ld	a, (hl+)
      000F76 4F               [ 4] 4089 	ld	c, a
      000F77 46               [ 8] 4090 	ld	b, (hl)
      000F78 69               [ 4] 4091 	ld	l, c
      000F79 60               [ 4] 4092 	ld	h, b
      000F7A 29               [ 8] 4093 	add	hl, hl
      000F7B 09               [ 8] 4094 	add	hl, bc
      000F7C 4D               [ 4] 4095 	ld	c, l
      000F7D 44               [ 4] 4096 	ld	b, h
      000F7E F8 04            [12] 4097 	ldhl	sp,	#4
      000F80 2A               [ 8] 4098 	ld	a,	(hl+)
      000F81 66               [ 8] 4099 	ld	h, (hl)
      000F82 6F               [ 4] 4100 	ld	l, a
      000F83 09               [ 8] 4101 	add	hl, bc
      000F84 4D               [ 4] 4102 	ld	c, l
      000F85 44               [ 4] 4103 	ld	b, h
      000F86 0A               [ 8] 4104 	ld	a, (bc)
      000F87 5F               [ 4] 4105 	ld	e, a
      000F88 FAr05r00         [16] 4106 	ld	a, (#_cursorx)
      000F8B 93               [ 4] 4107 	sub	a, e
      000F8C 20 17            [12] 4108 	jr	NZ, 00132$
      000F8E 03               [ 8] 4109 	inc	bc
      000F8F 0A               [ 8] 4110 	ld	a, (bc)
      000F90 4F               [ 4] 4111 	ld	c, a
      000F91 FAr06r00         [16] 4112 	ld	a, (#_cursory)
      000F94 91               [ 4] 4113 	sub	a, c
      000F95 20 0E            [12] 4114 	jr	NZ, 00132$
                           000F97  4115 	C$main.c$575$5_1$288	= .
                                   4116 	.globl	C$main.c$575$5_1$288
                                   4117 ;main.c:575: pieceSelected = false;
      000F97 21r0Ar00         [12] 4118 	ld	hl, #_pieceSelected
      000F9A 36 00            [12] 4119 	ld	(hl), #0x00
                           000F9C  4120 	C$main.c$576$5_1$288	= .
                                   4121 	.globl	C$main.c$576$5_1$288
                                   4122 ;main.c:576: printBlack();
      000F9C CDr47r01         [24] 4123 	call	_printBlack
                           000F9F  4124 	C$main.c$577$5_1$288	= .
                                   4125 	.globl	C$main.c$577$5_1$288
                                   4126 ;main.c:577: printWhite();
      000F9F CDr3Cr02         [24] 4127 	call	_printWhite
                           000FA2  4128 	C$main.c$578$5_1$288	= .
                                   4129 	.globl	C$main.c$578$5_1$288
                                   4130 ;main.c:578: break;
      000FA2 C3r54r10         [16] 4131 	jp	00141$
      000FA5                       4132 00132$:
                           000FA5  4133 	C$main.c$579$4_1$285	= .
                                   4134 	.globl	C$main.c$579$4_1$285
                                   4135 ;main.c:579: } else if ((validCaptureMoves > 0) && (!isCaptureMove(cursorx, cursory, currentPlayer, selectedCoords))) {
      000FA5 F8 02            [12] 4136 	ldhl	sp,	#2
      000FA7 AF               [ 4] 4137 	xor	a, a
      000FA8 96               [ 8] 4138 	sub	a, (hl)
      000FA9 23               [ 8] 4139 	inc	hl
      000FAA 3E 00            [ 8] 4140 	ld	a, #0x00
      000FAC 9E               [ 8] 4141 	sbc	a, (hl)
      000FAD 3E 00            [ 8] 4142 	ld	a, #0x00
      000FAF 57               [ 4] 4143 	ld	d, a
      000FB0 CB 7E            [12] 4144 	bit	7, (hl)
      000FB2 28 07            [12] 4145 	jr	Z, 00266$
      000FB4 CB 7A            [ 8] 4146 	bit	7, d
      000FB6 20 08            [12] 4147 	jr	NZ, 00267$
      000FB8 BF               [ 4] 4148 	cp	a, a
      000FB9 18 05            [12] 4149 	jr	00267$
      000FBB                       4150 00266$:
      000FBB CB 7A            [ 8] 4151 	bit	7, d
      000FBD 28 01            [12] 4152 	jr	Z, 00267$
      000FBF 37               [ 4] 4153 	scf
      000FC0                       4154 00267$:
      000FC0 30 29            [12] 4155 	jr	NC, 00128$
      000FC2 21r07r00         [12] 4156 	ld	hl, #_currentPlayer
      000FC5 4E               [ 8] 4157 	ld	c, (hl)
      000FC6 06 00            [ 8] 4158 	ld	b, #0x00
      000FC8 21r08r00         [12] 4159 	ld	hl, #_selectedCoords
      000FCB 2A               [ 8] 4160 	ld	a, (hl+)
      000FCC 5F               [ 4] 4161 	ld	e, a
      000FCD 56               [ 8] 4162 	ld	d, (hl)
      000FCE D5               [16] 4163 	push	de
      000FCF C5               [16] 4164 	push	bc
      000FD0 21r06r00         [12] 4165 	ld	hl, #_cursory
      000FD3 5E               [ 8] 4166 	ld	e, (hl)
      000FD4 FAr05r00         [16] 4167 	ld	a, (#_cursorx)
      000FD7 CDr0Fr07         [24] 4168 	call	_isCaptureMove
      000FDA CB 47            [ 8] 4169 	bit	0,a
      000FDC 20 0D            [12] 4170 	jr	NZ, 00128$
                           000FDE  4171 	C$main.c$580$5_1$289	= .
                                   4172 	.globl	C$main.c$580$5_1$289
                                   4173 ;main.c:580: pieceSelected = false;
      000FDE 21r0Ar00         [12] 4174 	ld	hl, #_pieceSelected
      000FE1 36 00            [12] 4175 	ld	(hl), #0x00
                           000FE3  4176 	C$main.c$581$5_1$289	= .
                                   4177 	.globl	C$main.c$581$5_1$289
                                   4178 ;main.c:581: printBlack();
      000FE3 CDr47r01         [24] 4179 	call	_printBlack
                           000FE6  4180 	C$main.c$582$5_1$289	= .
                                   4181 	.globl	C$main.c$582$5_1$289
                                   4182 ;main.c:582: printWhite();
      000FE6 CDr3Cr02         [24] 4183 	call	_printWhite
                           000FE9  4184 	C$main.c$583$5_1$289	= .
                                   4185 	.globl	C$main.c$583$5_1$289
                                   4186 ;main.c:583: break;
      000FE9 18 69            [12] 4187 	jr	00141$
      000FEB                       4188 00128$:
                           000FEB  4189 	C$main.c$584$4_1$285	= .
                                   4190 	.globl	C$main.c$584$4_1$285
                                   4191 ;main.c:584: } else if (isValidMove(cursorx, cursory, currentPlayer, selectedCoords)) {
      000FEB 21r08r00         [12] 4192 	ld	hl, #_selectedCoords
      000FEE 2A               [ 8] 4193 	ld	a, (hl+)
      000FEF 5F               [ 4] 4194 	ld	e, a
      000FF0 56               [ 8] 4195 	ld	d, (hl)
      000FF1 D5               [16] 4196 	push	de
      000FF2 FAr07r00         [16] 4197 	ld	a, (#_currentPlayer)
      000FF5 F5               [16] 4198 	push	af
      000FF6 33               [ 8] 4199 	inc	sp
      000FF7 21r06r00         [12] 4200 	ld	hl, #_cursory
      000FFA 5E               [ 8] 4201 	ld	e, (hl)
      000FFB FAr05r00         [16] 4202 	ld	a, (#_cursorx)
      000FFE CDr5Cr04         [24] 4203 	call	_isValidMove
      001001 CB 47            [ 8] 4204 	bit	0,a
      001003 28 3C            [12] 4205 	jr	Z, 00136$
                           001005  4206 	C$main.c$585$5_1$290	= .
                                   4207 	.globl	C$main.c$585$5_1$290
                                   4208 ;main.c:585: modifyCoordinates(input, selectedCoords, cursorx, cursory);
      001005 21r06r00         [12] 4209 	ld	hl, #_cursory
      001008 4E               [ 8] 4210 	ld	c, (hl)
      001009 06 00            [ 8] 4211 	ld	b, #0x00
      00100B 21r05r00         [12] 4212 	ld	hl, #_cursorx
      00100E 5E               [ 8] 4213 	ld	e, (hl)
      00100F 16 00            [ 8] 4214 	ld	d, #0x00
      001011 C5               [16] 4215 	push	bc
      001012 D5               [16] 4216 	push	de
      001013 21r08r00         [12] 4217 	ld	hl, #_selectedCoords
      001016 2A               [ 8] 4218 	ld	a, (hl+)
      001017 4F               [ 4] 4219 	ld	c, a
      001018 46               [ 8] 4220 	ld	b, (hl)
      001019 F8 08            [12] 4221 	ldhl	sp,	#8
      00101B 2A               [ 8] 4222 	ld	a, (hl+)
      00101C 5F               [ 4] 4223 	ld	e, a
      00101D 56               [ 8] 4224 	ld	d, (hl)
      00101E CDr31r03         [24] 4225 	call	_modifyCoordinates
                           001021  4226 	C$main.c$586$5_1$290	= .
                                   4227 	.globl	C$main.c$586$5_1$290
                                   4228 ;main.c:586: if (currentPlayer == BLACK_PLAYER) {
      001021 21r07r00         [12] 4229 	ld	hl, #_currentPlayer
      001024 7E               [ 8] 4230 	ld	a, (hl)
      001025 B7               [ 4] 4231 	or	a, a
      001026 20 04            [12] 4232 	jr	NZ, 00123$
                           001028  4233 	C$main.c$587$6_1$291	= .
                                   4234 	.globl	C$main.c$587$6_1$291
                                   4235 ;main.c:587: currentPlayer = WHITE_PLAYER;
      001028 36 01            [12] 4236 	ld	(hl), #0x01
      00102A 18 05            [12] 4237 	jr	00124$
      00102C                       4238 00123$:
                           00102C  4239 	C$main.c$589$6_1$292	= .
                                   4240 	.globl	C$main.c$589$6_1$292
                                   4241 ;main.c:589: currentPlayer = BLACK_PLAYER;
      00102C 21r07r00         [12] 4242 	ld	hl, #_currentPlayer
      00102F 36 00            [12] 4243 	ld	(hl), #0x00
      001031                       4244 00124$:
                           001031  4245 	C$main.c$591$5_1$290	= .
                                   4246 	.globl	C$main.c$591$5_1$290
                                   4247 ;main.c:591: printBlack();
      001031 CDr47r01         [24] 4248 	call	_printBlack
                           001034  4249 	C$main.c$592$5_1$290	= .
                                   4250 	.globl	C$main.c$592$5_1$290
                                   4251 ;main.c:592: printWhite();
      001034 CDr3Cr02         [24] 4252 	call	_printWhite
                           001037  4253 	C$main.c$593$5_1$290	= .
                                   4254 	.globl	C$main.c$593$5_1$290
                                   4255 ;main.c:593: printTurn();
      001037 CDr8Er00         [24] 4256 	call	_printTurn
                           00103A  4257 	C$main.c$594$5_1$290	= .
                                   4258 	.globl	C$main.c$594$5_1$290
                                   4259 ;main.c:594: pieceSelected = false;
      00103A 21r0Ar00         [12] 4260 	ld	hl, #_pieceSelected
      00103D 36 00            [12] 4261 	ld	(hl), #0x00
                           00103F  4262 	C$main.c$595$5_1$290	= .
                                   4263 	.globl	C$main.c$595$5_1$290
                                   4264 ;main.c:595: break; // Exit the loop after a piece has been moved
      00103F 18 13            [12] 4265 	jr	00141$
      001041                       4266 00136$:
                           001041  4267 	C$main.c$598$3_1$284	= .
                                   4268 	.globl	C$main.c$598$3_1$284
                                   4269 ;main.c:598: if (joypad_input & J_B) {
      001041 FAr00r00         [16] 4270 	ld	a, (#_joypad_input)
      001044 CB 6F            [ 8] 4271 	bit	5, a
      001046 CAr17r0F         [16] 4272 	jp	Z,00139$
                           001049  4273 	C$main.c$599$4_1$293	= .
                                   4274 	.globl	C$main.c$599$4_1$293
                                   4275 ;main.c:599: pieceSelected = false;
      001049 21r0Ar00         [12] 4276 	ld	hl, #_pieceSelected
      00104C 36 00            [12] 4277 	ld	(hl), #0x00
                           00104E  4278 	C$main.c$600$4_1$293	= .
                                   4279 	.globl	C$main.c$600$4_1$293
                                   4280 ;main.c:600: printBlack();
      00104E CDr47r01         [24] 4281 	call	_printBlack
                           001051  4282 	C$main.c$601$4_1$293	= .
                                   4283 	.globl	C$main.c$601$4_1$293
                                   4284 ;main.c:601: printWhite();
      001051 CDr3Cr02         [24] 4285 	call	_printWhite
                           001054  4286 	C$main.c$602$2_1$276	= .
                                   4287 	.globl	C$main.c$602$2_1$276
                                   4288 ;main.c:602: break;
      001054                       4289 00141$:
                           001054  4290 	C$main.c$605$2_1$276	= .
                                   4291 	.globl	C$main.c$605$2_1$276
                                   4292 ;main.c:605: delay(100);
      001054 11 64 00         [12] 4293 	ld	de, #0x0064
      001057 CDr00r00         [24] 4294 	call	_delay
      00105A C3r4Br0E         [16] 4295 	jp	00143$
                           00105D  4296 	C$main.c$607$1_1$274	= .
                                   4297 	.globl	C$main.c$607$1_1$274
                                   4298 ;main.c:607: }
      00105D E8 06            [16] 4299 	add	sp, #6
                           00105F  4300 	C$main.c$607$1_1$274	= .
                                   4301 	.globl	C$main.c$607$1_1$274
                           00105F  4302 	XG$main$0$0	= .
                                   4303 	.globl	XG$main$0$0
      00105F C9               [16] 4304 	ret
                                   4305 	.area _CODE
                                   4306 	.area _INITIALIZER
                           000000  4307 Fmain$__xinit_lastButtonState$0_0$0 == .
      000000                       4308 __xinit__lastButtonState:
      000000 00                    4309 	.db #0x00	; 0
                           000001  4310 Fmain$__xinit_debounceTimer$0_0$0 == .
      000001                       4311 __xinit__debounceTimer:
      000001 00 00                 4312 	.dw #0x0000
                           000003  4313 Fmain$__xinit_selectedPieceIndex$0_0$0 == .
      000003                       4314 __xinit__selectedPieceIndex:
      000003 FF FF                 4315 	.dw #0xffff
                           000005  4316 Fmain$__xinit_cursorx$0_0$0 == .
      000005                       4317 __xinit__cursorx:
      000005 1C                    4318 	.db #0x1c	; 28
                           000006  4319 Fmain$__xinit_cursory$0_0$0 == .
      000006                       4320 __xinit__cursory:
      000006 1C                    4321 	.db #0x1c	; 28
                           000007  4322 Fmain$__xinit_currentPlayer$0_0$0 == .
      000007                       4323 __xinit__currentPlayer:
      000007 00                    4324 	.db #0x00	; 0
                           000008  4325 Fmain$__xinit_selectedCoords$0_0$0 == .
      000008                       4326 __xinit__selectedCoords:
      000008 00 00                 4327 	.dw #0x0000
                           00000A  4328 Fmain$__xinit_pieceSelected$0_0$0 == .
      00000A                       4329 __xinit__pieceSelected:
      00000A 00                    4330 	.db #0x00	;  0
                           00000B  4331 Fmain$__xinit_tile1$0_0$0 == .
      00000B                       4332 __xinit__tile1:
      00000B FF                    4333 	.db #0xff	; 255
      00000C FF                    4334 	.db #0xff	; 255
      00000D FF                    4335 	.db #0xff	; 255
      00000E FF                    4336 	.db #0xff	; 255
      00000F FF                    4337 	.db #0xff	; 255
      000010 FF                    4338 	.db #0xff	; 255
      000011 FF                    4339 	.db #0xff	; 255
      000012 FF                    4340 	.db #0xff	; 255
      000013 FF                    4341 	.db #0xff	; 255
      000014 FF                    4342 	.db #0xff	; 255
      000015 FF                    4343 	.db #0xff	; 255
      000016 FF                    4344 	.db #0xff	; 255
      000017 FF                    4345 	.db #0xff	; 255
      000018 FF                    4346 	.db #0xff	; 255
      000019 FF                    4347 	.db #0xff	; 255
      00001A FF                    4348 	.db #0xff	; 255
                           00001B  4349 Fmain$__xinit_tile2$0_0$0 == .
      00001B                       4350 __xinit__tile2:
      00001B FF                    4351 	.db #0xff	; 255
      00001C 00                    4352 	.db #0x00	; 0
      00001D FF                    4353 	.db #0xff	; 255
      00001E 00                    4354 	.db #0x00	; 0
      00001F FF                    4355 	.db #0xff	; 255
      000020 00                    4356 	.db #0x00	; 0
      000021 FF                    4357 	.db #0xff	; 255
      000022 00                    4358 	.db #0x00	; 0
      000023 FF                    4359 	.db #0xff	; 255
      000024 00                    4360 	.db #0x00	; 0
      000025 FF                    4361 	.db #0xff	; 255
      000026 00                    4362 	.db #0x00	; 0
      000027 FF                    4363 	.db #0xff	; 255
      000028 00                    4364 	.db #0x00	; 0
      000029 FF                    4365 	.db #0xff	; 255
      00002A 00                    4366 	.db #0x00	; 0
                           00002B  4367 Fmain$__xinit_tile3$0_0$0 == .
      00002B                       4368 __xinit__tile3:
      00002B 00                    4369 	.db #0x00	; 0
      00002C FF                    4370 	.db #0xff	; 255
      00002D 00                    4371 	.db #0x00	; 0
      00002E FF                    4372 	.db #0xff	; 255
      00002F 00                    4373 	.db #0x00	; 0
      000030 FF                    4374 	.db #0xff	; 255
      000031 00                    4375 	.db #0x00	; 0
      000032 FF                    4376 	.db #0xff	; 255
      000033 00                    4377 	.db #0x00	; 0
      000034 FF                    4378 	.db #0xff	; 255
      000035 00                    4379 	.db #0x00	; 0
      000036 FF                    4380 	.db #0xff	; 255
      000037 00                    4381 	.db #0x00	; 0
      000038 FF                    4382 	.db #0xff	; 255
      000039 00                    4383 	.db #0x00	; 0
      00003A FF                    4384 	.db #0xff	; 255
                           00003B  4385 Fmain$__xinit_map$0_0$0 == .
      00003B                       4386 __xinit__map:
      00003B 01                    4387 	.db #0x01	; 1
      00003C 01                    4388 	.db #0x01	; 1
      00003D 01                    4389 	.db #0x01	; 1
      00003E 01                    4390 	.db #0x01	; 1
      00003F 01                    4391 	.db #0x01	; 1
      000040 01                    4392 	.db #0x01	; 1
      000041 01                    4393 	.db #0x01	; 1
      000042 01                    4394 	.db #0x01	; 1
      000043 01                    4395 	.db #0x01	; 1
      000044 01                    4396 	.db #0x01	; 1
      000045 01                    4397 	.db #0x01	; 1
      000046 01                    4398 	.db #0x01	; 1
      000047 01                    4399 	.db #0x01	; 1
      000048 01                    4400 	.db #0x01	; 1
      000049 01                    4401 	.db #0x01	; 1
      00004A 01                    4402 	.db #0x01	; 1
      00004B 01                    4403 	.db #0x01	; 1
      00004C 01                    4404 	.db #0x01	; 1
      00004D 01                    4405 	.db #0x01	; 1
      00004E 01                    4406 	.db #0x01	; 1
      00004F 01                    4407 	.db #0x01	; 1
      000050 01                    4408 	.db #0x01	; 1
      000051 02                    4409 	.db #0x02	; 2
      000052 02                    4410 	.db #0x02	; 2
      000053 03                    4411 	.db #0x03	; 3
      000054 03                    4412 	.db #0x03	; 3
      000055 02                    4413 	.db #0x02	; 2
      000056 02                    4414 	.db #0x02	; 2
      000057 03                    4415 	.db #0x03	; 3
      000058 03                    4416 	.db #0x03	; 3
      000059 02                    4417 	.db #0x02	; 2
      00005A 02                    4418 	.db #0x02	; 2
      00005B 03                    4419 	.db #0x03	; 3
      00005C 03                    4420 	.db #0x03	; 3
      00005D 02                    4421 	.db #0x02	; 2
      00005E 02                    4422 	.db #0x02	; 2
      00005F 03                    4423 	.db #0x03	; 3
      000060 03                    4424 	.db #0x03	; 3
      000061 01                    4425 	.db #0x01	; 1
      000062 01                    4426 	.db #0x01	; 1
      000063 01                    4427 	.db #0x01	; 1
      000064 01                    4428 	.db #0x01	; 1
      000065 02                    4429 	.db #0x02	; 2
      000066 02                    4430 	.db #0x02	; 2
      000067 03                    4431 	.db #0x03	; 3
      000068 03                    4432 	.db #0x03	; 3
      000069 02                    4433 	.db #0x02	; 2
      00006A 02                    4434 	.db #0x02	; 2
      00006B 03                    4435 	.db #0x03	; 3
      00006C 03                    4436 	.db #0x03	; 3
      00006D 02                    4437 	.db #0x02	; 2
      00006E 02                    4438 	.db #0x02	; 2
      00006F 03                    4439 	.db #0x03	; 3
      000070 03                    4440 	.db #0x03	; 3
      000071 02                    4441 	.db #0x02	; 2
      000072 02                    4442 	.db #0x02	; 2
      000073 03                    4443 	.db #0x03	; 3
      000074 03                    4444 	.db #0x03	; 3
      000075 01                    4445 	.db #0x01	; 1
      000076 01                    4446 	.db #0x01	; 1
      000077 01                    4447 	.db #0x01	; 1
      000078 01                    4448 	.db #0x01	; 1
      000079 03                    4449 	.db #0x03	; 3
      00007A 03                    4450 	.db #0x03	; 3
      00007B 02                    4451 	.db #0x02	; 2
      00007C 02                    4452 	.db #0x02	; 2
      00007D 03                    4453 	.db #0x03	; 3
      00007E 03                    4454 	.db #0x03	; 3
      00007F 02                    4455 	.db #0x02	; 2
      000080 02                    4456 	.db #0x02	; 2
      000081 03                    4457 	.db #0x03	; 3
      000082 03                    4458 	.db #0x03	; 3
      000083 02                    4459 	.db #0x02	; 2
      000084 02                    4460 	.db #0x02	; 2
      000085 03                    4461 	.db #0x03	; 3
      000086 03                    4462 	.db #0x03	; 3
      000087 02                    4463 	.db #0x02	; 2
      000088 02                    4464 	.db #0x02	; 2
      000089 01                    4465 	.db #0x01	; 1
      00008A 01                    4466 	.db #0x01	; 1
      00008B 01                    4467 	.db #0x01	; 1
      00008C 01                    4468 	.db #0x01	; 1
      00008D 03                    4469 	.db #0x03	; 3
      00008E 03                    4470 	.db #0x03	; 3
      00008F 02                    4471 	.db #0x02	; 2
      000090 02                    4472 	.db #0x02	; 2
      000091 03                    4473 	.db #0x03	; 3
      000092 03                    4474 	.db #0x03	; 3
      000093 02                    4475 	.db #0x02	; 2
      000094 02                    4476 	.db #0x02	; 2
      000095 03                    4477 	.db #0x03	; 3
      000096 03                    4478 	.db #0x03	; 3
      000097 02                    4479 	.db #0x02	; 2
      000098 02                    4480 	.db #0x02	; 2
      000099 03                    4481 	.db #0x03	; 3
      00009A 03                    4482 	.db #0x03	; 3
      00009B 02                    4483 	.db #0x02	; 2
      00009C 02                    4484 	.db #0x02	; 2
      00009D 01                    4485 	.db #0x01	; 1
      00009E 01                    4486 	.db #0x01	; 1
      00009F 01                    4487 	.db #0x01	; 1
      0000A0 01                    4488 	.db #0x01	; 1
      0000A1 02                    4489 	.db #0x02	; 2
      0000A2 02                    4490 	.db #0x02	; 2
      0000A3 03                    4491 	.db #0x03	; 3
      0000A4 03                    4492 	.db #0x03	; 3
      0000A5 02                    4493 	.db #0x02	; 2
      0000A6 02                    4494 	.db #0x02	; 2
      0000A7 03                    4495 	.db #0x03	; 3
      0000A8 03                    4496 	.db #0x03	; 3
      0000A9 02                    4497 	.db #0x02	; 2
      0000AA 02                    4498 	.db #0x02	; 2
      0000AB 03                    4499 	.db #0x03	; 3
      0000AC 03                    4500 	.db #0x03	; 3
      0000AD 02                    4501 	.db #0x02	; 2
      0000AE 02                    4502 	.db #0x02	; 2
      0000AF 03                    4503 	.db #0x03	; 3
      0000B0 03                    4504 	.db #0x03	; 3
      0000B1 01                    4505 	.db #0x01	; 1
      0000B2 01                    4506 	.db #0x01	; 1
      0000B3 01                    4507 	.db #0x01	; 1
      0000B4 01                    4508 	.db #0x01	; 1
      0000B5 02                    4509 	.db #0x02	; 2
      0000B6 02                    4510 	.db #0x02	; 2
      0000B7 03                    4511 	.db #0x03	; 3
      0000B8 03                    4512 	.db #0x03	; 3
      0000B9 02                    4513 	.db #0x02	; 2
      0000BA 02                    4514 	.db #0x02	; 2
      0000BB 03                    4515 	.db #0x03	; 3
      0000BC 03                    4516 	.db #0x03	; 3
      0000BD 02                    4517 	.db #0x02	; 2
      0000BE 02                    4518 	.db #0x02	; 2
      0000BF 03                    4519 	.db #0x03	; 3
      0000C0 03                    4520 	.db #0x03	; 3
      0000C1 02                    4521 	.db #0x02	; 2
      0000C2 02                    4522 	.db #0x02	; 2
      0000C3 03                    4523 	.db #0x03	; 3
      0000C4 03                    4524 	.db #0x03	; 3
      0000C5 01                    4525 	.db #0x01	; 1
      0000C6 01                    4526 	.db #0x01	; 1
      0000C7 01                    4527 	.db #0x01	; 1
      0000C8 01                    4528 	.db #0x01	; 1
      0000C9 03                    4529 	.db #0x03	; 3
      0000CA 03                    4530 	.db #0x03	; 3
      0000CB 02                    4531 	.db #0x02	; 2
      0000CC 02                    4532 	.db #0x02	; 2
      0000CD 03                    4533 	.db #0x03	; 3
      0000CE 03                    4534 	.db #0x03	; 3
      0000CF 02                    4535 	.db #0x02	; 2
      0000D0 02                    4536 	.db #0x02	; 2
      0000D1 03                    4537 	.db #0x03	; 3
      0000D2 03                    4538 	.db #0x03	; 3
      0000D3 02                    4539 	.db #0x02	; 2
      0000D4 02                    4540 	.db #0x02	; 2
      0000D5 03                    4541 	.db #0x03	; 3
      0000D6 03                    4542 	.db #0x03	; 3
      0000D7 02                    4543 	.db #0x02	; 2
      0000D8 02                    4544 	.db #0x02	; 2
      0000D9 01                    4545 	.db #0x01	; 1
      0000DA 01                    4546 	.db #0x01	; 1
      0000DB 01                    4547 	.db #0x01	; 1
      0000DC 01                    4548 	.db #0x01	; 1
      0000DD 03                    4549 	.db #0x03	; 3
      0000DE 03                    4550 	.db #0x03	; 3
      0000DF 02                    4551 	.db #0x02	; 2
      0000E0 02                    4552 	.db #0x02	; 2
      0000E1 03                    4553 	.db #0x03	; 3
      0000E2 03                    4554 	.db #0x03	; 3
      0000E3 02                    4555 	.db #0x02	; 2
      0000E4 02                    4556 	.db #0x02	; 2
      0000E5 03                    4557 	.db #0x03	; 3
      0000E6 03                    4558 	.db #0x03	; 3
      0000E7 02                    4559 	.db #0x02	; 2
      0000E8 02                    4560 	.db #0x02	; 2
      0000E9 03                    4561 	.db #0x03	; 3
      0000EA 03                    4562 	.db #0x03	; 3
      0000EB 02                    4563 	.db #0x02	; 2
      0000EC 02                    4564 	.db #0x02	; 2
      0000ED 01                    4565 	.db #0x01	; 1
      0000EE 01                    4566 	.db #0x01	; 1
      0000EF 01                    4567 	.db #0x01	; 1
      0000F0 01                    4568 	.db #0x01	; 1
      0000F1 02                    4569 	.db #0x02	; 2
      0000F2 02                    4570 	.db #0x02	; 2
      0000F3 03                    4571 	.db #0x03	; 3
      0000F4 03                    4572 	.db #0x03	; 3
      0000F5 02                    4573 	.db #0x02	; 2
      0000F6 02                    4574 	.db #0x02	; 2
      0000F7 03                    4575 	.db #0x03	; 3
      0000F8 03                    4576 	.db #0x03	; 3
      0000F9 02                    4577 	.db #0x02	; 2
      0000FA 02                    4578 	.db #0x02	; 2
      0000FB 03                    4579 	.db #0x03	; 3
      0000FC 03                    4580 	.db #0x03	; 3
      0000FD 02                    4581 	.db #0x02	; 2
      0000FE 02                    4582 	.db #0x02	; 2
      0000FF 03                    4583 	.db #0x03	; 3
      000100 03                    4584 	.db #0x03	; 3
      000101 01                    4585 	.db #0x01	; 1
      000102 01                    4586 	.db #0x01	; 1
      000103 01                    4587 	.db #0x01	; 1
      000104 01                    4588 	.db #0x01	; 1
      000105 02                    4589 	.db #0x02	; 2
      000106 02                    4590 	.db #0x02	; 2
      000107 03                    4591 	.db #0x03	; 3
      000108 03                    4592 	.db #0x03	; 3
      000109 02                    4593 	.db #0x02	; 2
      00010A 02                    4594 	.db #0x02	; 2
      00010B 03                    4595 	.db #0x03	; 3
      00010C 03                    4596 	.db #0x03	; 3
      00010D 02                    4597 	.db #0x02	; 2
      00010E 02                    4598 	.db #0x02	; 2
      00010F 03                    4599 	.db #0x03	; 3
      000110 03                    4600 	.db #0x03	; 3
      000111 02                    4601 	.db #0x02	; 2
      000112 02                    4602 	.db #0x02	; 2
      000113 03                    4603 	.db #0x03	; 3
      000114 03                    4604 	.db #0x03	; 3
      000115 01                    4605 	.db #0x01	; 1
      000116 01                    4606 	.db #0x01	; 1
      000117 01                    4607 	.db #0x01	; 1
      000118 01                    4608 	.db #0x01	; 1
      000119 03                    4609 	.db #0x03	; 3
      00011A 03                    4610 	.db #0x03	; 3
      00011B 02                    4611 	.db #0x02	; 2
      00011C 02                    4612 	.db #0x02	; 2
      00011D 03                    4613 	.db #0x03	; 3
      00011E 03                    4614 	.db #0x03	; 3
      00011F 02                    4615 	.db #0x02	; 2
      000120 02                    4616 	.db #0x02	; 2
      000121 03                    4617 	.db #0x03	; 3
      000122 03                    4618 	.db #0x03	; 3
      000123 02                    4619 	.db #0x02	; 2
      000124 02                    4620 	.db #0x02	; 2
      000125 03                    4621 	.db #0x03	; 3
      000126 03                    4622 	.db #0x03	; 3
      000127 02                    4623 	.db #0x02	; 2
      000128 02                    4624 	.db #0x02	; 2
      000129 01                    4625 	.db #0x01	; 1
      00012A 01                    4626 	.db #0x01	; 1
      00012B 01                    4627 	.db #0x01	; 1
      00012C 01                    4628 	.db #0x01	; 1
      00012D 03                    4629 	.db #0x03	; 3
      00012E 03                    4630 	.db #0x03	; 3
      00012F 02                    4631 	.db #0x02	; 2
      000130 02                    4632 	.db #0x02	; 2
      000131 03                    4633 	.db #0x03	; 3
      000132 03                    4634 	.db #0x03	; 3
      000133 02                    4635 	.db #0x02	; 2
      000134 02                    4636 	.db #0x02	; 2
      000135 03                    4637 	.db #0x03	; 3
      000136 03                    4638 	.db #0x03	; 3
      000137 02                    4639 	.db #0x02	; 2
      000138 02                    4640 	.db #0x02	; 2
      000139 03                    4641 	.db #0x03	; 3
      00013A 03                    4642 	.db #0x03	; 3
      00013B 02                    4643 	.db #0x02	; 2
      00013C 02                    4644 	.db #0x02	; 2
      00013D 01                    4645 	.db #0x01	; 1
      00013E 01                    4646 	.db #0x01	; 1
      00013F 01                    4647 	.db #0x01	; 1
      000140 01                    4648 	.db #0x01	; 1
      000141 02                    4649 	.db #0x02	; 2
      000142 02                    4650 	.db #0x02	; 2
      000143 03                    4651 	.db #0x03	; 3
      000144 03                    4652 	.db #0x03	; 3
      000145 02                    4653 	.db #0x02	; 2
      000146 02                    4654 	.db #0x02	; 2
      000147 03                    4655 	.db #0x03	; 3
      000148 03                    4656 	.db #0x03	; 3
      000149 02                    4657 	.db #0x02	; 2
      00014A 02                    4658 	.db #0x02	; 2
      00014B 03                    4659 	.db #0x03	; 3
      00014C 03                    4660 	.db #0x03	; 3
      00014D 02                    4661 	.db #0x02	; 2
      00014E 02                    4662 	.db #0x02	; 2
      00014F 03                    4663 	.db #0x03	; 3
      000150 03                    4664 	.db #0x03	; 3
      000151 01                    4665 	.db #0x01	; 1
      000152 01                    4666 	.db #0x01	; 1
      000153 01                    4667 	.db #0x01	; 1
      000154 01                    4668 	.db #0x01	; 1
      000155 02                    4669 	.db #0x02	; 2
      000156 02                    4670 	.db #0x02	; 2
      000157 03                    4671 	.db #0x03	; 3
      000158 03                    4672 	.db #0x03	; 3
      000159 02                    4673 	.db #0x02	; 2
      00015A 02                    4674 	.db #0x02	; 2
      00015B 03                    4675 	.db #0x03	; 3
      00015C 03                    4676 	.db #0x03	; 3
      00015D 02                    4677 	.db #0x02	; 2
      00015E 02                    4678 	.db #0x02	; 2
      00015F 03                    4679 	.db #0x03	; 3
      000160 03                    4680 	.db #0x03	; 3
      000161 02                    4681 	.db #0x02	; 2
      000162 02                    4682 	.db #0x02	; 2
      000163 03                    4683 	.db #0x03	; 3
      000164 03                    4684 	.db #0x03	; 3
      000165 01                    4685 	.db #0x01	; 1
      000166 01                    4686 	.db #0x01	; 1
      000167 01                    4687 	.db #0x01	; 1
      000168 01                    4688 	.db #0x01	; 1
      000169 03                    4689 	.db #0x03	; 3
      00016A 03                    4690 	.db #0x03	; 3
      00016B 02                    4691 	.db #0x02	; 2
      00016C 02                    4692 	.db #0x02	; 2
      00016D 03                    4693 	.db #0x03	; 3
      00016E 03                    4694 	.db #0x03	; 3
      00016F 02                    4695 	.db #0x02	; 2
      000170 02                    4696 	.db #0x02	; 2
      000171 03                    4697 	.db #0x03	; 3
      000172 03                    4698 	.db #0x03	; 3
      000173 02                    4699 	.db #0x02	; 2
      000174 02                    4700 	.db #0x02	; 2
      000175 03                    4701 	.db #0x03	; 3
      000176 03                    4702 	.db #0x03	; 3
      000177 02                    4703 	.db #0x02	; 2
      000178 02                    4704 	.db #0x02	; 2
      000179 01                    4705 	.db #0x01	; 1
      00017A 01                    4706 	.db #0x01	; 1
      00017B 01                    4707 	.db #0x01	; 1
      00017C 01                    4708 	.db #0x01	; 1
      00017D 03                    4709 	.db #0x03	; 3
      00017E 03                    4710 	.db #0x03	; 3
      00017F 02                    4711 	.db #0x02	; 2
      000180 02                    4712 	.db #0x02	; 2
      000181 03                    4713 	.db #0x03	; 3
      000182 03                    4714 	.db #0x03	; 3
      000183 02                    4715 	.db #0x02	; 2
      000184 02                    4716 	.db #0x02	; 2
      000185 03                    4717 	.db #0x03	; 3
      000186 03                    4718 	.db #0x03	; 3
      000187 02                    4719 	.db #0x02	; 2
      000188 02                    4720 	.db #0x02	; 2
      000189 03                    4721 	.db #0x03	; 3
      00018A 03                    4722 	.db #0x03	; 3
      00018B 02                    4723 	.db #0x02	; 2
      00018C 02                    4724 	.db #0x02	; 2
      00018D 01                    4725 	.db #0x01	; 1
      00018E 01                    4726 	.db #0x01	; 1
      00018F 01                    4727 	.db #0x01	; 1
      000190 01                    4728 	.db #0x01	; 1
      000191 01                    4729 	.db #0x01	; 1
      000192 01                    4730 	.db #0x01	; 1
      000193 01                    4731 	.db #0x01	; 1
      000194 01                    4732 	.db #0x01	; 1
      000195 01                    4733 	.db #0x01	; 1
      000196 01                    4734 	.db #0x01	; 1
      000197 01                    4735 	.db #0x01	; 1
      000198 01                    4736 	.db #0x01	; 1
      000199 01                    4737 	.db #0x01	; 1
      00019A 01                    4738 	.db #0x01	; 1
      00019B 01                    4739 	.db #0x01	; 1
      00019C 01                    4740 	.db #0x01	; 1
      00019D 01                    4741 	.db #0x01	; 1
      00019E 01                    4742 	.db #0x01	; 1
      00019F 01                    4743 	.db #0x01	; 1
      0001A0 01                    4744 	.db #0x01	; 1
      0001A1 01                    4745 	.db #0x01	; 1
      0001A2 01                    4746 	.db #0x01	; 1
                           0001A3  4747 Fmain$__xinit_squareTL$0_0$0 == .
      0001A3                       4748 __xinit__squareTL:
      0001A3 FF                    4749 	.db #0xff	; 255
      0001A4 FF                    4750 	.db #0xff	; 255
      0001A5 80                    4751 	.db #0x80	; 128
      0001A6 80                    4752 	.db #0x80	; 128
      0001A7 80                    4753 	.db #0x80	; 128
      0001A8 80                    4754 	.db #0x80	; 128
      0001A9 80                    4755 	.db #0x80	; 128
      0001AA 80                    4756 	.db #0x80	; 128
      0001AB 80                    4757 	.db #0x80	; 128
      0001AC 80                    4758 	.db #0x80	; 128
      0001AD 80                    4759 	.db #0x80	; 128
      0001AE 80                    4760 	.db #0x80	; 128
      0001AF 80                    4761 	.db #0x80	; 128
      0001B0 80                    4762 	.db #0x80	; 128
      0001B1 80                    4763 	.db #0x80	; 128
      0001B2 80                    4764 	.db #0x80	; 128
                           0001B3  4765 Fmain$__xinit_squareTR$0_0$0 == .
      0001B3                       4766 __xinit__squareTR:
      0001B3 FF                    4767 	.db #0xff	; 255
      0001B4 FF                    4768 	.db #0xff	; 255
      0001B5 01                    4769 	.db #0x01	; 1
      0001B6 01                    4770 	.db #0x01	; 1
      0001B7 01                    4771 	.db #0x01	; 1
      0001B8 01                    4772 	.db #0x01	; 1
      0001B9 01                    4773 	.db #0x01	; 1
      0001BA 01                    4774 	.db #0x01	; 1
      0001BB 01                    4775 	.db #0x01	; 1
      0001BC 01                    4776 	.db #0x01	; 1
      0001BD 01                    4777 	.db #0x01	; 1
      0001BE 01                    4778 	.db #0x01	; 1
      0001BF 01                    4779 	.db #0x01	; 1
      0001C0 01                    4780 	.db #0x01	; 1
      0001C1 01                    4781 	.db #0x01	; 1
      0001C2 01                    4782 	.db #0x01	; 1
                           0001C3  4783 Fmain$__xinit_squareBL$0_0$0 == .
      0001C3                       4784 __xinit__squareBL:
      0001C3 80                    4785 	.db #0x80	; 128
      0001C4 80                    4786 	.db #0x80	; 128
      0001C5 80                    4787 	.db #0x80	; 128
      0001C6 80                    4788 	.db #0x80	; 128
      0001C7 80                    4789 	.db #0x80	; 128
      0001C8 80                    4790 	.db #0x80	; 128
      0001C9 80                    4791 	.db #0x80	; 128
      0001CA 80                    4792 	.db #0x80	; 128
      0001CB 80                    4793 	.db #0x80	; 128
      0001CC 80                    4794 	.db #0x80	; 128
      0001CD 80                    4795 	.db #0x80	; 128
      0001CE 80                    4796 	.db #0x80	; 128
      0001CF 80                    4797 	.db #0x80	; 128
      0001D0 80                    4798 	.db #0x80	; 128
      0001D1 FF                    4799 	.db #0xff	; 255
      0001D2 FF                    4800 	.db #0xff	; 255
                           0001D3  4801 Fmain$__xinit_squareBR$0_0$0 == .
      0001D3                       4802 __xinit__squareBR:
      0001D3 01                    4803 	.db #0x01	; 1
      0001D4 01                    4804 	.db #0x01	; 1
      0001D5 01                    4805 	.db #0x01	; 1
      0001D6 01                    4806 	.db #0x01	; 1
      0001D7 01                    4807 	.db #0x01	; 1
      0001D8 01                    4808 	.db #0x01	; 1
      0001D9 01                    4809 	.db #0x01	; 1
      0001DA 01                    4810 	.db #0x01	; 1
      0001DB 01                    4811 	.db #0x01	; 1
      0001DC 01                    4812 	.db #0x01	; 1
      0001DD 01                    4813 	.db #0x01	; 1
      0001DE 01                    4814 	.db #0x01	; 1
      0001DF 01                    4815 	.db #0x01	; 1
      0001E0 01                    4816 	.db #0x01	; 1
      0001E1 FF                    4817 	.db #0xff	; 255
      0001E2 FF                    4818 	.db #0xff	; 255
                           0001E3  4819 Fmain$__xinit_black_piece$0_0$0 == .
      0001E3                       4820 __xinit__black_piece:
      0001E3 FF                    4821 	.db #0xff	; 255
      0001E4 FF                    4822 	.db #0xff	; 255
      0001E5 FF                    4823 	.db #0xff	; 255
      0001E6 FF                    4824 	.db #0xff	; 255
      0001E7 FF                    4825 	.db #0xff	; 255
      0001E8 FF                    4826 	.db #0xff	; 255
      0001E9 FF                    4827 	.db #0xff	; 255
      0001EA FF                    4828 	.db #0xff	; 255
      0001EB FF                    4829 	.db #0xff	; 255
      0001EC FF                    4830 	.db #0xff	; 255
      0001ED FF                    4831 	.db #0xff	; 255
      0001EE FF                    4832 	.db #0xff	; 255
      0001EF FF                    4833 	.db #0xff	; 255
      0001F0 FF                    4834 	.db #0xff	; 255
      0001F1 FF                    4835 	.db #0xff	; 255
      0001F2 FF                    4836 	.db #0xff	; 255
                           0001F3  4837 Fmain$__xinit_white_piece$0_0$0 == .
      0001F3                       4838 __xinit__white_piece:
      0001F3 FF                    4839 	.db #0xff	; 255
      0001F4 00                    4840 	.db #0x00	; 0
      0001F5 FF                    4841 	.db #0xff	; 255
      0001F6 00                    4842 	.db #0x00	; 0
      0001F7 FF                    4843 	.db #0xff	; 255
      0001F8 00                    4844 	.db #0x00	; 0
      0001F9 FF                    4845 	.db #0xff	; 255
      0001FA 00                    4846 	.db #0x00	; 0
      0001FB FF                    4847 	.db #0xff	; 255
      0001FC 00                    4848 	.db #0x00	; 0
      0001FD FF                    4849 	.db #0xff	; 255
      0001FE 00                    4850 	.db #0x00	; 0
      0001FF FF                    4851 	.db #0xff	; 255
      000200 00                    4852 	.db #0x00	; 0
      000201 FF                    4853 	.db #0xff	; 255
      000202 00                    4854 	.db #0x00	; 0
                           000203  4855 Fmain$__xinit_currentPlayerBlackText$0_0$0 == .
      000203                       4856 __xinit__currentPlayerBlackText:
      000203 00                    4857 	.db #0x00	; 0
      000204 00                    4858 	.db #0x00	; 0
      000205 50                    4859 	.db #0x50	; 80	'P'
      000206 6C                    4860 	.db #0x6c	; 108	'l'
      000207 61                    4861 	.db #0x61	; 97	'a'
      000208 79                    4862 	.db #0x79	; 121	'y'
      000209 65                    4863 	.db #0x65	; 101	'e'
      00020A 72                    4864 	.db #0x72	; 114	'r'
      00020B 00                    4865 	.db #0x00	; 0
      00020C 42                    4866 	.db #0x42	; 66	'B'
      00020D 6C                    4867 	.db #0x6c	; 108	'l'
      00020E 61                    4868 	.db #0x61	; 97	'a'
      00020F 63                    4869 	.db #0x63	; 99	'c'
      000210 6B                    4870 	.db #0x6b	; 107	'k'
      000211 00                    4871 	.db #0x00	; 0
      000212 00                    4872 	.db #0x00	; 0
                           000213  4873 Fmain$__xinit_currentPlayerWhiteText$0_0$0 == .
      000213                       4874 __xinit__currentPlayerWhiteText:
      000213 00                    4875 	.db #0x00	; 0
      000214 00                    4876 	.db #0x00	; 0
      000215 50                    4877 	.db #0x50	; 80	'P'
      000216 6C                    4878 	.db #0x6c	; 108	'l'
      000217 61                    4879 	.db #0x61	; 97	'a'
      000218 79                    4880 	.db #0x79	; 121	'y'
      000219 65                    4881 	.db #0x65	; 101	'e'
      00021A 72                    4882 	.db #0x72	; 114	'r'
      00021B 00                    4883 	.db #0x00	; 0
      00021C 57                    4884 	.db #0x57	; 87	'W'
      00021D 68                    4885 	.db #0x68	; 104	'h'
      00021E 69                    4886 	.db #0x69	; 105	'i'
      00021F 74                    4887 	.db #0x74	; 116	't'
      000220 65                    4888 	.db #0x65	; 101	'e'
      000221 00                    4889 	.db #0x00	; 0
      000222 00                    4890 	.db #0x00	; 0
                           000223  4891 Fmain$__xinit_blackKing$0_0$0 == .
      000223                       4892 __xinit__blackKing:
      000223 FF                    4893 	.db #0xff	; 255
      000224 FF                    4894 	.db #0xff	; 255
      000225 DB                    4895 	.db #0xdb	; 219
      000226 FF                    4896 	.db #0xff	; 255
      000227 66                    4897 	.db #0x66	; 102	'f'
      000228 FF                    4898 	.db #0xff	; 255
      000229 81                    4899 	.db #0x81	; 129
      00022A FF                    4900 	.db #0xff	; 255
      00022B 81                    4901 	.db #0x81	; 129
      00022C FF                    4902 	.db #0xff	; 255
      00022D C3                    4903 	.db #0xc3	; 195
      00022E FF                    4904 	.db #0xff	; 255
      00022F FF                    4905 	.db #0xff	; 255
      000230 FF                    4906 	.db #0xff	; 255
      000231 FF                    4907 	.db #0xff	; 255
      000232 FF                    4908 	.db #0xff	; 255
                           000233  4909 Fmain$__xinit_whiteKing$0_0$0 == .
      000233                       4910 __xinit__whiteKing:
      000233 FF                    4911 	.db #0xff	; 255
      000234 00                    4912 	.db #0x00	; 0
      000235 DB                    4913 	.db #0xdb	; 219
      000236 24                    4914 	.db #0x24	; 36
      000237 66                    4915 	.db #0x66	; 102	'f'
      000238 99                    4916 	.db #0x99	; 153
      000239 81                    4917 	.db #0x81	; 129
      00023A 7E                    4918 	.db #0x7e	; 126
      00023B 81                    4919 	.db #0x81	; 129
      00023C 7E                    4920 	.db #0x7e	; 126
      00023D C3                    4921 	.db #0xc3	; 195
      00023E 3C                    4922 	.db #0x3c	; 60
      00023F FF                    4923 	.db #0xff	; 255
      000240 00                    4924 	.db #0x00	; 0
      000241 FF                    4925 	.db #0xff	; 255
      000242 00                    4926 	.db #0x00	; 0
                           000243  4927 Fmain$__xinit_blackPieces$0_0$0 == .
      000243                       4928 __xinit__blackPieces:
      000243 2C                    4929 	.db #0x2c	; 44
      000244 1C                    4930 	.db #0x1c	; 28
      000245 00                    4931 	.db #0x00	;  0
      000246 4C                    4932 	.db #0x4c	; 76	'L'
      000247 1C                    4933 	.db #0x1c	; 28
      000248 00                    4934 	.db #0x00	;  0
      000249 6C                    4935 	.db #0x6c	; 108	'l'
      00024A 1C                    4936 	.db #0x1c	; 28
      00024B 00                    4937 	.db #0x00	;  0
      00024C 8C                    4938 	.db #0x8c	; 140
      00024D 1C                    4939 	.db #0x1c	; 28
      00024E 00                    4940 	.db #0x00	;  0
      00024F 1C                    4941 	.db #0x1c	; 28
      000250 2C                    4942 	.db #0x2c	; 44
      000251 00                    4943 	.db #0x00	;  0
      000252 3C                    4944 	.db #0x3c	; 60
      000253 2C                    4945 	.db #0x2c	; 44
      000254 00                    4946 	.db #0x00	;  0
      000255 5C                    4947 	.db #0x5c	; 92
      000256 2C                    4948 	.db #0x2c	; 44
      000257 00                    4949 	.db #0x00	;  0
      000258 7C                    4950 	.db #0x7c	; 124
      000259 2C                    4951 	.db #0x2c	; 44
      00025A 00                    4952 	.db #0x00	;  0
      00025B 2C                    4953 	.db #0x2c	; 44
      00025C 3C                    4954 	.db #0x3c	; 60
      00025D 00                    4955 	.db #0x00	;  0
      00025E 4C                    4956 	.db #0x4c	; 76	'L'
      00025F 3C                    4957 	.db #0x3c	; 60
      000260 00                    4958 	.db #0x00	;  0
      000261 6C                    4959 	.db #0x6c	; 108	'l'
      000262 3C                    4960 	.db #0x3c	; 60
      000263 00                    4961 	.db #0x00	;  0
      000264 8C                    4962 	.db #0x8c	; 140
      000265 3C                    4963 	.db #0x3c	; 60
      000266 00                    4964 	.db #0x00	;  0
                           000267  4965 Fmain$__xinit_whitePieces$0_0$0 == .
      000267                       4966 __xinit__whitePieces:
      000267 1C                    4967 	.db #0x1c	; 28
      000268 8C                    4968 	.db #0x8c	; 140
      000269 00                    4969 	.db #0x00	;  0
      00026A 3C                    4970 	.db #0x3c	; 60
      00026B 8C                    4971 	.db #0x8c	; 140
      00026C 00                    4972 	.db #0x00	;  0
      00026D 5C                    4973 	.db #0x5c	; 92
      00026E 8C                    4974 	.db #0x8c	; 140
      00026F 00                    4975 	.db #0x00	;  0
      000270 7C                    4976 	.db #0x7c	; 124
      000271 8C                    4977 	.db #0x8c	; 140
      000272 00                    4978 	.db #0x00	;  0
      000273 2C                    4979 	.db #0x2c	; 44
      000274 7C                    4980 	.db #0x7c	; 124
      000275 00                    4981 	.db #0x00	;  0
      000276 4C                    4982 	.db #0x4c	; 76	'L'
      000277 7C                    4983 	.db #0x7c	; 124
      000278 00                    4984 	.db #0x00	;  0
      000279 6C                    4985 	.db #0x6c	; 108	'l'
      00027A 7C                    4986 	.db #0x7c	; 124
      00027B 00                    4987 	.db #0x00	;  0
      00027C 8C                    4988 	.db #0x8c	; 140
      00027D 7C                    4989 	.db #0x7c	; 124
      00027E 00                    4990 	.db #0x00	;  0
      00027F 1C                    4991 	.db #0x1c	; 28
      000280 6C                    4992 	.db #0x6c	; 108	'l'
      000281 00                    4993 	.db #0x00	;  0
      000282 3C                    4994 	.db #0x3c	; 60
      000283 6C                    4995 	.db #0x6c	; 108	'l'
      000284 00                    4996 	.db #0x00	;  0
      000285 5C                    4997 	.db #0x5c	; 92
      000286 6C                    4998 	.db #0x6c	; 108	'l'
      000287 00                    4999 	.db #0x00	;  0
      000288 7C                    5000 	.db #0x7c	; 124
      000289 6C                    5001 	.db #0x6c	; 108	'l'
      00028A 00                    5002 	.db #0x00	;  0
                                   5003 	.area _CABS (ABS)
