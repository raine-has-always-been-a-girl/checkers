                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.2 #13350 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _checkCollision
                                     13 	.globl _isValidMove
                                     14 	.globl _checkCapture
                                     15 	.globl _isMoveWithinBoard
                                     16 	.globl _modifyCoordinates
                                     17 	.globl _printWhite
                                     18 	.globl _printBlack
                                     19 	.globl _printSquare
                                     20 	.globl _printbkg
                                     21 	.globl _printTurn
                                     22 	.globl _font
                                     23 	.globl _dpad
                                     24 	.globl _moveSquare
                                     25 	.globl _font_set
                                     26 	.globl _font_load
                                     27 	.globl _font_init
                                     28 	.globl _abs
                                     29 	.globl _set_sprite_data
                                     30 	.globl _set_win_tiles
                                     31 	.globl _set_bkg_tiles
                                     32 	.globl _set_bkg_data
                                     33 	.globl _joypad
                                     34 	.globl _delay
                                     35 	.globl _whitePieces
                                     36 	.globl _blackPieces
                                     37 	.globl _whiteKing
                                     38 	.globl _blackKing
                                     39 	.globl _currentPlayerWhiteText
                                     40 	.globl _currentPlayerBlackText
                                     41 	.globl _white_piece
                                     42 	.globl _black_piece
                                     43 	.globl _squareBR
                                     44 	.globl _squareBL
                                     45 	.globl _squareTR
                                     46 	.globl _squareTL
                                     47 	.globl _map
                                     48 	.globl _tile3
                                     49 	.globl _tile2
                                     50 	.globl _tile1
                                     51 	.globl _pieceSelected
                                     52 	.globl _selectedCoords
                                     53 	.globl _currentPlayer
                                     54 	.globl _cursory
                                     55 	.globl _cursorx
                                     56 	.globl _selectedPieceIndex
                                     57 	.globl _debounceTimer
                                     58 	.globl _lastButtonState
                                     59 	.globl _joypad_input
                                     60 ;--------------------------------------------------------
                                     61 ; special function registers
                                     62 ;--------------------------------------------------------
                                     63 ;--------------------------------------------------------
                                     64 ; ram data
                                     65 ;--------------------------------------------------------
                                     66 	.area _DATA
                           000000    67 G$joypad_input$0_0$0==.
      000000                         68 _joypad_input::
      000000                         69 	.ds 1
                                     70 ;--------------------------------------------------------
                                     71 ; ram data
                                     72 ;--------------------------------------------------------
                                     73 	.area _INITIALIZED
                           000000    74 G$lastButtonState$0_0$0==.
      000000                         75 _lastButtonState::
      000000                         76 	.ds 1
                           000001    77 G$debounceTimer$0_0$0==.
      000001                         78 _debounceTimer::
      000001                         79 	.ds 2
                           000003    80 G$selectedPieceIndex$0_0$0==.
      000003                         81 _selectedPieceIndex::
      000003                         82 	.ds 2
                           000005    83 G$cursorx$0_0$0==.
      000005                         84 _cursorx::
      000005                         85 	.ds 1
                           000006    86 G$cursory$0_0$0==.
      000006                         87 _cursory::
      000006                         88 	.ds 1
                           000007    89 G$currentPlayer$0_0$0==.
      000007                         90 _currentPlayer::
      000007                         91 	.ds 1
                           000008    92 G$selectedCoords$0_0$0==.
      000008                         93 _selectedCoords::
      000008                         94 	.ds 2
                           00000A    95 G$pieceSelected$0_0$0==.
      00000A                         96 _pieceSelected::
      00000A                         97 	.ds 1
                           00000B    98 G$tile1$0_0$0==.
      00000B                         99 _tile1::
      00000B                        100 	.ds 16
                           00001B   101 G$tile2$0_0$0==.
      00001B                        102 _tile2::
      00001B                        103 	.ds 16
                           00002B   104 G$tile3$0_0$0==.
      00002B                        105 _tile3::
      00002B                        106 	.ds 16
                           00003B   107 G$map$0_0$0==.
      00003B                        108 _map::
      00003B                        109 	.ds 360
                           0001A3   110 G$squareTL$0_0$0==.
      0001A3                        111 _squareTL::
      0001A3                        112 	.ds 16
                           0001B3   113 G$squareTR$0_0$0==.
      0001B3                        114 _squareTR::
      0001B3                        115 	.ds 16
                           0001C3   116 G$squareBL$0_0$0==.
      0001C3                        117 _squareBL::
      0001C3                        118 	.ds 16
                           0001D3   119 G$squareBR$0_0$0==.
      0001D3                        120 _squareBR::
      0001D3                        121 	.ds 16
                           0001E3   122 G$black_piece$0_0$0==.
      0001E3                        123 _black_piece::
      0001E3                        124 	.ds 16
                           0001F3   125 G$white_piece$0_0$0==.
      0001F3                        126 _white_piece::
      0001F3                        127 	.ds 16
                           000203   128 G$currentPlayerBlackText$0_0$0==.
      000203                        129 _currentPlayerBlackText::
      000203                        130 	.ds 16
                           000213   131 G$currentPlayerWhiteText$0_0$0==.
      000213                        132 _currentPlayerWhiteText::
      000213                        133 	.ds 16
                           000223   134 G$blackKing$0_0$0==.
      000223                        135 _blackKing::
      000223                        136 	.ds 16
                           000233   137 G$whiteKing$0_0$0==.
      000233                        138 _whiteKing::
      000233                        139 	.ds 16
                           000243   140 G$blackPieces$0_0$0==.
      000243                        141 _blackPieces::
      000243                        142 	.ds 36
                           000267   143 G$whitePieces$0_0$0==.
      000267                        144 _whitePieces::
      000267                        145 	.ds 36
                                    146 ;--------------------------------------------------------
                                    147 ; absolute external ram data
                                    148 ;--------------------------------------------------------
                                    149 	.area _DABS (ABS)
                                    150 ;--------------------------------------------------------
                                    151 ; global & static initialisations
                                    152 ;--------------------------------------------------------
                                    153 	.area _HOME
                                    154 	.area _GSINIT
                                    155 	.area _GSFINAL
                                    156 	.area _GSINIT
                                    157 ;--------------------------------------------------------
                                    158 ; Home
                                    159 ;--------------------------------------------------------
                                    160 	.area _HOME
                                    161 	.area _HOME
                                    162 ;--------------------------------------------------------
                                    163 ; code
                                    164 ;--------------------------------------------------------
                                    165 	.area _CODE
                           000000   166 	G$moveSquare$0$0	= .
                                    167 	.globl	G$moveSquare$0$0
                           000000   168 	C$main.c$96$0_0$125	= .
                                    169 	.globl	C$main.c$96$0_0$125
                                    170 ;main.c:96: void moveSquare() {
                                    171 ;	---------------------------------
                                    172 ; Function moveSquare
                                    173 ; ---------------------------------
      000000                        174 _moveSquare::
                                    175 ;main.c:97: move_sprite(0, cursorx - 4, cursory - 4);
      000000 FAr06r00         [16]  176 	ld	a, (#_cursory)
      000003 C6 FC            [ 8]  177 	add	a, #0xfc
      000005 47               [ 4]  178 	ld	b, a
      000006 FAr05r00         [16]  179 	ld	a, (#_cursorx)
      000009 C6 FC            [ 8]  180 	add	a, #0xfc
      00000B 4F               [ 4]  181 	ld	c, a
                                    182 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      00000C 21r00r00         [12]  183 	ld	hl, #_shadow_OAM
                                    184 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      00000F 78               [ 4]  185 	ld	a, b
      000010 22               [ 8]  186 	ld	(hl+), a
      000011 71               [ 8]  187 	ld	(hl), c
                                    188 ;main.c:98: move_sprite(1, cursorx + 4, cursory - 4);
      000012 FAr06r00         [16]  189 	ld	a, (#_cursory)
      000015 C6 FC            [ 8]  190 	add	a, #0xfc
      000017 47               [ 4]  191 	ld	b, a
      000018 FAr05r00         [16]  192 	ld	a, (#_cursorx)
      00001B C6 04            [ 8]  193 	add	a, #0x04
      00001D 4F               [ 4]  194 	ld	c, a
                                    195 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      00001E 21r04r00         [12]  196 	ld	hl, #(_shadow_OAM + 4)
                                    197 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      000021 78               [ 4]  198 	ld	a, b
      000022 22               [ 8]  199 	ld	(hl+), a
      000023 71               [ 8]  200 	ld	(hl), c
                                    201 ;main.c:99: move_sprite(2, cursorx - 4, cursory + 4);
      000024 FAr06r00         [16]  202 	ld	a, (#_cursory)
      000027 C6 04            [ 8]  203 	add	a, #0x04
      000029 47               [ 4]  204 	ld	b, a
      00002A FAr05r00         [16]  205 	ld	a, (#_cursorx)
      00002D C6 FC            [ 8]  206 	add	a, #0xfc
      00002F 4F               [ 4]  207 	ld	c, a
                                    208 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      000030 21r08r00         [12]  209 	ld	hl, #(_shadow_OAM + 8)
                                    210 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      000033 78               [ 4]  211 	ld	a, b
      000034 22               [ 8]  212 	ld	(hl+), a
      000035 71               [ 8]  213 	ld	(hl), c
                                    214 ;main.c:100: move_sprite(3, cursorx + 4, cursory + 4);
      000036 FAr06r00         [16]  215 	ld	a, (#_cursory)
      000039 C6 04            [ 8]  216 	add	a, #0x04
      00003B 47               [ 4]  217 	ld	b, a
      00003C FAr05r00         [16]  218 	ld	a, (#_cursorx)
      00003F C6 04            [ 8]  219 	add	a, #0x04
      000041 4F               [ 4]  220 	ld	c, a
                                    221 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      000042 21r0Cr00         [12]  222 	ld	hl, #(_shadow_OAM + 12)
                                    223 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      000045 78               [ 4]  224 	ld	a, b
      000046 22               [ 8]  225 	ld	(hl+), a
      000047 71               [ 8]  226 	ld	(hl), c
                           000048   227 	C$main.c$100$3_0$125	= .
                                    228 	.globl	C$main.c$100$3_0$125
                                    229 ;main.c:100: move_sprite(3, cursorx + 4, cursory + 4);
                           000048   230 	C$main.c$101$3_0$125	= .
                                    231 	.globl	C$main.c$101$3_0$125
                                    232 ;main.c:101: }
                           000048   233 	C$main.c$101$3_0$125	= .
                                    234 	.globl	C$main.c$101$3_0$125
                           000048   235 	XG$moveSquare$0$0	= .
                                    236 	.globl	XG$moveSquare$0$0
      000048 C9               [16]  237 	ret
                           000049   238 	G$dpad$0$0	= .
                                    239 	.globl	G$dpad$0$0
                           000049   240 	C$main.c$119$3_0$138	= .
                                    241 	.globl	C$main.c$119$3_0$138
                                    242 ;main.c:119: void dpad() {
                                    243 ;	---------------------------------
                                    244 ; Function dpad
                                    245 ; ---------------------------------
      000049                        246 _dpad::
                           000049   247 	C$main.c$120$1_0$138	= .
                                    248 	.globl	C$main.c$120$1_0$138
                                    249 ;main.c:120: if (joypad_input & J_RIGHT) {
      000049 21r00r00         [12]  250 	ld	hl, #_joypad_input
      00004C 4E               [ 8]  251 	ld	c, (hl)
      00004D CB 41            [ 8]  252 	bit	0, c
      00004F 28 07            [12]  253 	jr	Z, 00102$
                           000051   254 	C$main.c$121$2_0$139	= .
                                    255 	.globl	C$main.c$121$2_0$139
                                    256 ;main.c:121: cursorx = cursorx + SQUARE_SIZE;
      000051 21r05r00         [12]  257 	ld	hl, #_cursorx
      000054 7E               [ 8]  258 	ld	a, (hl)
      000055 C6 10            [ 8]  259 	add	a, #0x10
      000057 77               [ 8]  260 	ld	(hl), a
      000058                        261 00102$:
                           000058   262 	C$main.c$123$1_0$138	= .
                                    263 	.globl	C$main.c$123$1_0$138
                                    264 ;main.c:123: if (joypad_input & J_LEFT) {
      000058 CB 49            [ 8]  265 	bit	1, c
      00005A 28 07            [12]  266 	jr	Z, 00104$
                           00005C   267 	C$main.c$124$2_0$140	= .
                                    268 	.globl	C$main.c$124$2_0$140
                                    269 ;main.c:124: cursorx = cursorx - SQUARE_SIZE;
      00005C 21r05r00         [12]  270 	ld	hl, #_cursorx
      00005F 7E               [ 8]  271 	ld	a, (hl)
      000060 C6 F0            [ 8]  272 	add	a, #0xf0
      000062 77               [ 8]  273 	ld	(hl), a
      000063                        274 00104$:
                           000063   275 	C$main.c$126$1_0$138	= .
                                    276 	.globl	C$main.c$126$1_0$138
                                    277 ;main.c:126: if (joypad_input & J_UP) {
      000063 CB 51            [ 8]  278 	bit	2, c
      000065 28 07            [12]  279 	jr	Z, 00106$
                           000067   280 	C$main.c$127$2_0$141	= .
                                    281 	.globl	C$main.c$127$2_0$141
                                    282 ;main.c:127: cursory = cursory - SQUARE_SIZE;
      000067 21r06r00         [12]  283 	ld	hl, #_cursory
      00006A 7E               [ 8]  284 	ld	a, (hl)
      00006B C6 F0            [ 8]  285 	add	a, #0xf0
      00006D 77               [ 8]  286 	ld	(hl), a
      00006E                        287 00106$:
                           00006E   288 	C$main.c$129$1_0$138	= .
                                    289 	.globl	C$main.c$129$1_0$138
                                    290 ;main.c:129: if (joypad_input & J_DOWN) {
      00006E CB 59            [ 8]  291 	bit	3, c
      000070 CAr00r00         [16]  292 	jp	Z,_moveSquare
                           000073   293 	C$main.c$130$2_0$142	= .
                                    294 	.globl	C$main.c$130$2_0$142
                                    295 ;main.c:130: cursory = cursory + SQUARE_SIZE;
      000073 21r06r00         [12]  296 	ld	hl, #_cursory
      000076 7E               [ 8]  297 	ld	a, (hl)
      000077 C6 10            [ 8]  298 	add	a, #0x10
      000079 77               [ 8]  299 	ld	(hl), a
                           00007A   300 	C$main.c$132$1_0$138	= .
                                    301 	.globl	C$main.c$132$1_0$138
                                    302 ;main.c:132: moveSquare();
                           00007A   303 	C$main.c$133$1_0$138	= .
                                    304 	.globl	C$main.c$133$1_0$138
                                    305 ;main.c:133: }
                           00007A   306 	C$main.c$133$1_0$138	= .
                                    307 	.globl	C$main.c$133$1_0$138
                           00007A   308 	XG$dpad$0$0	= .
                                    309 	.globl	XG$dpad$0$0
      00007A C3r00r00         [16]  310 	jp	_moveSquare
                           00007D   311 	G$font$0$0	= .
                                    312 	.globl	G$font$0$0
                           00007D   313 	C$main.c$134$1_0$143	= .
                                    314 	.globl	C$main.c$134$1_0$143
                                    315 ;main.c:134: void font() {
                                    316 ;	---------------------------------
                                    317 ; Function font
                                    318 ; ---------------------------------
      00007D                        319 _font::
                           00007D   320 	C$main.c$136$1_0$143	= .
                                    321 	.globl	C$main.c$136$1_0$143
                                    322 ;main.c:136: font_init();
      00007D CDr00r00         [24]  323 	call	_font_init
                           000080   324 	C$main.c$137$1_0$143	= .
                                    325 	.globl	C$main.c$137$1_0$143
                                    326 ;main.c:137: min_font = font_load(font_ibm_fixed);
      000080 11r00r00         [12]  327 	ld	de, #_font_ibm_fixed
      000083 D5               [16]  328 	push	de
      000084 CDr00r00         [24]  329 	call	_font_load
      000087 E1               [12]  330 	pop	hl
                           000088   331 	C$main.c$138$1_0$143	= .
                                    332 	.globl	C$main.c$138$1_0$143
                                    333 ;main.c:138: font_set(min_font);
      000088 D5               [16]  334 	push	de
      000089 CDr00r00         [24]  335 	call	_font_set
      00008C E1               [12]  336 	pop	hl
                           00008D   337 	C$main.c$139$1_0$143	= .
                                    338 	.globl	C$main.c$139$1_0$143
                                    339 ;main.c:139: }
                           00008D   340 	C$main.c$139$1_0$143	= .
                                    341 	.globl	C$main.c$139$1_0$143
                           00008D   342 	XG$font$0$0	= .
                                    343 	.globl	XG$font$0$0
      00008D C9               [16]  344 	ret
                           00008E   345 	G$printTurn$0$0	= .
                                    346 	.globl	G$printTurn$0$0
                           00008E   347 	C$main.c$140$1_0$144	= .
                                    348 	.globl	C$main.c$140$1_0$144
                                    349 ;main.c:140: void printTurn() {
                                    350 ;	---------------------------------
                                    351 ; Function printTurn
                                    352 ; ---------------------------------
      00008E                        353 _printTurn::
                           00008E   354 	C$main.c$141$1_0$144	= .
                                    355 	.globl	C$main.c$141$1_0$144
                                    356 ;main.c:141: if (currentPlayer == BLACK_PLAYER){
      00008E FAr07r00         [16]  357 	ld	a, (#_currentPlayer)
      000091 B7               [ 4]  358 	or	a, a
      000092 20 13            [12]  359 	jr	NZ, 00102$
                           000094   360 	C$main.c$142$2_0$145	= .
                                    361 	.globl	C$main.c$142$2_0$145
                                    362 ;main.c:142: set_win_tiles(2, 0, 16, 1, currentPlayerBlackText);
      000094 11r03r02         [12]  363 	ld	de, #_currentPlayerBlackText
      000097 D5               [16]  364 	push	de
      000098 21 10 01         [12]  365 	ld	hl, #0x110
      00009B E5               [16]  366 	push	hl
      00009C 21 02 00         [12]  367 	ld	hl, #0x02
      00009F E5               [16]  368 	push	hl
      0000A0 CDr00r00         [24]  369 	call	_set_win_tiles
      0000A3 E8 06            [16]  370 	add	sp, #6
      0000A5 18 11            [12]  371 	jr	00103$
      0000A7                        372 00102$:
                           0000A7   373 	C$main.c$144$2_0$146	= .
                                    374 	.globl	C$main.c$144$2_0$146
                                    375 ;main.c:144: set_win_tiles(2, 0, 16, 1, currentPlayerWhiteText);
      0000A7 11r13r02         [12]  376 	ld	de, #_currentPlayerWhiteText
      0000AA D5               [16]  377 	push	de
      0000AB 21 10 01         [12]  378 	ld	hl, #0x110
      0000AE E5               [16]  379 	push	hl
      0000AF 21 02 00         [12]  380 	ld	hl, #0x02
      0000B2 E5               [16]  381 	push	hl
      0000B3 CDr00r00         [24]  382 	call	_set_win_tiles
      0000B6 E8 06            [16]  383 	add	sp, #6
      0000B8                        384 00103$:
                                    385 ;c:/gbdk/include/gb/gb.h:1468: WX_REG=x, WY_REG=y;
      0000B8 3E 07            [ 8]  386 	ld	a, #0x07
      0000BA E0r00            [12]  387 	ldh	(_WX_REG + 0), a
      0000BC 3E 88            [ 8]  388 	ld	a, #0x88
      0000BE E0r00            [12]  389 	ldh	(_WY_REG + 0), a
                           0000C0   390 	C$main.c$146$3_0$144	= .
                                    391 	.globl	C$main.c$146$3_0$144
                                    392 ;main.c:146: move_win(7, 136);
                           0000C0   393 	C$main.c$147$3_0$144	= .
                                    394 	.globl	C$main.c$147$3_0$144
                                    395 ;main.c:147: }
                           0000C0   396 	C$main.c$147$3_0$144	= .
                                    397 	.globl	C$main.c$147$3_0$144
                           0000C0   398 	XG$printTurn$0$0	= .
                                    399 	.globl	XG$printTurn$0$0
      0000C0 C9               [16]  400 	ret
                           0000C1   401 	G$printbkg$0$0	= .
                                    402 	.globl	G$printbkg$0$0
                           0000C1   403 	C$main.c$148$3_0$150	= .
                                    404 	.globl	C$main.c$148$3_0$150
                                    405 ;main.c:148: void printbkg() {
                                    406 ;	---------------------------------
                                    407 ; Function printbkg
                                    408 ; ---------------------------------
      0000C1                        409 _printbkg::
                           0000C1   410 	C$main.c$149$1_0$150	= .
                                    411 	.globl	C$main.c$149$1_0$150
                                    412 ;main.c:149: set_bkg_data(1, 1, tile1);
      0000C1 11r0Br00         [12]  413 	ld	de, #_tile1
      0000C4 D5               [16]  414 	push	de
      0000C5 21 01 01         [12]  415 	ld	hl, #0x101
      0000C8 E5               [16]  416 	push	hl
      0000C9 CDr00r00         [24]  417 	call	_set_bkg_data
      0000CC E8 04            [16]  418 	add	sp, #4
                           0000CE   419 	C$main.c$150$1_0$150	= .
                                    420 	.globl	C$main.c$150$1_0$150
                                    421 ;main.c:150: set_bkg_data(2, 1, tile2);
      0000CE 11r1Br00         [12]  422 	ld	de, #_tile2
      0000D1 D5               [16]  423 	push	de
      0000D2 21 02 01         [12]  424 	ld	hl, #0x102
      0000D5 E5               [16]  425 	push	hl
      0000D6 CDr00r00         [24]  426 	call	_set_bkg_data
      0000D9 E8 04            [16]  427 	add	sp, #4
                           0000DB   428 	C$main.c$151$1_0$150	= .
                                    429 	.globl	C$main.c$151$1_0$150
                                    430 ;main.c:151: set_bkg_data(3, 1, tile3);
      0000DB 11r2Br00         [12]  431 	ld	de, #_tile3
      0000DE D5               [16]  432 	push	de
      0000DF 21 03 01         [12]  433 	ld	hl, #0x103
      0000E2 E5               [16]  434 	push	hl
      0000E3 CDr00r00         [24]  435 	call	_set_bkg_data
      0000E6 E8 04            [16]  436 	add	sp, #4
                           0000E8   437 	C$main.c$152$1_0$150	= .
                                    438 	.globl	C$main.c$152$1_0$150
                                    439 ;main.c:152: set_bkg_tiles(0, 0, 20, 18, map);
      0000E8 11r3Br00         [12]  440 	ld	de, #_map
      0000EB D5               [16]  441 	push	de
      0000EC 21 14 12         [12]  442 	ld	hl, #0x1214
      0000EF E5               [16]  443 	push	hl
      0000F0 AF               [ 4]  444 	xor	a, a
      0000F1 0F               [ 4]  445 	rrca
      0000F2 F5               [16]  446 	push	af
      0000F3 CDr00r00         [24]  447 	call	_set_bkg_tiles
      0000F6 E8 06            [16]  448 	add	sp, #6
                           0000F8   449 	C$main.c$153$1_0$150	= .
                                    450 	.globl	C$main.c$153$1_0$150
                                    451 ;main.c:153: }
                           0000F8   452 	C$main.c$153$1_0$150	= .
                                    453 	.globl	C$main.c$153$1_0$150
                           0000F8   454 	XG$printbkg$0$0	= .
                                    455 	.globl	XG$printbkg$0$0
      0000F8 C9               [16]  456 	ret
                           0000F9   457 	G$printSquare$0$0	= .
                                    458 	.globl	G$printSquare$0$0
                           0000F9   459 	C$main.c$154$1_0$151	= .
                                    460 	.globl	C$main.c$154$1_0$151
                                    461 ;main.c:154: void printSquare() {
                                    462 ;	---------------------------------
                                    463 ; Function printSquare
                                    464 ; ---------------------------------
      0000F9                        465 _printSquare::
                           0000F9   466 	C$main.c$155$1_0$151	= .
                                    467 	.globl	C$main.c$155$1_0$151
                                    468 ;main.c:155: set_sprite_data(0, 1, squareTL);
      0000F9 11rA3r01         [12]  469 	ld	de, #_squareTL
      0000FC D5               [16]  470 	push	de
      0000FD AF               [ 4]  471 	xor	a, a
      0000FE 3C               [ 4]  472 	inc	a
      0000FF F5               [16]  473 	push	af
      000100 CDr00r00         [24]  474 	call	_set_sprite_data
      000103 E8 04            [16]  475 	add	sp, #4
                           000105   476 	C$main.c$156$1_0$151	= .
                                    477 	.globl	C$main.c$156$1_0$151
                                    478 ;main.c:156: set_sprite_data(1, 1, squareTR);
      000105 11rB3r01         [12]  479 	ld	de, #_squareTR
      000108 D5               [16]  480 	push	de
      000109 21 01 01         [12]  481 	ld	hl, #0x101
      00010C E5               [16]  482 	push	hl
      00010D CDr00r00         [24]  483 	call	_set_sprite_data
      000110 E8 04            [16]  484 	add	sp, #4
                           000112   485 	C$main.c$157$1_0$151	= .
                                    486 	.globl	C$main.c$157$1_0$151
                                    487 ;main.c:157: set_sprite_data(2, 1, squareBL);
      000112 11rC3r01         [12]  488 	ld	de, #_squareBL
      000115 D5               [16]  489 	push	de
      000116 21 02 01         [12]  490 	ld	hl, #0x102
      000119 E5               [16]  491 	push	hl
      00011A CDr00r00         [24]  492 	call	_set_sprite_data
      00011D E8 04            [16]  493 	add	sp, #4
                           00011F   494 	C$main.c$158$1_0$151	= .
                                    495 	.globl	C$main.c$158$1_0$151
                                    496 ;main.c:158: set_sprite_data(3, 1, squareBR);
      00011F 11rD3r01         [12]  497 	ld	de, #_squareBR
      000122 D5               [16]  498 	push	de
      000123 3E 01            [ 8]  499 	ld	a, #0x01
      000125 F5               [16]  500 	push	af
      000126 33               [ 8]  501 	inc	sp
      000127 3E 03            [ 8]  502 	ld	a, #0x03
      000129 F5               [16]  503 	push	af
      00012A 33               [ 8]  504 	inc	sp
      00012B CDr00r00         [24]  505 	call	_set_sprite_data
      00012E E8 04            [16]  506 	add	sp, #4
                                    507 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      000130 21r02r00         [12]  508 	ld	hl, #(_shadow_OAM + 2)
      000133 36 00            [12]  509 	ld	(hl), #0x00
      000135 21r06r00         [12]  510 	ld	hl, #(_shadow_OAM + 6)
      000138 36 01            [12]  511 	ld	(hl), #0x01
      00013A 21r0Ar00         [12]  512 	ld	hl, #(_shadow_OAM + 10)
      00013D 36 02            [12]  513 	ld	(hl), #0x02
      00013F 21r0Er00         [12]  514 	ld	hl, #(_shadow_OAM + 14)
      000142 36 03            [12]  515 	ld	(hl), #0x03
                           000144   516 	C$main.c$163$1_0$151	= .
                                    517 	.globl	C$main.c$163$1_0$151
                                    518 ;main.c:163: moveSquare();
                           000144   519 	C$main.c$164$1_0$151	= .
                                    520 	.globl	C$main.c$164$1_0$151
                                    521 ;main.c:164: }
                           000144   522 	C$main.c$164$1_0$151	= .
                                    523 	.globl	C$main.c$164$1_0$151
                           000144   524 	XG$printSquare$0$0	= .
                                    525 	.globl	XG$printSquare$0$0
      000144 C3r00r00         [16]  526 	jp	_moveSquare
                           000147   527 	G$printBlack$0$0	= .
                                    528 	.globl	G$printBlack$0$0
                           000147   529 	C$main.c$165$1_0$164	= .
                                    530 	.globl	C$main.c$165$1_0$164
                                    531 ;main.c:165: void printBlack() {
                                    532 ;	---------------------------------
                                    533 ; Function printBlack
                                    534 ; ---------------------------------
      000147                        535 _printBlack::
      000147 E8 FA            [16]  536 	add	sp, #-6
                           000149   537 	C$main.c$166$1_0$164	= .
                                    538 	.globl	C$main.c$166$1_0$164
                                    539 ;main.c:166: set_sprite_data(4, 12, black_piece);
      000149 11rE3r01         [12]  540 	ld	de, #_black_piece
      00014C D5               [16]  541 	push	de
      00014D 21 04 0C         [12]  542 	ld	hl, #0xc04
      000150 E5               [16]  543 	push	hl
      000151 CDr00r00         [24]  544 	call	_set_sprite_data
      000154 E8 04            [16]  545 	add	sp, #4
                           000156   546 	C$main.c$167$1_0$164	= .
                                    547 	.globl	C$main.c$167$1_0$164
                                    548 ;main.c:167: set_sprite_data(8, 12, blackKing);
      000156 11r23r02         [12]  549 	ld	de, #_blackKing
      000159 D5               [16]  550 	push	de
      00015A 21 08 0C         [12]  551 	ld	hl, #0xc08
      00015D E5               [16]  552 	push	hl
      00015E CDr00r00         [24]  553 	call	_set_sprite_data
      000161 E8 04            [16]  554 	add	sp, #4
                           000163   555 	C$main.c$169$3_0$166	= .
                                    556 	.globl	C$main.c$169$3_0$166
                                    557 ;main.c:169: for (int i = 0; i < 12; i++){
      000163 AF               [ 4]  558 	xor	a, a
      000164 F8 04            [12]  559 	ldhl	sp,	#4
      000166 22               [ 8]  560 	ld	(hl+), a
      000167 77               [ 8]  561 	ld	(hl), a
      000168                        562 00109$:
      000168 F8 04            [12]  563 	ldhl	sp,	#4
      00016A 2A               [ 8]  564 	ld	a, (hl+)
      00016B D6 0C            [ 8]  565 	sub	a, #0x0c
      00016D 7E               [ 8]  566 	ld	a, (hl)
      00016E DE 00            [ 8]  567 	sbc	a, #0x00
      000170 56               [ 8]  568 	ld	d, (hl)
      000171 3E 00            [ 8]  569 	ld	a, #0x00
      000173 CB 7F            [ 8]  570 	bit	7,a
      000175 28 07            [12]  571 	jr	Z, 00129$
      000177 CB 7A            [ 8]  572 	bit	7, d
      000179 20 08            [12]  573 	jr	NZ, 00130$
      00017B BF               [ 4]  574 	cp	a, a
      00017C 18 05            [12]  575 	jr	00130$
      00017E                        576 00129$:
      00017E CB 7A            [ 8]  577 	bit	7, d
      000180 28 01            [12]  578 	jr	Z, 00130$
      000182 37               [ 4]  579 	scf
      000183                        580 00130$:
      000183 D2r39r02         [16]  581 	jp	NC, 00111$
                           000186   582 	C$main.c$170$3_0$166	= .
                                    583 	.globl	C$main.c$170$3_0$166
                                    584 ;main.c:170: if (blackPieces[i].isKing) {
      000186 F8 04            [12]  585 	ldhl	sp,#4
      000188 2A               [ 8]  586 	ld	a, (hl+)
      000189 4F               [ 4]  587 	ld	c, a
      00018A 46               [ 8]  588 	ld	b, (hl)
      00018B 69               [ 4]  589 	ld	l, c
      00018C 60               [ 4]  590 	ld	h, b
      00018D 29               [ 8]  591 	add	hl, hl
      00018E 09               [ 8]  592 	add	hl, bc
      00018F 11r43r02         [12]  593 	ld	de, #_blackPieces
      000192 19               [ 8]  594 	add	hl, de
      000193 23               [ 8]  595 	inc	hl
      000194 23               [ 8]  596 	inc	hl
      000195 7E               [ 8]  597 	ld	a, (hl)
      000196 F8 02            [12]  598 	ldhl	sp,	#2
      000198 77               [ 8]  599 	ld	(hl), a
                           000199   600 	C$main.c$171$2_0$164	= .
                                    601 	.globl	C$main.c$171$2_0$164
                                    602 ;main.c:171: set_sprite_tile(i + 4, 8); // Use the black king sprite tile
      000199 F8 04            [12]  603 	ldhl	sp,	#4
      00019B 3A               [ 8]  604 	ld	a, (hl-)
      00019C C6 04            [ 8]  605 	add	a, #0x04
                           00019E   606 	C$main.c$170$3_0$166	= .
                                    607 	.globl	C$main.c$170$3_0$166
                                    608 ;main.c:170: if (blackPieces[i].isKing) {
      00019E 32               [ 8]  609 	ld	(hl-), a
      00019F CB 46            [12]  610 	bit	0, (hl)
      0001A1 28 33            [12]  611 	jr	Z, 00102$
                                    612 ;main.c:171: set_sprite_tile(i + 4, 8); // Use the black king sprite tile
                                    613 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      0001A3 23               [ 8]  614 	inc	hl
      0001A4 3A               [ 8]  615 	ld	a, (hl-)
      0001A5 22               [ 8]  616 	ld	(hl+), a
      0001A6 36 00            [12]  617 	ld	(hl), #0x00
      0001A8 3E 02            [ 8]  618 	ld	a, #0x02
      0001AA                        619 00131$:
      0001AA F8 02            [12]  620 	ldhl	sp,	#2
      0001AC CB 26            [16]  621 	sla	(hl)
      0001AE 23               [ 8]  622 	inc	hl
      0001AF CB 16            [16]  623 	rl	(hl)
      0001B1 3D               [ 4]  624 	dec	a
      0001B2 20 F6            [12]  625 	jr	NZ, 00131$
      0001B4 2B               [ 8]  626 	dec	hl
      0001B5 2A               [ 8]  627 	ld	a, (hl+)
      0001B6 5F               [ 4]  628 	ld	e, a
      0001B7 56               [ 8]  629 	ld	d, (hl)
      0001B8 21r00r00         [12]  630 	ld	hl, #_shadow_OAM
      0001BB 19               [ 8]  631 	add	hl, de
      0001BC 33               [ 8]  632 	inc	sp
      0001BD 33               [ 8]  633 	inc	sp
      0001BE 5D               [ 4]  634 	ld	e, l
      0001BF 54               [ 4]  635 	ld	d, h
      0001C0 D5               [16]  636 	push	de
      0001C1 21 02 00         [12]  637 	ld	hl, #0x0002
      0001C4 19               [ 8]  638 	add	hl, de
      0001C5 E5               [16]  639 	push	hl
      0001C6 7D               [ 4]  640 	ld	a, l
      0001C7 F8 04            [12]  641 	ldhl	sp,	#4
      0001C9 77               [ 8]  642 	ld	(hl), a
      0001CA E1               [12]  643 	pop	hl
      0001CB 7C               [ 4]  644 	ld	a, h
      0001CC F8 03            [12]  645 	ldhl	sp,	#3
      0001CE 32               [ 8]  646 	ld	(hl-), a
      0001CF 2A               [ 8]  647 	ld	a,	(hl+)
      0001D0 66               [ 8]  648 	ld	h, (hl)
      0001D1 6F               [ 4]  649 	ld	l, a
      0001D2 36 08            [12]  650 	ld	(hl), #0x08
                           0001D4   651 	C$main.c$171$3_0$166	= .
                                    652 	.globl	C$main.c$171$3_0$166
                                    653 ;main.c:171: set_sprite_tile(i + 4, 8); // Use the black king sprite tile
      0001D4 18 32            [12]  654 	jr	00103$
      0001D6                        655 00102$:
                                    656 ;main.c:173: set_sprite_tile(i + 4, 4); // Use the black regular piece sprite tile
                                    657 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      0001D6 F8 03            [12]  658 	ldhl	sp,	#3
      0001D8 3A               [ 8]  659 	ld	a, (hl-)
      0001D9 22               [ 8]  660 	ld	(hl+), a
      0001DA 36 00            [12]  661 	ld	(hl), #0x00
      0001DC 3E 02            [ 8]  662 	ld	a, #0x02
      0001DE                        663 00132$:
      0001DE F8 02            [12]  664 	ldhl	sp,	#2
      0001E0 CB 26            [16]  665 	sla	(hl)
      0001E2 23               [ 8]  666 	inc	hl
      0001E3 CB 16            [16]  667 	rl	(hl)
      0001E5 3D               [ 4]  668 	dec	a
      0001E6 20 F6            [12]  669 	jr	NZ, 00132$
      0001E8 2B               [ 8]  670 	dec	hl
      0001E9 2A               [ 8]  671 	ld	a, (hl+)
      0001EA 5F               [ 4]  672 	ld	e, a
      0001EB 56               [ 8]  673 	ld	d, (hl)
      0001EC 21r00r00         [12]  674 	ld	hl, #_shadow_OAM
      0001EF 19               [ 8]  675 	add	hl, de
      0001F0 33               [ 8]  676 	inc	sp
      0001F1 33               [ 8]  677 	inc	sp
      0001F2 5D               [ 4]  678 	ld	e, l
      0001F3 54               [ 4]  679 	ld	d, h
      0001F4 D5               [16]  680 	push	de
      0001F5 21 02 00         [12]  681 	ld	hl, #0x0002
      0001F8 19               [ 8]  682 	add	hl, de
      0001F9 E5               [16]  683 	push	hl
      0001FA 7D               [ 4]  684 	ld	a, l
      0001FB F8 04            [12]  685 	ldhl	sp,	#4
      0001FD 77               [ 8]  686 	ld	(hl), a
      0001FE E1               [12]  687 	pop	hl
      0001FF 7C               [ 4]  688 	ld	a, h
      000200 F8 03            [12]  689 	ldhl	sp,	#3
      000202 32               [ 8]  690 	ld	(hl-), a
      000203 2A               [ 8]  691 	ld	a,	(hl+)
      000204 66               [ 8]  692 	ld	h, (hl)
      000205 6F               [ 4]  693 	ld	l, a
      000206 36 04            [12]  694 	ld	(hl), #0x04
                           000208   695 	C$main.c$173$3_0$166	= .
                                    696 	.globl	C$main.c$173$3_0$166
                                    697 ;main.c:173: set_sprite_tile(i + 4, 4); // Use the black regular piece sprite tile
      000208                        698 00103$:
                                    699 ;main.c:175: move_sprite(i + 4, blackPieces[i].x, blackPieces[i].y);
      000208 F8 04            [12]  700 	ldhl	sp,#4
      00020A 2A               [ 8]  701 	ld	a, (hl+)
      00020B 4F               [ 4]  702 	ld	c, a
      00020C 46               [ 8]  703 	ld	b, (hl)
      00020D 69               [ 4]  704 	ld	l, c
      00020E 60               [ 4]  705 	ld	h, b
      00020F 29               [ 8]  706 	add	hl, hl
      000210 09               [ 8]  707 	add	hl, bc
      000211 11r43r02         [12]  708 	ld	de, #_blackPieces
      000214 19               [ 8]  709 	add	hl, de
      000215 4D               [ 4]  710 	ld	c, l
      000216 44               [ 4]  711 	ld	b, h
      000217 03               [ 8]  712 	inc	bc
      000218 0A               [ 8]  713 	ld	a, (bc)
      000219 5F               [ 4]  714 	ld	e, a
      00021A 4E               [ 8]  715 	ld	c, (hl)
      00021B F8 04            [12]  716 	ldhl	sp,	#4
      00021D 7E               [ 8]  717 	ld	a, (hl)
      00021E C6 04            [ 8]  718 	add	a, #0x04
                                    719 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      000220 6F               [ 4]  720 	ld	l, a
                                    721 ;	spillPairReg hl
                                    722 ;	spillPairReg hl
      000221 26 00            [ 8]  723 	ld	h, #0x00
                                    724 ;	spillPairReg hl
                                    725 ;	spillPairReg hl
      000223 29               [ 8]  726 	add	hl, hl
      000224 29               [ 8]  727 	add	hl, hl
      000225 D5               [16]  728 	push	de
      000226 11r00r00         [12]  729 	ld	de, #_shadow_OAM
      000229 19               [ 8]  730 	add	hl, de
      00022A D1               [12]  731 	pop	de
                                    732 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      00022B 7B               [ 4]  733 	ld	a, e
      00022C 22               [ 8]  734 	ld	(hl+), a
      00022D 71               [ 8]  735 	ld	(hl), c
                           00022E   736 	C$main.c$169$2_0$165	= .
                                    737 	.globl	C$main.c$169$2_0$165
                                    738 ;main.c:169: for (int i = 0; i < 12; i++){
      00022E F8 04            [12]  739 	ldhl	sp,	#4
      000230 34               [12]  740 	inc	(hl)
      000231 C2r68r01         [16]  741 	jp	NZ,00109$
      000234 23               [ 8]  742 	inc	hl
      000235 34               [12]  743 	inc	(hl)
      000236 C3r68r01         [16]  744 	jp	00109$
      000239                        745 00111$:
                           000239   746 	C$main.c$177$2_0$164	= .
                                    747 	.globl	C$main.c$177$2_0$164
                                    748 ;main.c:177: }
      000239 E8 06            [16]  749 	add	sp, #6
                           00023B   750 	C$main.c$177$2_0$164	= .
                                    751 	.globl	C$main.c$177$2_0$164
                           00023B   752 	XG$printBlack$0$0	= .
                                    753 	.globl	XG$printBlack$0$0
      00023B C9               [16]  754 	ret
                           00023C   755 	G$printWhite$0$0	= .
                                    756 	.globl	G$printWhite$0$0
                           00023C   757 	C$main.c$178$2_0$178	= .
                                    758 	.globl	C$main.c$178$2_0$178
                                    759 ;main.c:178: void printWhite() {
                                    760 ;	---------------------------------
                                    761 ; Function printWhite
                                    762 ; ---------------------------------
      00023C                        763 _printWhite::
      00023C E8 FA            [16]  764 	add	sp, #-6
                           00023E   765 	C$main.c$179$1_0$178	= .
                                    766 	.globl	C$main.c$179$1_0$178
                                    767 ;main.c:179: set_sprite_data(5, 12, white_piece);
      00023E 11rF3r01         [12]  768 	ld	de, #_white_piece
      000241 D5               [16]  769 	push	de
      000242 21 05 0C         [12]  770 	ld	hl, #0xc05
      000245 E5               [16]  771 	push	hl
      000246 CDr00r00         [24]  772 	call	_set_sprite_data
      000249 E8 04            [16]  773 	add	sp, #4
                           00024B   774 	C$main.c$180$1_0$178	= .
                                    775 	.globl	C$main.c$180$1_0$178
                                    776 ;main.c:180: set_sprite_data(20, 12, whiteKing);
      00024B 11r33r02         [12]  777 	ld	de, #_whiteKing
      00024E D5               [16]  778 	push	de
      00024F 21 14 0C         [12]  779 	ld	hl, #0xc14
      000252 E5               [16]  780 	push	hl
      000253 CDr00r00         [24]  781 	call	_set_sprite_data
      000256 E8 04            [16]  782 	add	sp, #4
                           000258   783 	C$main.c$182$3_0$180	= .
                                    784 	.globl	C$main.c$182$3_0$180
                                    785 ;main.c:182: for (int i = 0; i < 12; i++){
      000258 AF               [ 4]  786 	xor	a, a
      000259 F8 04            [12]  787 	ldhl	sp,	#4
      00025B 22               [ 8]  788 	ld	(hl+), a
      00025C 77               [ 8]  789 	ld	(hl), a
      00025D                        790 00109$:
      00025D F8 04            [12]  791 	ldhl	sp,	#4
      00025F 2A               [ 8]  792 	ld	a, (hl+)
      000260 D6 0C            [ 8]  793 	sub	a, #0x0c
      000262 7E               [ 8]  794 	ld	a, (hl)
      000263 DE 00            [ 8]  795 	sbc	a, #0x00
      000265 56               [ 8]  796 	ld	d, (hl)
      000266 3E 00            [ 8]  797 	ld	a, #0x00
      000268 CB 7F            [ 8]  798 	bit	7,a
      00026A 28 07            [12]  799 	jr	Z, 00129$
      00026C CB 7A            [ 8]  800 	bit	7, d
      00026E 20 08            [12]  801 	jr	NZ, 00130$
      000270 BF               [ 4]  802 	cp	a, a
      000271 18 05            [12]  803 	jr	00130$
      000273                        804 00129$:
      000273 CB 7A            [ 8]  805 	bit	7, d
      000275 28 01            [12]  806 	jr	Z, 00130$
      000277 37               [ 4]  807 	scf
      000278                        808 00130$:
      000278 D2r2Er03         [16]  809 	jp	NC, 00111$
                           00027B   810 	C$main.c$183$3_0$180	= .
                                    811 	.globl	C$main.c$183$3_0$180
                                    812 ;main.c:183: if (whitePieces[i].isKing) {
      00027B F8 04            [12]  813 	ldhl	sp,#4
      00027D 2A               [ 8]  814 	ld	a, (hl+)
      00027E 4F               [ 4]  815 	ld	c, a
      00027F 46               [ 8]  816 	ld	b, (hl)
      000280 69               [ 4]  817 	ld	l, c
      000281 60               [ 4]  818 	ld	h, b
      000282 29               [ 8]  819 	add	hl, hl
      000283 09               [ 8]  820 	add	hl, bc
      000284 11r67r02         [12]  821 	ld	de, #_whitePieces
      000287 19               [ 8]  822 	add	hl, de
      000288 23               [ 8]  823 	inc	hl
      000289 23               [ 8]  824 	inc	hl
      00028A 7E               [ 8]  825 	ld	a, (hl)
      00028B F8 02            [12]  826 	ldhl	sp,	#2
      00028D 77               [ 8]  827 	ld	(hl), a
                           00028E   828 	C$main.c$184$2_0$178	= .
                                    829 	.globl	C$main.c$184$2_0$178
                                    830 ;main.c:184: set_sprite_tile(i + 16, 20); // Use the white king sprite tile
      00028E F8 04            [12]  831 	ldhl	sp,	#4
      000290 3A               [ 8]  832 	ld	a, (hl-)
      000291 C6 10            [ 8]  833 	add	a, #0x10
                           000293   834 	C$main.c$183$3_0$180	= .
                                    835 	.globl	C$main.c$183$3_0$180
                                    836 ;main.c:183: if (whitePieces[i].isKing) {
      000293 32               [ 8]  837 	ld	(hl-), a
      000294 CB 46            [12]  838 	bit	0, (hl)
      000296 28 33            [12]  839 	jr	Z, 00102$
                                    840 ;main.c:184: set_sprite_tile(i + 16, 20); // Use the white king sprite tile
                                    841 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      000298 23               [ 8]  842 	inc	hl
      000299 3A               [ 8]  843 	ld	a, (hl-)
      00029A 22               [ 8]  844 	ld	(hl+), a
      00029B 36 00            [12]  845 	ld	(hl), #0x00
      00029D 3E 02            [ 8]  846 	ld	a, #0x02
      00029F                        847 00131$:
      00029F F8 02            [12]  848 	ldhl	sp,	#2
      0002A1 CB 26            [16]  849 	sla	(hl)
      0002A3 23               [ 8]  850 	inc	hl
      0002A4 CB 16            [16]  851 	rl	(hl)
      0002A6 3D               [ 4]  852 	dec	a
      0002A7 20 F6            [12]  853 	jr	NZ, 00131$
      0002A9 2B               [ 8]  854 	dec	hl
      0002AA 2A               [ 8]  855 	ld	a, (hl+)
      0002AB 5F               [ 4]  856 	ld	e, a
      0002AC 56               [ 8]  857 	ld	d, (hl)
      0002AD 21r00r00         [12]  858 	ld	hl, #_shadow_OAM
      0002B0 19               [ 8]  859 	add	hl, de
      0002B1 33               [ 8]  860 	inc	sp
      0002B2 33               [ 8]  861 	inc	sp
      0002B3 5D               [ 4]  862 	ld	e, l
      0002B4 54               [ 4]  863 	ld	d, h
      0002B5 D5               [16]  864 	push	de
      0002B6 21 02 00         [12]  865 	ld	hl, #0x0002
      0002B9 19               [ 8]  866 	add	hl, de
      0002BA E5               [16]  867 	push	hl
      0002BB 7D               [ 4]  868 	ld	a, l
      0002BC F8 04            [12]  869 	ldhl	sp,	#4
      0002BE 77               [ 8]  870 	ld	(hl), a
      0002BF E1               [12]  871 	pop	hl
      0002C0 7C               [ 4]  872 	ld	a, h
      0002C1 F8 03            [12]  873 	ldhl	sp,	#3
      0002C3 32               [ 8]  874 	ld	(hl-), a
      0002C4 2A               [ 8]  875 	ld	a,	(hl+)
      0002C5 66               [ 8]  876 	ld	h, (hl)
      0002C6 6F               [ 4]  877 	ld	l, a
      0002C7 36 14            [12]  878 	ld	(hl), #0x14
                           0002C9   879 	C$main.c$184$3_0$180	= .
                                    880 	.globl	C$main.c$184$3_0$180
                                    881 ;main.c:184: set_sprite_tile(i + 16, 20); // Use the white king sprite tile
      0002C9 18 32            [12]  882 	jr	00103$
      0002CB                        883 00102$:
                                    884 ;main.c:186: set_sprite_tile(i + 16, 5); // Use the white regular piece sprite tile
                                    885 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      0002CB F8 03            [12]  886 	ldhl	sp,	#3
      0002CD 3A               [ 8]  887 	ld	a, (hl-)
      0002CE 22               [ 8]  888 	ld	(hl+), a
      0002CF 36 00            [12]  889 	ld	(hl), #0x00
      0002D1 3E 02            [ 8]  890 	ld	a, #0x02
      0002D3                        891 00132$:
      0002D3 F8 02            [12]  892 	ldhl	sp,	#2
      0002D5 CB 26            [16]  893 	sla	(hl)
      0002D7 23               [ 8]  894 	inc	hl
      0002D8 CB 16            [16]  895 	rl	(hl)
      0002DA 3D               [ 4]  896 	dec	a
      0002DB 20 F6            [12]  897 	jr	NZ, 00132$
      0002DD 2B               [ 8]  898 	dec	hl
      0002DE 2A               [ 8]  899 	ld	a, (hl+)
      0002DF 5F               [ 4]  900 	ld	e, a
      0002E0 56               [ 8]  901 	ld	d, (hl)
      0002E1 21r00r00         [12]  902 	ld	hl, #_shadow_OAM
      0002E4 19               [ 8]  903 	add	hl, de
      0002E5 33               [ 8]  904 	inc	sp
      0002E6 33               [ 8]  905 	inc	sp
      0002E7 5D               [ 4]  906 	ld	e, l
      0002E8 54               [ 4]  907 	ld	d, h
      0002E9 D5               [16]  908 	push	de
      0002EA 21 02 00         [12]  909 	ld	hl, #0x0002
      0002ED 19               [ 8]  910 	add	hl, de
      0002EE E5               [16]  911 	push	hl
      0002EF 7D               [ 4]  912 	ld	a, l
      0002F0 F8 04            [12]  913 	ldhl	sp,	#4
      0002F2 77               [ 8]  914 	ld	(hl), a
      0002F3 E1               [12]  915 	pop	hl
      0002F4 7C               [ 4]  916 	ld	a, h
      0002F5 F8 03            [12]  917 	ldhl	sp,	#3
      0002F7 32               [ 8]  918 	ld	(hl-), a
      0002F8 2A               [ 8]  919 	ld	a,	(hl+)
      0002F9 66               [ 8]  920 	ld	h, (hl)
      0002FA 6F               [ 4]  921 	ld	l, a
      0002FB 36 05            [12]  922 	ld	(hl), #0x05
                           0002FD   923 	C$main.c$186$3_0$180	= .
                                    924 	.globl	C$main.c$186$3_0$180
                                    925 ;main.c:186: set_sprite_tile(i + 16, 5); // Use the white regular piece sprite tile
      0002FD                        926 00103$:
                                    927 ;main.c:188: move_sprite(i + 16, whitePieces[i].x, whitePieces[i].y);
      0002FD F8 04            [12]  928 	ldhl	sp,#4
      0002FF 2A               [ 8]  929 	ld	a, (hl+)
      000300 4F               [ 4]  930 	ld	c, a
      000301 46               [ 8]  931 	ld	b, (hl)
      000302 69               [ 4]  932 	ld	l, c
      000303 60               [ 4]  933 	ld	h, b
      000304 29               [ 8]  934 	add	hl, hl
      000305 09               [ 8]  935 	add	hl, bc
      000306 11r67r02         [12]  936 	ld	de, #_whitePieces
      000309 19               [ 8]  937 	add	hl, de
      00030A 4D               [ 4]  938 	ld	c, l
      00030B 44               [ 4]  939 	ld	b, h
      00030C 03               [ 8]  940 	inc	bc
      00030D 0A               [ 8]  941 	ld	a, (bc)
      00030E 5F               [ 4]  942 	ld	e, a
      00030F 4E               [ 8]  943 	ld	c, (hl)
      000310 F8 04            [12]  944 	ldhl	sp,	#4
      000312 7E               [ 8]  945 	ld	a, (hl)
      000313 C6 10            [ 8]  946 	add	a, #0x10
                                    947 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      000315 6F               [ 4]  948 	ld	l, a
                                    949 ;	spillPairReg hl
                                    950 ;	spillPairReg hl
      000316 26 00            [ 8]  951 	ld	h, #0x00
                                    952 ;	spillPairReg hl
                                    953 ;	spillPairReg hl
      000318 29               [ 8]  954 	add	hl, hl
      000319 29               [ 8]  955 	add	hl, hl
      00031A D5               [16]  956 	push	de
      00031B 11r00r00         [12]  957 	ld	de, #_shadow_OAM
      00031E 19               [ 8]  958 	add	hl, de
      00031F D1               [12]  959 	pop	de
                                    960 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      000320 7B               [ 4]  961 	ld	a, e
      000321 22               [ 8]  962 	ld	(hl+), a
      000322 71               [ 8]  963 	ld	(hl), c
                           000323   964 	C$main.c$182$2_0$179	= .
                                    965 	.globl	C$main.c$182$2_0$179
                                    966 ;main.c:182: for (int i = 0; i < 12; i++){
      000323 F8 04            [12]  967 	ldhl	sp,	#4
      000325 34               [12]  968 	inc	(hl)
      000326 C2r5Dr02         [16]  969 	jp	NZ,00109$
      000329 23               [ 8]  970 	inc	hl
      00032A 34               [12]  971 	inc	(hl)
      00032B C3r5Dr02         [16]  972 	jp	00109$
      00032E                        973 00111$:
                           00032E   974 	C$main.c$190$2_0$178	= .
                                    975 	.globl	C$main.c$190$2_0$178
                                    976 ;main.c:190: }
      00032E E8 06            [16]  977 	add	sp, #6
                           000330   978 	C$main.c$190$2_0$178	= .
                                    979 	.globl	C$main.c$190$2_0$178
                           000330   980 	XG$printWhite$0$0	= .
                                    981 	.globl	XG$printWhite$0$0
      000330 C9               [16]  982 	ret
                           000331   983 	G$modifyCoordinates$0$0	= .
                                    984 	.globl	G$modifyCoordinates$0$0
                           000331   985 	C$main.c$191$2_0$193	= .
                                    986 	.globl	C$main.c$191$2_0$193
                                    987 ;main.c:191: void modifyCoordinates(Piece input[], int selectedCoords, int newX, int newY) {
                                    988 ;	---------------------------------
                                    989 ; Function modifyCoordinates
                                    990 ; ---------------------------------
      000331                        991 _modifyCoordinates::
      000331 D5               [16]  992 	push	de
                           000332   993 	C$main.c$193$1_0$193	= .
                                    994 	.globl	C$main.c$193$1_0$193
                                    995 ;main.c:193: if (selectedCoords >= 0) {
      000332 CB 78            [ 8]  996 	bit	7, b
      000334 20 56            [12]  997 	jr	NZ, 00113$
                           000336   998 	C$main.c$195$2_0$194	= .
                                    999 	.globl	C$main.c$195$2_0$194
                                   1000 ;main.c:195: input[selectedCoords].x = newX;
      000336 69               [ 4] 1001 	ld	l, c
      000337 60               [ 4] 1002 	ld	h, b
      000338 29               [ 8] 1003 	add	hl, hl
      000339 09               [ 8] 1004 	add	hl, bc
      00033A 4D               [ 4] 1005 	ld	c, l
      00033B 44               [ 4] 1006 	ld	b, h
      00033C E1               [12] 1007 	pop	hl
      00033D E5               [16] 1008 	push	hl
      00033E 09               [ 8] 1009 	add	hl, bc
      00033F 4D               [ 4] 1010 	ld	c, l
      000340 44               [ 4] 1011 	ld	b, h
      000341 F8 04            [12] 1012 	ldhl	sp,	#4
                           000343  1013 	C$main.c$196$2_0$194	= .
                                   1014 	.globl	C$main.c$196$2_0$194
                                   1015 ;main.c:196: input[selectedCoords].y = newY;
      000343 2A               [ 8] 1016 	ld	a, (hl+)
      000344 23               [ 8] 1017 	inc	hl
      000345 02               [ 8] 1018 	ld	(bc), a
      000346 59               [ 4] 1019 	ld	e, c
      000347 50               [ 4] 1020 	ld	d, b
      000348 13               [ 8] 1021 	inc	de
      000349 7E               [ 8] 1022 	ld	a, (hl)
      00034A 12               [ 8] 1023 	ld	(de), a
                           00034B  1024 	C$main.c$198$2_0$194	= .
                                   1025 	.globl	C$main.c$198$2_0$194
                                   1026 ;main.c:198: if (currentPlayer == WHITE_PLAYER && input[selectedCoords].y == 28 ||
      00034B FAr07r00         [16] 1027 	ld	a, (#_currentPlayer)
      00034E 3D               [ 4] 1028 	dec	a
      00034F 20 05            [12] 1029 	jr	NZ, 00108$
      000351 1A               [ 8] 1030 	ld	a, (de)
      000352 D6 1C            [ 8] 1031 	sub	a, #0x1c
      000354 28 0B            [12] 1032 	jr	Z, 00104$
      000356                       1033 00108$:
                           000356  1034 	C$main.c$199$2_0$194	= .
                                   1035 	.globl	C$main.c$199$2_0$194
                                   1036 ;main.c:199: currentPlayer == BLACK_PLAYER && input[selectedCoords].y == 140) {
      000356 FAr07r00         [16] 1037 	ld	a, (#_currentPlayer)
      000359 B7               [ 4] 1038 	or	a, a
      00035A 20 30            [12] 1039 	jr	NZ, 00113$
      00035C 1A               [ 8] 1040 	ld	a, (de)
      00035D D6 8C            [ 8] 1041 	sub	a, #0x8c
      00035F 20 2B            [12] 1042 	jr	NZ, 00113$
      000361                       1043 00104$:
                           000361  1044 	C$main.c$200$3_0$195	= .
                                   1045 	.globl	C$main.c$200$3_0$195
                                   1046 ;main.c:200: input[selectedCoords].isKing = true;
      000361 03               [ 8] 1047 	inc	bc
      000362 03               [ 8] 1048 	inc	bc
      000363 3E 01            [ 8] 1049 	ld	a, #0x01
      000365 02               [ 8] 1050 	ld	(bc), a
                           000366  1051 	C$main.c$203$1_0$193	= .
                                   1052 	.globl	C$main.c$203$1_0$193
                                   1053 ;main.c:203: set_sprite_tile(selectedPieceIndex, 8); // Use the black king sprite tile
      000366 21r03r00         [12] 1054 	ld	hl, #_selectedPieceIndex
      000369 5E               [ 8] 1055 	ld	e, (hl)
                           00036A  1056 	C$main.c$202$3_0$195	= .
                                   1057 	.globl	C$main.c$202$3_0$195
                                   1058 ;main.c:202: if (currentPlayer == BLACK_PLAYER) {
      00036A FAr07r00         [16] 1059 	ld	a, (#_currentPlayer)
      00036D B7               [ 4] 1060 	or	a, a
      00036E 20 0F            [12] 1061 	jr	NZ, 00102$
                                   1062 ;main.c:203: set_sprite_tile(selectedPieceIndex, 8); // Use the black king sprite tile
                                   1063 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      000370 01r00r00         [12] 1064 	ld	bc, #_shadow_OAM+0
      000373 6B               [ 4] 1065 	ld	l, e
                                   1066 ;	spillPairReg hl
                                   1067 ;	spillPairReg hl
      000374 26 00            [ 8] 1068 	ld	h, #0x00
                                   1069 ;	spillPairReg hl
                                   1070 ;	spillPairReg hl
      000376 29               [ 8] 1071 	add	hl, hl
      000377 29               [ 8] 1072 	add	hl, hl
      000378 09               [ 8] 1073 	add	hl, bc
      000379 23               [ 8] 1074 	inc	hl
      00037A 23               [ 8] 1075 	inc	hl
      00037B 36 08            [12] 1076 	ld	(hl), #0x08
                           00037D  1077 	C$main.c$203$3_0$195	= .
                                   1078 	.globl	C$main.c$203$3_0$195
                                   1079 ;main.c:203: set_sprite_tile(selectedPieceIndex, 8); // Use the black king sprite tile
      00037D 18 0D            [12] 1080 	jr	00113$
      00037F                       1081 00102$:
                                   1082 ;main.c:205: set_sprite_tile(selectedPieceIndex, 20); // Use the white king sprite tile
                                   1083 ;c:/gbdk/include/gb/gb.h:1602: shadow_OAM[nb].tile=tile;
      00037F 01r00r00         [12] 1084 	ld	bc, #_shadow_OAM+0
      000382 6B               [ 4] 1085 	ld	l, e
                                   1086 ;	spillPairReg hl
                                   1087 ;	spillPairReg hl
      000383 26 00            [ 8] 1088 	ld	h, #0x00
                                   1089 ;	spillPairReg hl
                                   1090 ;	spillPairReg hl
      000385 29               [ 8] 1091 	add	hl, hl
      000386 29               [ 8] 1092 	add	hl, hl
      000387 09               [ 8] 1093 	add	hl, bc
      000388 23               [ 8] 1094 	inc	hl
      000389 23               [ 8] 1095 	inc	hl
      00038A 36 14            [12] 1096 	ld	(hl), #0x14
                           00038C  1097 	C$main.c$205$1_0$193	= .
                                   1098 	.globl	C$main.c$205$1_0$193
                                   1099 ;main.c:205: set_sprite_tile(selectedPieceIndex, 20); // Use the white king sprite tile
      00038C                       1100 00113$:
                           00038C  1101 	C$main.c$209$1_0$193	= .
                                   1102 	.globl	C$main.c$209$1_0$193
                                   1103 ;main.c:209: }
      00038C 33               [ 8] 1104 	inc	sp
      00038D 33               [ 8] 1105 	inc	sp
      00038E E1               [12] 1106 	pop	hl
      00038F E8 04            [16] 1107 	add	sp, #4
      000391 E9               [ 4] 1108 	jp	(hl)
                           000392  1109 	G$isMoveWithinBoard$0$0	= .
                                   1110 	.globl	G$isMoveWithinBoard$0$0
                           000392  1111 	C$main.c$210$1_0$205	= .
                                   1112 	.globl	C$main.c$210$1_0$205
                                   1113 ;main.c:210: bool isMoveWithinBoard(UINT8 x, UINT8 y) {
                                   1114 ;	---------------------------------
                                   1115 ; Function isMoveWithinBoard
                                   1116 ; ---------------------------------
      000392                       1117 _isMoveWithinBoard::
                           000392  1118 	C$main.c$211$1_0$205	= .
                                   1119 	.globl	C$main.c$211$1_0$205
                                   1120 ;main.c:211: return (x >= 20 && x <=140 && y >= 20 && y <= 140);
      000392 4F               [ 4] 1121 	ld	c, a
      000393 D6 14            [ 8] 1122 	sub	a, #0x14
      000395 38 0F            [12] 1123 	jr	C, 00103$
      000397 3E 8C            [ 8] 1124 	ld	a, #0x8c
      000399 91               [ 4] 1125 	sub	a, c
      00039A 38 0A            [12] 1126 	jr	C, 00103$
      00039C 7B               [ 4] 1127 	ld	a, e
      00039D D6 14            [ 8] 1128 	sub	a, #0x14
      00039F 38 05            [12] 1129 	jr	C, 00103$
      0003A1 3E 8C            [ 8] 1130 	ld	a, #0x8c
      0003A3 93               [ 4] 1131 	sub	a, e
      0003A4 30 02            [12] 1132 	jr	NC, 00104$
      0003A6                       1133 00103$:
      0003A6 AF               [ 4] 1134 	xor	a, a
      0003A7 C9               [16] 1135 	ret
      0003A8                       1136 00104$:
      0003A8 3E 01            [ 8] 1137 	ld	a, #0x01
                           0003AA  1138 	C$main.c$212$1_0$205	= .
                                   1139 	.globl	C$main.c$212$1_0$205
                                   1140 ;main.c:212: }
                           0003AA  1141 	C$main.c$212$1_0$205	= .
                                   1142 	.globl	C$main.c$212$1_0$205
                           0003AA  1143 	XG$isMoveWithinBoard$0$0	= .
                                   1144 	.globl	XG$isMoveWithinBoard$0$0
      0003AA C9               [16] 1145 	ret
                           0003AB  1146 	G$checkCapture$0$0	= .
                                   1147 	.globl	G$checkCapture$0$0
                           0003AB  1148 	C$main.c$213$1_0$207	= .
                                   1149 	.globl	C$main.c$213$1_0$207
                                   1150 ;main.c:213: bool checkCapture(UINT8 capturedX, UINT8 capturedY, Piece* opponentPieces) {
                                   1151 ;	---------------------------------
                                   1152 ; Function checkCapture
                                   1153 ; ---------------------------------
      0003AB                       1154 _checkCapture::
      0003AB E8 F4            [16] 1155 	add	sp, #-12
      0003AD F8 0B            [12] 1156 	ldhl	sp,	#11
      0003AF 32               [ 8] 1157 	ld	(hl-), a
      0003B0 73               [ 8] 1158 	ld	(hl), e
                           0003B1  1159 	C$main.c$216$1_0$207	= .
                                   1160 	.globl	C$main.c$216$1_0$207
                                   1161 ;main.c:216: for (int i = 0; i < 12; i++) {
      0003B1 01 00 00         [12] 1162 	ld	bc, #0x0000
      0003B4                       1163 00108$:
      0003B4 79               [ 4] 1164 	ld	a, c
      0003B5 D6 0C            [ 8] 1165 	sub	a, #0x0c
      0003B7 78               [ 4] 1166 	ld	a, b
      0003B8 17               [ 4] 1167 	rla
      0003B9 3F               [ 4] 1168 	ccf
      0003BA 1F               [ 4] 1169 	rra
      0003BB DE 80            [ 8] 1170 	sbc	a, #0x80
      0003BD D2r56r04         [16] 1171 	jp	NC, 00106$
                           0003C0  1172 	C$main.c$217$3_0$209	= .
                                   1173 	.globl	C$main.c$217$3_0$209
                                   1174 ;main.c:217: UINT8 pieceX = opponentPieces[i].x;
      0003C0 69               [ 4] 1175 	ld	l, c
      0003C1 60               [ 4] 1176 	ld	h, b
      0003C2 29               [ 8] 1177 	add	hl, hl
      0003C3 09               [ 8] 1178 	add	hl, bc
      0003C4 E5               [16] 1179 	push	hl
      0003C5 7D               [ 4] 1180 	ld	a, l
      0003C6 F8 0A            [12] 1181 	ldhl	sp,	#10
      0003C8 77               [ 8] 1182 	ld	(hl), a
      0003C9 E1               [12] 1183 	pop	hl
      0003CA 7C               [ 4] 1184 	ld	a, h
      0003CB F8 09            [12] 1185 	ldhl	sp,	#9
      0003CD 32               [ 8] 1186 	ld	(hl-), a
      0003CE 2A               [ 8] 1187 	ld	a, (hl+)
      0003CF 5F               [ 4] 1188 	ld	e, a
      0003D0 56               [ 8] 1189 	ld	d, (hl)
      0003D1 F8 0E            [12] 1190 	ldhl	sp,	#14
      0003D3 2A               [ 8] 1191 	ld	a,	(hl+)
      0003D4 66               [ 8] 1192 	ld	h, (hl)
      0003D5 6F               [ 4] 1193 	ld	l, a
      0003D6 19               [ 8] 1194 	add	hl, de
      0003D7 33               [ 8] 1195 	inc	sp
      0003D8 33               [ 8] 1196 	inc	sp
      0003D9 5D               [ 4] 1197 	ld	e, l
      0003DA 54               [ 4] 1198 	ld	d, h
      0003DB D5               [16] 1199 	push	de
      0003DC 1A               [ 8] 1200 	ld	a, (de)
      0003DD F8 08            [12] 1201 	ldhl	sp,	#8
      0003DF 77               [ 8] 1202 	ld	(hl), a
                           0003E0  1203 	C$main.c$218$3_0$209	= .
                                   1204 	.globl	C$main.c$218$3_0$209
                                   1205 ;main.c:218: UINT8 pieceY = opponentPieces[i].y;
      0003E0 D1               [12] 1206 	pop	de
      0003E1 D5               [16] 1207 	push	de
      0003E2 6B               [ 4] 1208 	ld	l, e
      0003E3 62               [ 4] 1209 	ld	h, d
      0003E4 23               [ 8] 1210 	inc	hl
      0003E5 E5               [16] 1211 	push	hl
      0003E6 7D               [ 4] 1212 	ld	a, l
      0003E7 F8 04            [12] 1213 	ldhl	sp,	#4
      0003E9 77               [ 8] 1214 	ld	(hl), a
      0003EA E1               [12] 1215 	pop	hl
      0003EB 7C               [ 4] 1216 	ld	a, h
      0003EC F8 03            [12] 1217 	ldhl	sp,	#3
      0003EE 32               [ 8] 1218 	ld	(hl-), a
      0003EF 2A               [ 8] 1219 	ld	a, (hl+)
      0003F0 5F               [ 4] 1220 	ld	e, a
      0003F1 56               [ 8] 1221 	ld	d, (hl)
      0003F2 1A               [ 8] 1222 	ld	a, (de)
      0003F3 F8 09            [12] 1223 	ldhl	sp,	#9
                           0003F5  1224 	C$main.c$221$3_0$209	= .
                                   1225 	.globl	C$main.c$221$3_0$209
                                   1226 ;main.c:221: UINT8 pieceLeft = pieceX - 4;
      0003F5 32               [ 8] 1227 	ld	(hl-), a
      0003F6 5E               [ 8] 1228 	ld	e, (hl)
      0003F7 7B               [ 4] 1229 	ld	a, e
      0003F8 C6 FC            [ 8] 1230 	add	a, #0xfc
      0003FA F8 04            [12] 1231 	ldhl	sp,	#4
                           0003FC  1232 	C$main.c$222$3_0$209	= .
                                   1233 	.globl	C$main.c$222$3_0$209
                                   1234 ;main.c:222: UINT8 pieceRight = pieceX + 4;
      0003FC 22               [ 8] 1235 	ld	(hl+), a
      0003FD 7B               [ 4] 1236 	ld	a, e
      0003FE C6 04            [ 8] 1237 	add	a, #0x04
      000400 77               [ 8] 1238 	ld	(hl), a
                           000401  1239 	C$main.c$223$3_0$209	= .
                                   1240 	.globl	C$main.c$223$3_0$209
                                   1241 ;main.c:223: UINT8 pieceTop = pieceY - 4;
      000401 F8 09            [12] 1242 	ldhl	sp,	#9
      000403 5E               [ 8] 1243 	ld	e, (hl)
      000404 7B               [ 4] 1244 	ld	a, e
      000405 C6 FC            [ 8] 1245 	add	a, #0xfc
      000407 F8 06            [12] 1246 	ldhl	sp,	#6
                           000409  1247 	C$main.c$224$3_0$209	= .
                                   1248 	.globl	C$main.c$224$3_0$209
                                   1249 ;main.c:224: UINT8 pieceBottom = pieceY + 4;
      000409 22               [ 8] 1250 	ld	(hl+), a
      00040A 7B               [ 4] 1251 	ld	a, e
      00040B C6 04            [ 8] 1252 	add	a, #0x04
      00040D 77               [ 8] 1253 	ld	(hl), a
                           00040E  1254 	C$main.c$225$3_0$209	= .
                                   1255 	.globl	C$main.c$225$3_0$209
                                   1256 ;main.c:225: UINT8 tileLeft = capturedX - 4;
      00040E F8 0B            [12] 1257 	ldhl	sp,	#11
      000410 5E               [ 8] 1258 	ld	e, (hl)
      000411 7B               [ 4] 1259 	ld	a, e
      000412 C6 FC            [ 8] 1260 	add	a, #0xfc
      000414 57               [ 4] 1261 	ld	d, a
                           000415  1262 	C$main.c$226$3_0$209	= .
                                   1263 	.globl	C$main.c$226$3_0$209
                                   1264 ;main.c:226: UINT8 tileRight = capturedX + 4;
      000415 7B               [ 4] 1265 	ld	a, e
      000416 C6 04            [ 8] 1266 	add	a, #0x04
      000418 F8 08            [12] 1267 	ldhl	sp,	#8
                           00041A  1268 	C$main.c$227$3_0$209	= .
                                   1269 	.globl	C$main.c$227$3_0$209
                                   1270 ;main.c:227: UINT8 tileTop = capturedY - 4;
      00041A 22               [ 8] 1271 	ld	(hl+), a
      00041B 23               [ 8] 1272 	inc	hl
      00041C 6E               [ 8] 1273 	ld	l, (hl)
                                   1274 ;	spillPairReg hl
                                   1275 ;	spillPairReg hl
      00041D 7D               [ 4] 1276 	ld	a, l
      00041E C6 FC            [ 8] 1277 	add	a, #0xfc
      000420 5F               [ 4] 1278 	ld	e, a
                           000421  1279 	C$main.c$228$3_0$209	= .
                                   1280 	.globl	C$main.c$228$3_0$209
                                   1281 ;main.c:228: UINT8 tileBottom = capturedY + 4;
      000421 7D               [ 4] 1282 	ld	a, l
      000422 C6 04            [ 8] 1283 	add	a, #0x04
      000424 F8 09            [12] 1284 	ldhl	sp,	#9
      000426 77               [ 8] 1285 	ld	(hl), a
                           000427  1286 	C$main.c$231$3_0$209	= .
                                   1287 	.globl	C$main.c$231$3_0$209
                                   1288 ;main.c:231: if (tileLeft <= pieceRight && tileRight >= pieceLeft &&
      000427 F8 05            [12] 1289 	ldhl	sp,	#5
      000429 7E               [ 8] 1290 	ld	a, (hl)
      00042A 92               [ 4] 1291 	sub	a, d
      00042B 38 25            [12] 1292 	jr	C, 00109$
      00042D F8 08            [12] 1293 	ldhl	sp,	#8
      00042F 7E               [ 8] 1294 	ld	a, (hl)
      000430 F8 04            [12] 1295 	ldhl	sp,	#4
      000432 96               [ 8] 1296 	sub	a, (hl)
      000433 38 1D            [12] 1297 	jr	C, 00109$
                           000435  1298 	C$main.c$232$3_0$209	= .
                                   1299 	.globl	C$main.c$232$3_0$209
                                   1300 ;main.c:232: tileTop <= pieceBottom && tileBottom >= pieceTop) {
      000435 F8 07            [12] 1301 	ldhl	sp,	#7
      000437 7E               [ 8] 1302 	ld	a, (hl)
      000438 93               [ 4] 1303 	sub	a, e
      000439 38 17            [12] 1304 	jr	C, 00109$
      00043B 23               [ 8] 1305 	inc	hl
      00043C 23               [ 8] 1306 	inc	hl
      00043D 7E               [ 8] 1307 	ld	a, (hl)
      00043E F8 06            [12] 1308 	ldhl	sp,	#6
      000440 96               [ 8] 1309 	sub	a, (hl)
      000441 38 0F            [12] 1310 	jr	C, 00109$
                           000443  1311 	C$main.c$233$4_0$210	= .
                                   1312 	.globl	C$main.c$233$4_0$210
                                   1313 ;main.c:233: opponentPieces[i].x = 0;
      000443 E1               [12] 1314 	pop	hl
      000444 36 00            [12] 1315 	ld	(hl), #0x00
      000446 E5               [16] 1316 	push	hl
                           000447  1317 	C$main.c$234$4_0$210	= .
                                   1318 	.globl	C$main.c$234$4_0$210
                                   1319 ;main.c:234: opponentPieces[i].y = 0;
      000447 F8 02            [12] 1320 	ldhl	sp,	#2
      000449 2A               [ 8] 1321 	ld	a,	(hl+)
      00044A 66               [ 8] 1322 	ld	h, (hl)
      00044B 6F               [ 4] 1323 	ld	l, a
      00044C 36 00            [12] 1324 	ld	(hl), #0x00
                           00044E  1325 	C$main.c$235$4_0$210	= .
                                   1326 	.globl	C$main.c$235$4_0$210
                                   1327 ;main.c:235: return true;
      00044E 3E 01            [ 8] 1328 	ld	a, #0x01
      000450 18 05            [12] 1329 	jr	00110$
      000452                       1330 00109$:
                           000452  1331 	C$main.c$216$2_0$208	= .
                                   1332 	.globl	C$main.c$216$2_0$208
                                   1333 ;main.c:216: for (int i = 0; i < 12; i++) {
      000452 03               [ 8] 1334 	inc	bc
      000453 C3rB4r03         [16] 1335 	jp	00108$
      000456                       1336 00106$:
                           000456  1337 	C$main.c$238$1_0$207	= .
                                   1338 	.globl	C$main.c$238$1_0$207
                                   1339 ;main.c:238: return false;
      000456 AF               [ 4] 1340 	xor	a, a
      000457                       1341 00110$:
                           000457  1342 	C$main.c$239$1_0$207	= .
                                   1343 	.globl	C$main.c$239$1_0$207
                                   1344 ;main.c:239: }
      000457 E8 0C            [16] 1345 	add	sp, #12
      000459 E1               [12] 1346 	pop	hl
      00045A C1               [12] 1347 	pop	bc
      00045B E9               [ 4] 1348 	jp	(hl)
                           00045C  1349 	G$isValidMove$0$0	= .
                                   1350 	.globl	G$isValidMove$0$0
                           00045C  1351 	C$main.c$241$1_0$212	= .
                                   1352 	.globl	C$main.c$241$1_0$212
                                   1353 ;main.c:241: bool isValidMove(UINT8 cursorx, UINT8 cursory, UINT8 currentPlayer, int selectedCoords) {
                                   1354 ;	---------------------------------
                                   1355 ; Function isValidMove
                                   1356 ; ---------------------------------
      00045C                       1357 _isValidMove::
      00045C E8 EC            [16] 1358 	add	sp, #-20
      00045E F8 13            [12] 1359 	ldhl	sp,	#19
      000460 32               [ 8] 1360 	ld	(hl-), a
      000461 73               [ 8] 1361 	ld	(hl), e
                           000462  1362 	C$main.c$248$1_0$212	= .
                                   1363 	.globl	C$main.c$248$1_0$212
                                   1364 ;main.c:248: if (currentPlayer == BLACK_PLAYER) {
      000462 F8 16            [12] 1365 	ldhl	sp,	#22
      000464 7E               [ 8] 1366 	ld	a, (hl)
      000465 B7               [ 4] 1367 	or	a, a
      000466 20 16            [12] 1368 	jr	NZ, 00102$
                           000468  1369 	C$main.c$249$2_0$213	= .
                                   1370 	.globl	C$main.c$249$2_0$213
                                   1371 ;main.c:249: pieces = blackPieces;
      000468 F8 0E            [12] 1372 	ldhl	sp,	#14
      00046A 36r43            [12] 1373 	ld	(hl), #<(_blackPieces)
      00046C 23               [ 8] 1374 	inc	hl
      00046D 36s02            [12] 1375 	ld	(hl), #>(_blackPieces)
                           00046F  1376 	C$main.c$250$2_0$213	= .
                                   1377 	.globl	C$main.c$250$2_0$213
                                   1378 ;main.c:250: opponentPieces = whitePieces;
      00046F F8 02            [12] 1379 	ldhl	sp,	#2
      000471 3Er67            [ 8] 1380 	ld	a, #<(_whitePieces)
      000473 22               [ 8] 1381 	ld	(hl+), a
                           000474  1382 	C$main.c$251$2_0$213	= .
                                   1383 	.globl	C$main.c$251$2_0$213
                                   1384 ;main.c:251: numPieces = MAX_BLACK_PIECES;
      000474 3Es02            [ 8] 1385 	ld	a, #>(_whitePieces)
      000476 22               [ 8] 1386 	ld	(hl+), a
      000477 3E 0C            [ 8] 1387 	ld	a, #0x0c
      000479 22               [ 8] 1388 	ld	(hl+), a
      00047A AF               [ 4] 1389 	xor	a, a
      00047B 77               [ 8] 1390 	ld	(hl), a
                           00047C  1391 	C$main.c$252$1_0$212	= .
                                   1392 	.globl	C$main.c$252$1_0$212
                                   1393 ;main.c:252: numOpponentPieces = MAX_WHITE_PIECES;
      00047C 18 14            [12] 1394 	jr	00103$
      00047E                       1395 00102$:
                           00047E  1396 	C$main.c$254$2_0$214	= .
                                   1397 	.globl	C$main.c$254$2_0$214
                                   1398 ;main.c:254: pieces = whitePieces;
      00047E F8 0E            [12] 1399 	ldhl	sp,	#14
      000480 3Er67            [ 8] 1400 	ld	a, #<(_whitePieces)
      000482 22               [ 8] 1401 	ld	(hl+), a
      000483 36s02            [12] 1402 	ld	(hl), #>(_whitePieces)
                           000485  1403 	C$main.c$255$2_0$214	= .
                                   1404 	.globl	C$main.c$255$2_0$214
                                   1405 ;main.c:255: opponentPieces = blackPieces;
      000485 F8 02            [12] 1406 	ldhl	sp,	#2
      000487 3Er43            [ 8] 1407 	ld	a, #<(_blackPieces)
      000489 22               [ 8] 1408 	ld	(hl+), a
                           00048A  1409 	C$main.c$256$2_0$214	= .
                                   1410 	.globl	C$main.c$256$2_0$214
                                   1411 ;main.c:256: numPieces = MAX_WHITE_PIECES;
      00048A 3Es02            [ 8] 1412 	ld	a, #>(_blackPieces)
      00048C 22               [ 8] 1413 	ld	(hl+), a
      00048D 3E 0C            [ 8] 1414 	ld	a, #0x0c
      00048F 22               [ 8] 1415 	ld	(hl+), a
      000490 AF               [ 4] 1416 	xor	a, a
      000491 77               [ 8] 1417 	ld	(hl), a
                           000492  1418 	C$main.c$257$1_0$212	= .
                                   1419 	.globl	C$main.c$257$1_0$212
                                   1420 ;main.c:257: numOpponentPieces = MAX_BLACK_PIECES;
      000492                       1421 00103$:
                           000492  1422 	C$main.c$261$1_0$212	= .
                                   1423 	.globl	C$main.c$261$1_0$212
                                   1424 ;main.c:261: if (cursorx > 160 || cursorx <= 20 || cursory > 160 || cursory <= 20) {
      000492 3E A0            [ 8] 1425 	ld	a, #0xa0
      000494 F8 13            [12] 1426 	ldhl	sp,	#19
      000496 96               [ 8] 1427 	sub	a, (hl)
      000497 38 10            [12] 1428 	jr	C, 00104$
      000499 3E 14            [ 8] 1429 	ld	a, #0x14
      00049B 96               [ 8] 1430 	sub	a, (hl)
      00049C 30 0B            [12] 1431 	jr	NC, 00104$
      00049E 2B               [ 8] 1432 	dec	hl
      00049F 3E A0            [ 8] 1433 	ld	a, #0xa0
      0004A1 96               [ 8] 1434 	sub	a, (hl)
      0004A2 38 05            [12] 1435 	jr	C, 00104$
      0004A4 3E 14            [ 8] 1436 	ld	a, #0x14
      0004A6 96               [ 8] 1437 	sub	a, (hl)
      0004A7 38 04            [12] 1438 	jr	C, 00105$
      0004A9                       1439 00104$:
                           0004A9  1440 	C$main.c$262$2_0$215	= .
                                   1441 	.globl	C$main.c$262$2_0$215
                                   1442 ;main.c:262: return false;
      0004A9 AF               [ 4] 1443 	xor	a, a
      0004AA C3r09r07         [16] 1444 	jp	00141$
      0004AD                       1445 00105$:
                           0004AD  1446 	C$main.c$266$1_0$212	= .
                                   1447 	.globl	C$main.c$266$1_0$212
                                   1448 ;main.c:266: if (selectedCoords < 0 || selectedCoords >= numPieces) {
      0004AD F8 18            [12] 1449 	ldhl	sp,	#24
      0004AF CB 7E            [12] 1450 	bit	7, (hl)
      0004B1 20 21            [12] 1451 	jr	NZ, 00109$
      0004B3 F8 17            [12] 1452 	ldhl	sp,	#23
      0004B5 5D               [ 4] 1453 	ld	e, l
      0004B6 54               [ 4] 1454 	ld	d, h
      0004B7 F8 04            [12] 1455 	ldhl	sp,	#4
      0004B9 1A               [ 8] 1456 	ld	a, (de)
      0004BA 13               [ 8] 1457 	inc	de
      0004BB 96               [ 8] 1458 	sub	a, (hl)
      0004BC 23               [ 8] 1459 	inc	hl
      0004BD 1A               [ 8] 1460 	ld	a, (de)
      0004BE 9E               [ 8] 1461 	sbc	a, (hl)
      0004BF 1A               [ 8] 1462 	ld	a, (de)
      0004C0 57               [ 4] 1463 	ld	d, a
      0004C1 5E               [ 8] 1464 	ld	e, (hl)
      0004C2 CB 7B            [ 8] 1465 	bit	7, e
      0004C4 28 07            [12] 1466 	jr	Z, 00250$
      0004C6 CB 7A            [ 8] 1467 	bit	7, d
      0004C8 20 08            [12] 1468 	jr	NZ, 00251$
      0004CA BF               [ 4] 1469 	cp	a, a
      0004CB 18 05            [12] 1470 	jr	00251$
      0004CD                       1471 00250$:
      0004CD CB 7A            [ 8] 1472 	bit	7, d
      0004CF 28 01            [12] 1473 	jr	Z, 00251$
      0004D1 37               [ 4] 1474 	scf
      0004D2                       1475 00251$:
      0004D2 38 04            [12] 1476 	jr	C, 00110$
      0004D4                       1477 00109$:
                           0004D4  1478 	C$main.c$267$2_0$216	= .
                                   1479 	.globl	C$main.c$267$2_0$216
                                   1480 ;main.c:267: return false;
      0004D4 AF               [ 4] 1481 	xor	a, a
      0004D5 C3r09r07         [16] 1482 	jp	00141$
      0004D8                       1483 00110$:
                           0004D8  1484 	C$main.c$271$1_1$217	= .
                                   1485 	.globl	C$main.c$271$1_1$217
                                   1486 ;main.c:271: int dx = cursorx - pieces[selectedCoords].x;
      0004D8 F8 13            [12] 1487 	ldhl	sp,	#19
      0004DA 7E               [ 8] 1488 	ld	a, (hl)
      0004DB F8 0C            [12] 1489 	ldhl	sp,	#12
      0004DD 22               [ 8] 1490 	ld	(hl+), a
      0004DE 36 00            [12] 1491 	ld	(hl), #0x00
      0004E0 F8 17            [12] 1492 	ldhl	sp,#23
      0004E2 2A               [ 8] 1493 	ld	a, (hl+)
      0004E3 4F               [ 4] 1494 	ld	c, a
      0004E4 46               [ 8] 1495 	ld	b, (hl)
      0004E5 69               [ 4] 1496 	ld	l, c
      0004E6 60               [ 4] 1497 	ld	h, b
      0004E7 29               [ 8] 1498 	add	hl, hl
      0004E8 09               [ 8] 1499 	add	hl, bc
      0004E9 4D               [ 4] 1500 	ld	c, l
      0004EA 44               [ 4] 1501 	ld	b, h
      0004EB F8 0E            [12] 1502 	ldhl	sp,	#14
      0004ED 2A               [ 8] 1503 	ld	a,	(hl+)
      0004EE 66               [ 8] 1504 	ld	h, (hl)
      0004EF 6F               [ 4] 1505 	ld	l, a
      0004F0 09               [ 8] 1506 	add	hl, bc
      0004F1 E5               [16] 1507 	push	hl
      0004F2 7D               [ 4] 1508 	ld	a, l
      0004F3 F8 12            [12] 1509 	ldhl	sp,	#18
      0004F5 77               [ 8] 1510 	ld	(hl), a
      0004F6 E1               [12] 1511 	pop	hl
      0004F7 7C               [ 4] 1512 	ld	a, h
      0004F8 F8 11            [12] 1513 	ldhl	sp,	#17
      0004FA 32               [ 8] 1514 	ld	(hl-), a
      0004FB 2A               [ 8] 1515 	ld	a, (hl+)
      0004FC 5F               [ 4] 1516 	ld	e, a
      0004FD 56               [ 8] 1517 	ld	d, (hl)
      0004FE 1A               [ 8] 1518 	ld	a, (de)
      0004FF 4F               [ 4] 1519 	ld	c, a
      000500 06 00            [ 8] 1520 	ld	b, #0x00
      000502 F8 0C            [12] 1521 	ldhl	sp,#12
      000504 2A               [ 8] 1522 	ld	a, (hl+)
      000505 5F               [ 4] 1523 	ld	e, a
      000506 2A               [ 8] 1524 	ld	a, (hl+)
      000507 23               [ 8] 1525 	inc	hl
      000508 57               [ 4] 1526 	ld	d, a
      000509 7B               [ 4] 1527 	ld	a, e
      00050A 91               [ 4] 1528 	sub	a, c
      00050B 5F               [ 4] 1529 	ld	e, a
      00050C 7A               [ 4] 1530 	ld	a, d
      00050D 98               [ 4] 1531 	sbc	a, b
      00050E 32               [ 8] 1532 	ld	(hl-), a
      00050F 73               [ 8] 1533 	ld	(hl), e
      000510 7E               [ 8] 1534 	ld	a, (hl)
      000511 F8 06            [12] 1535 	ldhl	sp,	#6
      000513 77               [ 8] 1536 	ld	(hl), a
      000514 F8 0F            [12] 1537 	ldhl	sp,	#15
      000516 7E               [ 8] 1538 	ld	a, (hl)
      000517 F8 07            [12] 1539 	ldhl	sp,	#7
      000519 77               [ 8] 1540 	ld	(hl), a
                           00051A  1541 	C$main.c$272$1_1$217	= .
                                   1542 	.globl	C$main.c$272$1_1$217
                                   1543 ;main.c:272: int dy = cursory - pieces[selectedCoords].y;
      00051A F8 12            [12] 1544 	ldhl	sp,	#18
      00051C 7E               [ 8] 1545 	ld	a, (hl)
      00051D F8 00            [12] 1546 	ldhl	sp,	#0
      00051F 22               [ 8] 1547 	ld	(hl+), a
      000520 36 00            [12] 1548 	ld	(hl), #0x00
      000522 F8 10            [12] 1549 	ldhl	sp,	#16
      000524 7E               [ 8] 1550 	ld	a, (hl)
      000525 F8 08            [12] 1551 	ldhl	sp,	#8
      000527 77               [ 8] 1552 	ld	(hl), a
      000528 F8 11            [12] 1553 	ldhl	sp,	#17
      00052A 7E               [ 8] 1554 	ld	a, (hl)
      00052B F8 09            [12] 1555 	ldhl	sp,	#9
      00052D 77               [ 8] 1556 	ld	(hl), a
      00052E F8 10            [12] 1557 	ldhl	sp,#16
      000530 2A               [ 8] 1558 	ld	a, (hl+)
      000531 5F               [ 4] 1559 	ld	e, a
      000532 56               [ 8] 1560 	ld	d, (hl)
      000533 6B               [ 4] 1561 	ld	l, e
      000534 62               [ 4] 1562 	ld	h, d
      000535 23               [ 8] 1563 	inc	hl
      000536 E5               [16] 1564 	push	hl
      000537 7D               [ 4] 1565 	ld	a, l
      000538 F8 0C            [12] 1566 	ldhl	sp,	#12
      00053A 77               [ 8] 1567 	ld	(hl), a
      00053B E1               [12] 1568 	pop	hl
      00053C 7C               [ 4] 1569 	ld	a, h
      00053D F8 0B            [12] 1570 	ldhl	sp,	#11
      00053F 32               [ 8] 1571 	ld	(hl-), a
      000540 2A               [ 8] 1572 	ld	a, (hl+)
      000541 5F               [ 4] 1573 	ld	e, a
      000542 56               [ 8] 1574 	ld	d, (hl)
      000543 1A               [ 8] 1575 	ld	a, (de)
      000544 F8 0F            [12] 1576 	ldhl	sp,	#15
      000546 77               [ 8] 1577 	ld	(hl), a
      000547 F8 0C            [12] 1578 	ldhl	sp,	#12
      000549 22               [ 8] 1579 	ld	(hl+), a
      00054A 36 00            [12] 1580 	ld	(hl), #0x00
      00054C D1               [12] 1581 	pop	de
      00054D D5               [16] 1582 	push	de
      00054E 3A               [ 8] 1583 	ld	a, (hl-)
      00054F 6E               [ 8] 1584 	ld	l, (hl)
      000550 67               [ 4] 1585 	ld	h, a
      000551 7B               [ 4] 1586 	ld	a, e
      000552 95               [ 4] 1587 	sub	a, l
      000553 5F               [ 4] 1588 	ld	e, a
      000554 7A               [ 4] 1589 	ld	a, d
      000555 9C               [ 4] 1590 	sbc	a, h
      000556 F8 0F            [12] 1591 	ldhl	sp,	#15
      000558 32               [ 8] 1592 	ld	(hl-), a
      000559 73               [ 8] 1593 	ld	(hl), e
      00055A 3A               [ 8] 1594 	ld	a, (hl-)
      00055B 2B               [ 8] 1595 	dec	hl
      00055C 77               [ 8] 1596 	ld	(hl), a
      00055D F8 0F            [12] 1597 	ldhl	sp,	#15
      00055F 3A               [ 8] 1598 	ld	a, (hl-)
      000560 2B               [ 8] 1599 	dec	hl
      000561 77               [ 8] 1600 	ld	(hl), a
                           000562  1601 	C$main.c$275$1_1$217	= .
                                   1602 	.globl	C$main.c$275$1_1$217
                                   1603 ;main.c:275: if (abs(dx) != abs(dy)) {
      000562 F8 06            [12] 1604 	ldhl	sp,	#6
      000564 2A               [ 8] 1605 	ld	a, (hl+)
      000565 5F               [ 4] 1606 	ld	e, a
      000566 56               [ 8] 1607 	ld	d, (hl)
      000567 D5               [16] 1608 	push	de
      000568 CDr00r00         [24] 1609 	call	_abs
      00056B E1               [12] 1610 	pop	hl
      00056C D5               [16] 1611 	push	de
      00056D F8 0E            [12] 1612 	ldhl	sp,	#14
      00056F 2A               [ 8] 1613 	ld	a, (hl+)
      000570 5F               [ 4] 1614 	ld	e, a
      000571 56               [ 8] 1615 	ld	d, (hl)
      000572 D5               [16] 1616 	push	de
      000573 CDr00r00         [24] 1617 	call	_abs
      000576 E1               [12] 1618 	pop	hl
      000577 C1               [12] 1619 	pop	bc
      000578 7B               [ 4] 1620 	ld	a, e
      000579 91               [ 4] 1621 	sub	a, c
      00057A 20 04            [12] 1622 	jr	NZ, 00252$
      00057C 7A               [ 4] 1623 	ld	a, d
      00057D 90               [ 4] 1624 	sub	a, b
      00057E 28 04            [12] 1625 	jr	Z, 00113$
      000580                       1626 00252$:
                           000580  1627 	C$main.c$276$2_1$218	= .
                                   1628 	.globl	C$main.c$276$2_1$218
                                   1629 ;main.c:276: return false;
      000580 AF               [ 4] 1630 	xor	a, a
      000581 C3r09r07         [16] 1631 	jp	00141$
      000584                       1632 00113$:
                           000584  1633 	C$main.c$280$1_1$212	= .
                                   1634 	.globl	C$main.c$280$1_1$212
                                   1635 ;main.c:280: if ((currentPlayer == BLACK_PLAYER && dy < 0 && !pieces[selectedCoords].isKing) ||
      000584 F8 0D            [12] 1636 	ldhl	sp,	#13
      000586 2A               [ 8] 1637 	ld	a, (hl+)
      000587 07               [ 4] 1638 	rlca
      000588 E6 01            [ 8] 1639 	and	a,#0x01
      00058A 22               [ 8] 1640 	ld	(hl+), a
      00058B 23               [ 8] 1641 	inc	hl
      00058C 2A               [ 8] 1642 	ld	a, (hl+)
      00058D 4F               [ 4] 1643 	ld	c, a
      00058E 46               [ 8] 1644 	ld	b, (hl)
      00058F 03               [ 8] 1645 	inc	bc
      000590 03               [ 8] 1646 	inc	bc
      000591 F8 16            [12] 1647 	ldhl	sp,	#22
      000593 7E               [ 8] 1648 	ld	a, (hl)
      000594 B7               [ 4] 1649 	or	a, a
      000595 20 0C            [12] 1650 	jr	NZ, 00120$
      000597 F8 0E            [12] 1651 	ldhl	sp,	#14
      000599 7E               [ 8] 1652 	ld	a, (hl)
      00059A B7               [ 4] 1653 	or	a, a
      00059B 28 06            [12] 1654 	jr	Z, 00120$
      00059D 0A               [ 8] 1655 	ld	a, (bc)
      00059E 5F               [ 4] 1656 	ld	e, a
      00059F CB 43            [ 8] 1657 	bit	0, e
      0005A1 28 2A            [12] 1658 	jr	Z, 00114$
      0005A3                       1659 00120$:
                           0005A3  1660 	C$main.c$281$1_1$217	= .
                                   1661 	.globl	C$main.c$281$1_1$217
                                   1662 ;main.c:281: (currentPlayer == WHITE_PLAYER && dy > 0 && !pieces[selectedCoords].isKing)) {
      0005A3 F8 16            [12] 1663 	ldhl	sp,	#22
      0005A5 7E               [ 8] 1664 	ld	a, (hl)
      0005A6 3D               [ 4] 1665 	dec	a
      0005A7 20 28            [12] 1666 	jr	NZ, 00160$
      0005A9 F8 0C            [12] 1667 	ldhl	sp,	#12
      0005AB AF               [ 4] 1668 	xor	a, a
      0005AC 96               [ 8] 1669 	sub	a, (hl)
      0005AD 23               [ 8] 1670 	inc	hl
      0005AE 3E 00            [ 8] 1671 	ld	a, #0x00
      0005B0 9E               [ 8] 1672 	sbc	a, (hl)
      0005B1 3E 00            [ 8] 1673 	ld	a, #0x00
      0005B3 57               [ 4] 1674 	ld	d, a
      0005B4 5E               [ 8] 1675 	ld	e, (hl)
      0005B5 CB 7B            [ 8] 1676 	bit	7, e
      0005B7 28 07            [12] 1677 	jr	Z, 00255$
      0005B9 CB 7A            [ 8] 1678 	bit	7, d
      0005BB 20 08            [12] 1679 	jr	NZ, 00256$
      0005BD BF               [ 4] 1680 	cp	a, a
      0005BE 18 05            [12] 1681 	jr	00256$
      0005C0                       1682 00255$:
      0005C0 CB 7A            [ 8] 1683 	bit	7, d
      0005C2 28 01            [12] 1684 	jr	Z, 00256$
      0005C4 37               [ 4] 1685 	scf
      0005C5                       1686 00256$:
      0005C5 30 0A            [12] 1687 	jr	NC, 00160$
      0005C7 0A               [ 8] 1688 	ld	a, (bc)
      0005C8 4F               [ 4] 1689 	ld	c, a
      0005C9 CB 41            [ 8] 1690 	bit	0, c
      0005CB 20 04            [12] 1691 	jr	NZ, 00160$
      0005CD                       1692 00114$:
                           0005CD  1693 	C$main.c$282$2_1$219	= .
                                   1694 	.globl	C$main.c$282$2_1$219
                                   1695 ;main.c:282: return false;
      0005CD AF               [ 4] 1696 	xor	a, a
      0005CE C3r09r07         [16] 1697 	jp	00141$
                           0005D1  1698 	C$main.c$286$1_1$212	= .
                                   1699 	.globl	C$main.c$286$1_1$212
                                   1700 ;main.c:286: for (int i = 0; i < numPieces; i++) {
      0005D1                       1701 00160$:
      0005D1 01 00 00         [12] 1702 	ld	bc, #0x0000
      0005D4                       1703 00139$:
      0005D4 F8 04            [12] 1704 	ldhl	sp,	#4
      0005D6 79               [ 4] 1705 	ld	a, c
      0005D7 96               [ 8] 1706 	sub	a, (hl)
      0005D8 23               [ 8] 1707 	inc	hl
      0005D9 78               [ 4] 1708 	ld	a, b
      0005DA 9E               [ 8] 1709 	sbc	a, (hl)
      0005DB 78               [ 4] 1710 	ld	a, b
      0005DC 57               [ 4] 1711 	ld	d, a
      0005DD CB 7E            [12] 1712 	bit	7, (hl)
      0005DF 28 07            [12] 1713 	jr	Z, 00257$
      0005E1 CB 7A            [ 8] 1714 	bit	7, d
      0005E3 20 08            [12] 1715 	jr	NZ, 00258$
      0005E5 BF               [ 4] 1716 	cp	a, a
      0005E6 18 05            [12] 1717 	jr	00258$
      0005E8                       1718 00257$:
      0005E8 CB 7A            [ 8] 1719 	bit	7, d
      0005EA 28 01            [12] 1720 	jr	Z, 00258$
      0005EC 37               [ 4] 1721 	scf
      0005ED                       1722 00258$:
      0005ED 30 53            [12] 1723 	jr	NC, 00127$
                           0005EF  1724 	C$main.c$287$1_1$212	= .
                                   1725 	.globl	C$main.c$287$1_1$212
                                   1726 ;main.c:287: if (whitePieces[i].x == cursorx && whitePieces[i].y == cursory) {
      0005EF 69               [ 4] 1727 	ld	l, c
      0005F0 60               [ 4] 1728 	ld	h, b
      0005F1 29               [ 8] 1729 	add	hl, hl
      0005F2 09               [ 8] 1730 	add	hl, bc
      0005F3 E5               [16] 1731 	push	hl
      0005F4 7D               [ 4] 1732 	ld	a, l
      0005F5 F8 11            [12] 1733 	ldhl	sp,	#17
      0005F7 77               [ 8] 1734 	ld	(hl), a
      0005F8 E1               [12] 1735 	pop	hl
      0005F9 7C               [ 4] 1736 	ld	a, h
      0005FA F8 10            [12] 1737 	ldhl	sp,	#16
      0005FC 77               [ 8] 1738 	ld	(hl), a
      0005FD 11r67r02         [12] 1739 	ld	de, #_whitePieces
      000600 3A               [ 8] 1740 	ld	a, (hl-)
      000601 6E               [ 8] 1741 	ld	l, (hl)
      000602 67               [ 4] 1742 	ld	h, a
      000603 19               [ 8] 1743 	add	hl, de
      000604 5D               [ 4] 1744 	ld	e, l
      000605 54               [ 4] 1745 	ld	d, h
      000606 1A               [ 8] 1746 	ld	a, (de)
      000607 F8 11            [12] 1747 	ldhl	sp,	#17
      000609 22               [ 8] 1748 	ld	(hl+), a
      00060A 23               [ 8] 1749 	inc	hl
      00060B 3A               [ 8] 1750 	ld	a, (hl-)
      00060C 2B               [ 8] 1751 	dec	hl
      00060D 96               [ 8] 1752 	sub	a, (hl)
      00060E 20 0D            [12] 1753 	jr	NZ, 00122$
      000610 13               [ 8] 1754 	inc	de
      000611 1A               [ 8] 1755 	ld	a, (de)
      000612 5F               [ 4] 1756 	ld	e, a
      000613 F8 12            [12] 1757 	ldhl	sp,	#18
      000615 7E               [ 8] 1758 	ld	a, (hl)
      000616 93               [ 4] 1759 	sub	a, e
      000617 20 04            [12] 1760 	jr	NZ, 00122$
                           000619  1761 	C$main.c$288$4_1$222	= .
                                   1762 	.globl	C$main.c$288$4_1$222
                                   1763 ;main.c:288: return false;
      000619 AF               [ 4] 1764 	xor	a, a
      00061A C3r09r07         [16] 1765 	jp	00141$
      00061D                       1766 00122$:
                           00061D  1767 	C$main.c$290$1_1$212	= .
                                   1768 	.globl	C$main.c$290$1_1$212
                                   1769 ;main.c:290: if (blackPieces[i].x == cursorx && blackPieces[i].y == cursory) {
      00061D 11r43r02         [12] 1770 	ld	de, #_blackPieces
      000620 F8 0F            [12] 1771 	ldhl	sp,	#15
      000622 2A               [ 8] 1772 	ld	a,	(hl+)
      000623 66               [ 8] 1773 	ld	h, (hl)
      000624 6F               [ 4] 1774 	ld	l, a
      000625 19               [ 8] 1775 	add	hl, de
      000626 5D               [ 4] 1776 	ld	e, l
      000627 54               [ 4] 1777 	ld	d, h
      000628 1A               [ 8] 1778 	ld	a, (de)
      000629 F8 11            [12] 1779 	ldhl	sp,	#17
      00062B 22               [ 8] 1780 	ld	(hl+), a
      00062C 23               [ 8] 1781 	inc	hl
      00062D 3A               [ 8] 1782 	ld	a, (hl-)
      00062E 2B               [ 8] 1783 	dec	hl
      00062F 96               [ 8] 1784 	sub	a, (hl)
      000630 20 0D            [12] 1785 	jr	NZ, 00140$
      000632 13               [ 8] 1786 	inc	de
      000633 1A               [ 8] 1787 	ld	a, (de)
      000634 5F               [ 4] 1788 	ld	e, a
      000635 F8 12            [12] 1789 	ldhl	sp,	#18
      000637 7E               [ 8] 1790 	ld	a, (hl)
      000638 93               [ 4] 1791 	sub	a, e
      000639 20 04            [12] 1792 	jr	NZ, 00140$
                           00063B  1793 	C$main.c$291$4_1$223	= .
                                   1794 	.globl	C$main.c$291$4_1$223
                                   1795 ;main.c:291: return false;
      00063B AF               [ 4] 1796 	xor	a, a
      00063C C3r09r07         [16] 1797 	jp	00141$
      00063F                       1798 00140$:
                           00063F  1799 	C$main.c$286$2_1$220	= .
                                   1800 	.globl	C$main.c$286$2_1$220
                                   1801 ;main.c:286: for (int i = 0; i < numPieces; i++) {
      00063F 03               [ 8] 1802 	inc	bc
      000640 18 92            [12] 1803 	jr	00139$
      000642                       1804 00127$:
                           000642  1805 	C$main.c$296$1_1$217	= .
                                   1806 	.globl	C$main.c$296$1_1$217
                                   1807 ;main.c:296: if (abs(dx) > 2 * SQUARE_SIZE || abs(dy) > 2 * SQUARE_SIZE) {
      000642 F8 06            [12] 1808 	ldhl	sp,	#6
      000644 2A               [ 8] 1809 	ld	a, (hl+)
      000645 5F               [ 4] 1810 	ld	e, a
      000646 56               [ 8] 1811 	ld	d, (hl)
      000647 D5               [16] 1812 	push	de
      000648 CDr00r00         [24] 1813 	call	_abs
      00064B E1               [12] 1814 	pop	hl
      00064C 4B               [ 4] 1815 	ld	c, e
      00064D 42               [ 4] 1816 	ld	b, d
      00064E 58               [ 4] 1817 	ld	e, b
      00064F 16 00            [ 8] 1818 	ld	d, #0x00
      000651 3E 20            [ 8] 1819 	ld	a, #0x20
      000653 B9               [ 4] 1820 	cp	a, c
      000654 3E 00            [ 8] 1821 	ld	a, #0x00
      000656 98               [ 4] 1822 	sbc	a, b
      000657 CB 7B            [ 8] 1823 	bit	7, e
      000659 28 07            [12] 1824 	jr	Z, 00267$
      00065B CB 7A            [ 8] 1825 	bit	7, d
      00065D 20 08            [12] 1826 	jr	NZ, 00268$
      00065F BF               [ 4] 1827 	cp	a, a
      000660 18 05            [12] 1828 	jr	00268$
      000662                       1829 00267$:
      000662 CB 7A            [ 8] 1830 	bit	7, d
      000664 28 01            [12] 1831 	jr	Z, 00268$
      000666 37               [ 4] 1832 	scf
      000667                       1833 00268$:
      000667 38 27            [12] 1834 	jr	C, 00134$
      000669 F8 0C            [12] 1835 	ldhl	sp,	#12
      00066B 2A               [ 8] 1836 	ld	a, (hl+)
      00066C 5F               [ 4] 1837 	ld	e, a
      00066D 56               [ 8] 1838 	ld	d, (hl)
      00066E D5               [16] 1839 	push	de
      00066F CDr00r00         [24] 1840 	call	_abs
      000672 E1               [12] 1841 	pop	hl
      000673 4B               [ 4] 1842 	ld	c, e
      000674 42               [ 4] 1843 	ld	b, d
      000675 58               [ 4] 1844 	ld	e, b
      000676 16 00            [ 8] 1845 	ld	d, #0x00
      000678 3E 20            [ 8] 1846 	ld	a, #0x20
      00067A B9               [ 4] 1847 	cp	a, c
      00067B 3E 00            [ 8] 1848 	ld	a, #0x00
      00067D 98               [ 4] 1849 	sbc	a, b
      00067E CB 7B            [ 8] 1850 	bit	7, e
      000680 28 07            [12] 1851 	jr	Z, 00269$
      000682 CB 7A            [ 8] 1852 	bit	7, d
      000684 20 08            [12] 1853 	jr	NZ, 00270$
      000686 BF               [ 4] 1854 	cp	a, a
      000687 18 05            [12] 1855 	jr	00270$
      000689                       1856 00269$:
      000689 CB 7A            [ 8] 1857 	bit	7, d
      00068B 28 01            [12] 1858 	jr	Z, 00270$
      00068D 37               [ 4] 1859 	scf
      00068E                       1860 00270$:
      00068E 30 03            [12] 1861 	jr	NC, 00135$
      000690                       1862 00134$:
                           000690  1863 	C$main.c$297$2_1$224	= .
                                   1864 	.globl	C$main.c$297$2_1$224
                                   1865 ;main.c:297: return false;
      000690 AF               [ 4] 1866 	xor	a, a
      000691 18 76            [12] 1867 	jr	00141$
      000693                       1868 00135$:
                           000693  1869 	C$main.c$298$1_1$217	= .
                                   1870 	.globl	C$main.c$298$1_1$217
                                   1871 ;main.c:298: } else if (abs(dx) == 2 * SQUARE_SIZE || abs(dy) == 2 * SQUARE_SIZE) {
      000693 F8 06            [12] 1872 	ldhl	sp,	#6
      000695 2A               [ 8] 1873 	ld	a, (hl+)
      000696 5F               [ 4] 1874 	ld	e, a
      000697 56               [ 8] 1875 	ld	d, (hl)
      000698 D5               [16] 1876 	push	de
      000699 CDr00r00         [24] 1877 	call	_abs
      00069C E1               [12] 1878 	pop	hl
      00069D 7B               [ 4] 1879 	ld	a, e
      00069E D6 20            [ 8] 1880 	sub	a, #0x20
      0006A0 B2               [ 4] 1881 	or	a, d
      0006A1 28 10            [12] 1882 	jr	Z, 00131$
      0006A3 F8 0C            [12] 1883 	ldhl	sp,	#12
      0006A5 2A               [ 8] 1884 	ld	a, (hl+)
      0006A6 5F               [ 4] 1885 	ld	e, a
      0006A7 56               [ 8] 1886 	ld	d, (hl)
      0006A8 D5               [16] 1887 	push	de
      0006A9 CDr00r00         [24] 1888 	call	_abs
      0006AC E1               [12] 1889 	pop	hl
      0006AD 7B               [ 4] 1890 	ld	a, e
      0006AE D6 20            [ 8] 1891 	sub	a, #0x20
      0006B0 B2               [ 4] 1892 	or	a, d
      0006B1 20 54            [12] 1893 	jr	NZ, 00136$
      0006B3                       1894 00131$:
                           0006B3  1895 	C$main.c$300$2_1$225	= .
                                   1896 	.globl	C$main.c$300$2_1$225
                                   1897 ;main.c:300: UINT8 capturedX = pieces[selectedCoords].x + (dx / 2);
      0006B3 F8 08            [12] 1898 	ldhl	sp,#8
      0006B5 2A               [ 8] 1899 	ld	a, (hl+)
      0006B6 5F               [ 4] 1900 	ld	e, a
      0006B7 56               [ 8] 1901 	ld	d, (hl)
      0006B8 1A               [ 8] 1902 	ld	a, (de)
      0006B9 F8 11            [12] 1903 	ldhl	sp,	#17
      0006BB 77               [ 8] 1904 	ld	(hl), a
      0006BC F8 06            [12] 1905 	ldhl	sp,	#6
      0006BE 2A               [ 8] 1906 	ld	a, (hl+)
      0006BF 4F               [ 4] 1907 	ld	c, a
      0006C0 46               [ 8] 1908 	ld	b, (hl)
      0006C1 CB 7E            [12] 1909 	bit	7, (hl)
      0006C3 28 05            [12] 1910 	jr	Z, 00143$
      0006C5 2B               [ 8] 1911 	dec	hl
      0006C6 2A               [ 8] 1912 	ld	a, (hl+)
      0006C7 4F               [ 4] 1913 	ld	c, a
      0006C8 46               [ 8] 1914 	ld	b, (hl)
      0006C9 03               [ 8] 1915 	inc	bc
      0006CA                       1916 00143$:
      0006CA CB 28            [ 8] 1917 	sra	b
      0006CC CB 19            [ 8] 1918 	rr	c
      0006CE F8 11            [12] 1919 	ldhl	sp,	#17
      0006D0 7E               [ 8] 1920 	ld	a, (hl)
      0006D1 81               [ 4] 1921 	add	a, c
      0006D2 47               [ 4] 1922 	ld	b, a
                           0006D3  1923 	C$main.c$301$2_1$225	= .
                                   1924 	.globl	C$main.c$301$2_1$225
                                   1925 ;main.c:301: UINT8 capturedY = pieces[selectedCoords].y + (dy / 2);
      0006D3 F8 0A            [12] 1926 	ldhl	sp,#10
      0006D5 2A               [ 8] 1927 	ld	a, (hl+)
      0006D6 5F               [ 4] 1928 	ld	e, a
      0006D7 2A               [ 8] 1929 	ld	a, (hl+)
      0006D8 57               [ 4] 1930 	ld	d, a
      0006D9 1A               [ 8] 1931 	ld	a, (de)
      0006DA 4F               [ 4] 1932 	ld	c, a
      0006DB 2A               [ 8] 1933 	ld	a, (hl+)
      0006DC 5F               [ 4] 1934 	ld	e, a
      0006DD 2A               [ 8] 1935 	ld	a, (hl+)
      0006DE 57               [ 4] 1936 	ld	d, a
      0006DF 7E               [ 8] 1937 	ld	a, (hl)
      0006E0 B7               [ 4] 1938 	or	a, a
      0006E1 28 06            [12] 1939 	jr	Z, 00144$
      0006E3 2B               [ 8] 1940 	dec	hl
      0006E4 2B               [ 8] 1941 	dec	hl
      0006E5 2A               [ 8] 1942 	ld	a, (hl+)
      0006E6 5F               [ 4] 1943 	ld	e, a
      0006E7 56               [ 8] 1944 	ld	d, (hl)
      0006E8 13               [ 8] 1945 	inc	de
      0006E9                       1946 00144$:
      0006E9 CB 2A            [ 8] 1947 	sra	d
      0006EB CB 1B            [ 8] 1948 	rr	e
      0006ED 7B               [ 4] 1949 	ld	a, e
      0006EE 81               [ 4] 1950 	add	a, c
      0006EF 4F               [ 4] 1951 	ld	c, a
                           0006F0  1952 	C$main.c$302$2_1$225	= .
                                   1953 	.globl	C$main.c$302$2_1$225
                                   1954 ;main.c:302: if (checkCapture(capturedX, capturedY, opponentPieces)) {
      0006F0 F8 02            [12] 1955 	ldhl	sp,	#2
      0006F2 2A               [ 8] 1956 	ld	a, (hl+)
      0006F3 5F               [ 4] 1957 	ld	e, a
      0006F4 56               [ 8] 1958 	ld	d, (hl)
      0006F5 D5               [16] 1959 	push	de
      0006F6 59               [ 4] 1960 	ld	e, c
      0006F7 78               [ 4] 1961 	ld	a, b
      0006F8 CDrABr03         [24] 1962 	call	_checkCapture
      0006FB 4F               [ 4] 1963 	ld	c, a
      0006FC CB 41            [ 8] 1964 	bit	0, c
      0006FE 28 04            [12] 1965 	jr	Z, 00129$
                           000700  1966 	C$main.c$303$3_1$226	= .
                                   1967 	.globl	C$main.c$303$3_1$226
                                   1968 ;main.c:303: return true;
      000700 3E 01            [ 8] 1969 	ld	a, #0x01
      000702 18 05            [12] 1970 	jr	00141$
      000704                       1971 00129$:
                           000704  1972 	C$main.c$305$3_1$227	= .
                                   1973 	.globl	C$main.c$305$3_1$227
                                   1974 ;main.c:305: return false;
      000704 AF               [ 4] 1975 	xor	a, a
      000705 18 02            [12] 1976 	jr	00141$
      000707                       1977 00136$:
                           000707  1978 	C$main.c$310$1_1$217	= .
                                   1979 	.globl	C$main.c$310$1_1$217
                                   1980 ;main.c:310: return true;
      000707 3E 01            [ 8] 1981 	ld	a, #0x01
      000709                       1982 00141$:
                           000709  1983 	C$main.c$311$1_1$212	= .
                                   1984 	.globl	C$main.c$311$1_1$212
                                   1985 ;main.c:311: }
      000709 E8 14            [16] 1986 	add	sp, #20
      00070B E1               [12] 1987 	pop	hl
      00070C E8 03            [16] 1988 	add	sp, #3
      00070E E9               [ 4] 1989 	jp	(hl)
                           00070F  1990 	G$checkCollision$0$0	= .
                                   1991 	.globl	G$checkCollision$0$0
                           00070F  1992 	C$main.c$313$1_1$229	= .
                                   1993 	.globl	C$main.c$313$1_1$229
                                   1994 ;main.c:313: bool checkCollision(UINT8 cursorx, UINT8 cursory, int currentPlayer) {
                                   1995 ;	---------------------------------
                                   1996 ; Function checkCollision
                                   1997 ; ---------------------------------
      00070F                       1998 _checkCollision::
      00070F E8 F2            [16] 1999 	add	sp, #-14
      000711 F8 0D            [12] 2000 	ldhl	sp,	#13
      000713 32               [ 8] 2001 	ld	(hl-), a
      000714 73               [ 8] 2002 	ld	(hl), e
                           000715  2003 	C$main.c$318$1_0$229	= .
                                   2004 	.globl	C$main.c$318$1_0$229
                                   2005 ;main.c:318: if (currentPlayer == BLACK_PLAYER) {
      000715 F8 11            [12] 2006 	ldhl	sp,	#17
      000717 3A               [ 8] 2007 	ld	a, (hl-)
      000718 B6               [ 8] 2008 	or	a, (hl)
      000719 20 0F            [12] 2009 	jr	NZ, 00102$
                           00071B  2010 	C$main.c$319$2_0$230	= .
                                   2011 	.globl	C$main.c$319$2_0$230
                                   2012 ;main.c:319: pieces = blackPieces;
      00071B F8 00            [12] 2013 	ldhl	sp,	#0
      00071D 3Er43            [ 8] 2014 	ld	a, #<(_blackPieces)
      00071F 22               [ 8] 2015 	ld	(hl+), a
                           000720  2016 	C$main.c$320$2_0$230	= .
                                   2017 	.globl	C$main.c$320$2_0$230
                                   2018 ;main.c:320: numPieces = 12;
      000720 3Es02            [ 8] 2019 	ld	a, #>(_blackPieces)
      000722 22               [ 8] 2020 	ld	(hl+), a
      000723 3E 0C            [ 8] 2021 	ld	a, #0x0c
      000725 22               [ 8] 2022 	ld	(hl+), a
      000726 AF               [ 4] 2023 	xor	a, a
      000727 77               [ 8] 2024 	ld	(hl), a
      000728 18 0D            [12] 2025 	jr	00103$
      00072A                       2026 00102$:
                           00072A  2027 	C$main.c$322$2_0$231	= .
                                   2028 	.globl	C$main.c$322$2_0$231
                                   2029 ;main.c:322: pieces = whitePieces;
      00072A F8 00            [12] 2030 	ldhl	sp,	#0
      00072C 3Er67            [ 8] 2031 	ld	a, #<(_whitePieces)
      00072E 22               [ 8] 2032 	ld	(hl+), a
                           00072F  2033 	C$main.c$323$2_0$231	= .
                                   2034 	.globl	C$main.c$323$2_0$231
                                   2035 ;main.c:323: numPieces = 12;
      00072F 3Es02            [ 8] 2036 	ld	a, #>(_whitePieces)
      000731 22               [ 8] 2037 	ld	(hl+), a
      000732 3E 0C            [ 8] 2038 	ld	a, #0x0c
      000734 22               [ 8] 2039 	ld	(hl+), a
      000735 AF               [ 4] 2040 	xor	a, a
      000736 77               [ 8] 2041 	ld	(hl), a
      000737                       2042 00103$:
                           000737  2043 	C$main.c$327$3_0$232	= .
                                   2044 	.globl	C$main.c$327$3_0$232
                                   2045 ;main.c:327: for (int i = 0; i < numPieces; i++) {
      000737 AF               [ 4] 2046 	xor	a, a
      000738 F8 04            [12] 2047 	ldhl	sp,	#4
      00073A 22               [ 8] 2048 	ld	(hl+), a
      00073B 77               [ 8] 2049 	ld	(hl), a
      00073C 01 00 00         [12] 2050 	ld	bc, #0x0000
      00073F                       2051 00114$:
      00073F F8 02            [12] 2052 	ldhl	sp,	#2
      000741 79               [ 4] 2053 	ld	a, c
      000742 96               [ 8] 2054 	sub	a, (hl)
      000743 23               [ 8] 2055 	inc	hl
      000744 78               [ 4] 2056 	ld	a, b
      000745 9E               [ 8] 2057 	sbc	a, (hl)
      000746 78               [ 4] 2058 	ld	a, b
      000747 57               [ 4] 2059 	ld	d, a
      000748 5E               [ 8] 2060 	ld	e, (hl)
      000749 CB 7B            [ 8] 2061 	bit	7, e
      00074B 28 07            [12] 2062 	jr	Z, 00158$
      00074D CB 7A            [ 8] 2063 	bit	7, d
      00074F 20 08            [12] 2064 	jr	NZ, 00159$
      000751 BF               [ 4] 2065 	cp	a, a
      000752 18 05            [12] 2066 	jr	00159$
      000754                       2067 00158$:
      000754 CB 7A            [ 8] 2068 	bit	7, d
      000756 28 01            [12] 2069 	jr	Z, 00159$
      000758 37               [ 4] 2070 	scf
      000759                       2071 00159$:
      000759 D2r0Cr08         [16] 2072 	jp	NC, 00112$
                           00075C  2073 	C$main.c$328$3_0$233	= .
                                   2074 	.globl	C$main.c$328$3_0$233
                                   2075 ;main.c:328: UINT8 pieceX = pieces[i].x;
      00075C 69               [ 4] 2076 	ld	l, c
      00075D 60               [ 4] 2077 	ld	h, b
      00075E 29               [ 8] 2078 	add	hl, hl
      00075F 09               [ 8] 2079 	add	hl, bc
      000760 E5               [16] 2080 	push	hl
      000761 7D               [ 4] 2081 	ld	a, l
      000762 F8 0C            [12] 2082 	ldhl	sp,	#12
      000764 77               [ 8] 2083 	ld	(hl), a
      000765 E1               [12] 2084 	pop	hl
      000766 7C               [ 4] 2085 	ld	a, h
      000767 F8 0B            [12] 2086 	ldhl	sp,	#11
      000769 32               [ 8] 2087 	ld	(hl-), a
      00076A 2A               [ 8] 2088 	ld	a, (hl+)
      00076B 5F               [ 4] 2089 	ld	e, a
      00076C 56               [ 8] 2090 	ld	d, (hl)
      00076D E1               [12] 2091 	pop	hl
      00076E E5               [16] 2092 	push	hl
      00076F 19               [ 8] 2093 	add	hl, de
      000770 5D               [ 4] 2094 	ld	e, l
      000771 54               [ 4] 2095 	ld	d, h
      000772 1A               [ 8] 2096 	ld	a, (de)
      000773 6F               [ 4] 2097 	ld	l, a
                                   2098 ;	spillPairReg hl
                                   2099 ;	spillPairReg hl
                           000774  2100 	C$main.c$329$3_0$233	= .
                                   2101 	.globl	C$main.c$329$3_0$233
                                   2102 ;main.c:329: UINT8 pieceY = pieces[i].y;
      000774 13               [ 8] 2103 	inc	de
      000775 1A               [ 8] 2104 	ld	a, (de)
      000776 5F               [ 4] 2105 	ld	e, a
                           000777  2106 	C$main.c$332$3_0$233	= .
                                   2107 	.globl	C$main.c$332$3_0$233
                                   2108 ;main.c:332: UINT8 pieceLeft = pieceX - 4;
      000777 7D               [ 4] 2109 	ld	a, l
      000778 C6 FC            [ 8] 2110 	add	a, #0xfc
      00077A 57               [ 4] 2111 	ld	d, a
                           00077B  2112 	C$main.c$333$3_0$233	= .
                                   2113 	.globl	C$main.c$333$3_0$233
                                   2114 ;main.c:333: UINT8 pieceRight = pieceX + 4;
      00077B 7D               [ 4] 2115 	ld	a, l
      00077C C6 04            [ 8] 2116 	add	a, #0x04
      00077E F8 06            [12] 2117 	ldhl	sp,	#6
                           000780  2118 	C$main.c$334$3_0$233	= .
                                   2119 	.globl	C$main.c$334$3_0$233
                                   2120 ;main.c:334: UINT8 pieceTop = pieceY - 4;
      000780 22               [ 8] 2121 	ld	(hl+), a
      000781 7B               [ 4] 2122 	ld	a, e
      000782 C6 FC            [ 8] 2123 	add	a, #0xfc
                           000784  2124 	C$main.c$335$3_0$233	= .
                                   2125 	.globl	C$main.c$335$3_0$233
                                   2126 ;main.c:335: UINT8 pieceBottom = pieceY + 4;
      000784 22               [ 8] 2127 	ld	(hl+), a
      000785 7B               [ 4] 2128 	ld	a, e
      000786 C6 04            [ 8] 2129 	add	a, #0x04
      000788 77               [ 8] 2130 	ld	(hl), a
                           000789  2131 	C$main.c$338$3_0$233	= .
                                   2132 	.globl	C$main.c$338$3_0$233
                                   2133 ;main.c:338: UINT8 cursorLeft = cursorx - 4;
      000789 F8 0D            [12] 2134 	ldhl	sp,	#13
      00078B 5E               [ 8] 2135 	ld	e, (hl)
      00078C 7B               [ 4] 2136 	ld	a, e
      00078D C6 FC            [ 8] 2137 	add	a, #0xfc
      00078F F8 09            [12] 2138 	ldhl	sp,	#9
                           000791  2139 	C$main.c$339$3_0$233	= .
                                   2140 	.globl	C$main.c$339$3_0$233
                                   2141 ;main.c:339: UINT8 cursorRight = cursorx + 4;
      000791 22               [ 8] 2142 	ld	(hl+), a
      000792 7B               [ 4] 2143 	ld	a, e
      000793 C6 04            [ 8] 2144 	add	a, #0x04
                           000795  2145 	C$main.c$340$3_0$233	= .
                                   2146 	.globl	C$main.c$340$3_0$233
                                   2147 ;main.c:340: UINT8 cursorTop = cursory - 4;
      000795 22               [ 8] 2148 	ld	(hl+), a
      000796 23               [ 8] 2149 	inc	hl
      000797 6E               [ 8] 2150 	ld	l, (hl)
                                   2151 ;	spillPairReg hl
                                   2152 ;	spillPairReg hl
      000798 7D               [ 4] 2153 	ld	a, l
      000799 C6 FC            [ 8] 2154 	add	a, #0xfc
      00079B 5F               [ 4] 2155 	ld	e, a
                           00079C  2156 	C$main.c$341$3_0$233	= .
                                   2157 	.globl	C$main.c$341$3_0$233
                                   2158 ;main.c:341: UINT8 cursorBottom = cursory + 4;
      00079C 7D               [ 4] 2159 	ld	a, l
      00079D C6 04            [ 8] 2160 	add	a, #0x04
      00079F F8 0B            [12] 2161 	ldhl	sp,	#11
      0007A1 77               [ 8] 2162 	ld	(hl), a
                           0007A2  2163 	C$main.c$344$3_0$233	= .
                                   2164 	.globl	C$main.c$344$3_0$233
                                   2165 ;main.c:344: if (cursorLeft <= pieceRight && cursorRight >= pieceLeft &&
      0007A2 F8 06            [12] 2166 	ldhl	sp,	#6
      0007A4 7E               [ 8] 2167 	ld	a, (hl)
      0007A5 F8 09            [12] 2168 	ldhl	sp,	#9
      0007A7 96               [ 8] 2169 	sub	a, (hl)
      0007A8 38 59            [12] 2170 	jr	C, 00115$
      0007AA 23               [ 8] 2171 	inc	hl
      0007AB 7E               [ 8] 2172 	ld	a, (hl)
      0007AC 92               [ 4] 2173 	sub	a, d
      0007AD 38 54            [12] 2174 	jr	C, 00115$
                           0007AF  2175 	C$main.c$345$3_0$233	= .
                                   2176 	.globl	C$main.c$345$3_0$233
                                   2177 ;main.c:345: cursorTop <= pieceBottom && cursorBottom >= pieceTop) {
      0007AF 2B               [ 8] 2178 	dec	hl
      0007B0 2B               [ 8] 2179 	dec	hl
      0007B1 7E               [ 8] 2180 	ld	a, (hl)
      0007B2 93               [ 4] 2181 	sub	a, e
      0007B3 38 4E            [12] 2182 	jr	C, 00115$
      0007B5 F8 0B            [12] 2183 	ldhl	sp,	#11
      0007B7 7E               [ 8] 2184 	ld	a, (hl)
      0007B8 F8 07            [12] 2185 	ldhl	sp,	#7
      0007BA 96               [ 8] 2186 	sub	a, (hl)
      0007BB 38 46            [12] 2187 	jr	C, 00115$
                           0007BD  2188 	C$main.c$346$4_0$234	= .
                                   2189 	.globl	C$main.c$346$4_0$234
                                   2190 ;main.c:346: if (currentPlayer == BLACK_PLAYER) {
      0007BD F8 11            [12] 2191 	ldhl	sp,	#17
      0007BF 3A               [ 8] 2192 	ld	a, (hl-)
      0007C0 B6               [ 8] 2193 	or	a, (hl)
      0007C1 20 1F            [12] 2194 	jr	NZ, 00105$
                           0007C3  2195 	C$main.c$347$5_0$235	= .
                                   2196 	.globl	C$main.c$347$5_0$235
                                   2197 ;main.c:347: selectedCoords = i;
      0007C3 F8 04            [12] 2198 	ldhl	sp,	#4
      0007C5 7E               [ 8] 2199 	ld	a, (hl)
      0007C6 EAr08r00         [16] 2200 	ld	(#_selectedCoords),a
      0007C9 F8 05            [12] 2201 	ldhl	sp,	#5
      0007CB 7E               [ 8] 2202 	ld	a, (hl)
      0007CC EAr09r00         [16] 2203 	ld	(#_selectedCoords + 1),a
                           0007CF  2204 	C$main.c$348$5_0$235	= .
                                   2205 	.globl	C$main.c$348$5_0$235
                                   2206 ;main.c:348: selectedPieceIndex = i + 4;
      0007CF F8 04            [12] 2207 	ldhl	sp,#4
      0007D1 2A               [ 8] 2208 	ld	a, (hl+)
      0007D2 5F               [ 4] 2209 	ld	e, a
      0007D3 56               [ 8] 2210 	ld	d, (hl)
      0007D4 21 04 00         [12] 2211 	ld	hl, #0x0004
      0007D7 19               [ 8] 2212 	add	hl, de
      0007D8 5D               [ 4] 2213 	ld	e, l
      0007D9 54               [ 4] 2214 	ld	d, h
      0007DA 21r03r00         [12] 2215 	ld	hl, #_selectedPieceIndex
      0007DD 7B               [ 4] 2216 	ld	a, e
      0007DE 22               [ 8] 2217 	ld	(hl+), a
      0007DF 72               [ 8] 2218 	ld	(hl), d
      0007E0 18 1D            [12] 2219 	jr	00106$
      0007E2                       2220 00105$:
                           0007E2  2221 	C$main.c$350$5_0$236	= .
                                   2222 	.globl	C$main.c$350$5_0$236
                                   2223 ;main.c:350: selectedCoords = i;
      0007E2 F8 04            [12] 2224 	ldhl	sp,	#4
      0007E4 7E               [ 8] 2225 	ld	a, (hl)
      0007E5 EAr08r00         [16] 2226 	ld	(#_selectedCoords),a
      0007E8 F8 05            [12] 2227 	ldhl	sp,	#5
      0007EA 7E               [ 8] 2228 	ld	a, (hl)
      0007EB EAr09r00         [16] 2229 	ld	(#_selectedCoords + 1),a
                           0007EE  2230 	C$main.c$351$5_0$236	= .
                                   2231 	.globl	C$main.c$351$5_0$236
                                   2232 ;main.c:351: selectedPieceIndex = i + 16;
      0007EE F8 04            [12] 2233 	ldhl	sp,#4
      0007F0 2A               [ 8] 2234 	ld	a, (hl+)
      0007F1 5F               [ 4] 2235 	ld	e, a
      0007F2 56               [ 8] 2236 	ld	d, (hl)
      0007F3 21 10 00         [12] 2237 	ld	hl, #0x0010
      0007F6 19               [ 8] 2238 	add	hl, de
      0007F7 5D               [ 4] 2239 	ld	e, l
      0007F8 54               [ 4] 2240 	ld	d, h
      0007F9 21r03r00         [12] 2241 	ld	hl, #_selectedPieceIndex
      0007FC 7B               [ 4] 2242 	ld	a, e
      0007FD 22               [ 8] 2243 	ld	(hl+), a
      0007FE 72               [ 8] 2244 	ld	(hl), d
      0007FF                       2245 00106$:
                           0007FF  2246 	C$main.c$353$4_0$234	= .
                                   2247 	.globl	C$main.c$353$4_0$234
                                   2248 ;main.c:353: return true;
      0007FF 3E 01            [ 8] 2249 	ld	a, #0x01
      000801 18 12            [12] 2250 	jr	00116$
      000803                       2251 00115$:
                           000803  2252 	C$main.c$327$2_0$232	= .
                                   2253 	.globl	C$main.c$327$2_0$232
                                   2254 ;main.c:327: for (int i = 0; i < numPieces; i++) {
      000803 03               [ 8] 2255 	inc	bc
      000804 F8 04            [12] 2256 	ldhl	sp,	#4
      000806 79               [ 4] 2257 	ld	a, c
      000807 22               [ 8] 2258 	ld	(hl+), a
      000808 70               [ 8] 2259 	ld	(hl), b
      000809 C3r3Fr07         [16] 2260 	jp	00114$
      00080C                       2261 00112$:
                           00080C  2262 	C$main.c$357$1_0$229	= .
                                   2263 	.globl	C$main.c$357$1_0$229
                                   2264 ;main.c:357: selectedPieceIndex = -1;
      00080C 21r03r00         [12] 2265 	ld	hl, #_selectedPieceIndex
      00080F 3E FF            [ 8] 2266 	ld	a, #0xff
      000811 22               [ 8] 2267 	ld	(hl+), a
      000812 36 FF            [12] 2268 	ld	(hl), #0xff
                           000814  2269 	C$main.c$358$1_0$229	= .
                                   2270 	.globl	C$main.c$358$1_0$229
                                   2271 ;main.c:358: return false;
      000814 AF               [ 4] 2272 	xor	a, a
      000815                       2273 00116$:
                           000815  2274 	C$main.c$359$1_0$229	= .
                                   2275 	.globl	C$main.c$359$1_0$229
                                   2276 ;main.c:359: }
      000815 E8 0E            [16] 2277 	add	sp, #14
      000817 E1               [12] 2278 	pop	hl
      000818 C1               [12] 2279 	pop	bc
      000819 E9               [ 4] 2280 	jp	(hl)
                           00081A  2281 	G$main$0$0	= .
                                   2282 	.globl	G$main$0$0
                           00081A  2283 	C$main.c$361$1_0$237	= .
                                   2284 	.globl	C$main.c$361$1_0$237
                                   2285 ;main.c:361: void main() {
                                   2286 ;	---------------------------------
                                   2287 ; Function main
                                   2288 ; ---------------------------------
      00081A                       2289 _main::
      00081A 3B               [ 8] 2290 	dec	sp
      00081B 3B               [ 8] 2291 	dec	sp
                           00081C  2292 	C$main.c$362$1_0$237	= .
                                   2293 	.globl	C$main.c$362$1_0$237
                                   2294 ;main.c:362: font();
      00081C CDr7Dr00         [24] 2295 	call	_font
                           00081F  2296 	C$main.c$363$1_0$237	= .
                                   2297 	.globl	C$main.c$363$1_0$237
                                   2298 ;main.c:363: printTurn();
      00081F CDr8Er00         [24] 2299 	call	_printTurn
                           000822  2300 	C$main.c$364$1_0$237	= .
                                   2301 	.globl	C$main.c$364$1_0$237
                                   2302 ;main.c:364: printbkg();
      000822 CDrC1r00         [24] 2303 	call	_printbkg
                           000825  2304 	C$main.c$365$1_0$237	= .
                                   2305 	.globl	C$main.c$365$1_0$237
                                   2306 ;main.c:365: printSquare();
      000825 CDrF9r00         [24] 2307 	call	_printSquare
                           000828  2308 	C$main.c$366$1_0$237	= .
                                   2309 	.globl	C$main.c$366$1_0$237
                                   2310 ;main.c:366: printBlack();
      000828 CDr47r01         [24] 2311 	call	_printBlack
                           00082B  2312 	C$main.c$367$1_0$237	= .
                                   2313 	.globl	C$main.c$367$1_0$237
                                   2314 ;main.c:367: printWhite();
      00082B CDr3Cr02         [24] 2315 	call	_printWhite
                           00082E  2316 	C$main.c$368$1_0$237	= .
                                   2317 	.globl	C$main.c$368$1_0$237
                                   2318 ;main.c:368: SHOW_BKG;  
      00082E F0r00            [12] 2319 	ldh	a, (_LCDC_REG + 0)
      000830 F6 01            [ 8] 2320 	or	a, #0x01
      000832 E0r00            [12] 2321 	ldh	(_LCDC_REG + 0), a
                           000834  2322 	C$main.c$369$1_0$237	= .
                                   2323 	.globl	C$main.c$369$1_0$237
                                   2324 ;main.c:369: SHOW_SPRITES;
      000834 F0r00            [12] 2325 	ldh	a, (_LCDC_REG + 0)
      000836 F6 02            [ 8] 2326 	or	a, #0x02
      000838 E0r00            [12] 2327 	ldh	(_LCDC_REG + 0), a
                           00083A  2328 	C$main.c$370$1_0$237	= .
                                   2329 	.globl	C$main.c$370$1_0$237
                                   2330 ;main.c:370: SHOW_WIN;
      00083A F0r00            [12] 2331 	ldh	a, (_LCDC_REG + 0)
      00083C F6 20            [ 8] 2332 	or	a, #0x20
      00083E E0r00            [12] 2333 	ldh	(_LCDC_REG + 0), a
                           000840  2334 	C$main.c$372$1_1$238	= .
                                   2335 	.globl	C$main.c$372$1_1$238
                                   2336 ;main.c:372: while(1) {
      000840                       2337 00139$:
                           000840  2338 	C$main.c$373$2_1$239	= .
                                   2339 	.globl	C$main.c$373$2_1$239
                                   2340 ;main.c:373: joypad_input = joypad();
      000840 CDr00r00         [24] 2341 	call	_joypad
      000843 21r00r00         [12] 2342 	ld	hl, #_joypad_input
      000846 77               [ 8] 2343 	ld	(hl), a
                           000847  2344 	C$main.c$375$2_1$239	= .
                                   2345 	.globl	C$main.c$375$2_1$239
                                   2346 ;main.c:375: if (joypad_input != lastButtonState) {
      000847 7E               [ 8] 2347 	ld	a, (hl)
      000848 21r00r00         [12] 2348 	ld	hl, #_lastButtonState
      00084B 96               [ 8] 2349 	sub	a, (hl)
      00084C 28 0E            [12] 2350 	jr	Z, 00104$
                           00084E  2351 	C$main.c$376$3_1$240	= .
                                   2352 	.globl	C$main.c$376$3_1$240
                                   2353 ;main.c:376: debounceTimer = 0; // Reset the debounce timer
      00084E AF               [ 4] 2354 	xor	a, a
      00084F 21r01r00         [12] 2355 	ld	hl, #_debounceTimer
      000852 22               [ 8] 2356 	ld	(hl+), a
      000853 77               [ 8] 2357 	ld	(hl), a
                           000854  2358 	C$main.c$377$3_1$240	= .
                                   2359 	.globl	C$main.c$377$3_1$240
                                   2360 ;main.c:377: lastButtonState = joypad_input;
      000854 FAr00r00         [16] 2361 	ld	a, (#_joypad_input)
      000857 EAr00r00         [16] 2362 	ld	(#_lastButtonState),a
      00085A 18 16            [12] 2363 	jr	00105$
      00085C                       2364 00104$:
                           00085C  2365 	C$main.c$378$2_1$239	= .
                                   2366 	.globl	C$main.c$378$2_1$239
                                   2367 ;main.c:378: } else if (debounceTimer < DEBOUNCE_DELAY) {
      00085C 21r01r00         [12] 2368 	ld	hl, #_debounceTimer
      00085F 2A               [ 8] 2369 	ld	a, (hl+)
      000860 D6 06            [ 8] 2370 	sub	a, #0x06
      000862 7E               [ 8] 2371 	ld	a, (hl)
      000863 DE 00            [ 8] 2372 	sbc	a, #0x00
      000865 30 0B            [12] 2373 	jr	NC, 00105$
                           000867  2374 	C$main.c$379$3_1$241	= .
                                   2375 	.globl	C$main.c$379$3_1$241
                                   2376 ;main.c:379: debounceTimer += 100; // Increment the debounce timer based on the loop delay (100ms in this code)
      000867 2B               [ 8] 2377 	dec	hl
      000868 7E               [ 8] 2378 	ld	a, (hl)
      000869 C6 64            [ 8] 2379 	add	a, #0x64
      00086B 22               [ 8] 2380 	ld	(hl+), a
      00086C 7E               [ 8] 2381 	ld	a, (hl)
      00086D CE 00            [ 8] 2382 	adc	a, #0x00
      00086F 77               [ 8] 2383 	ld	(hl), a
                           000870  2384 	C$main.c$380$3_1$241	= .
                                   2385 	.globl	C$main.c$380$3_1$241
                                   2386 ;main.c:380: continue; // Skip processing input until the debounce delay is reached
      000870 18 CE            [12] 2387 	jr	00139$
      000872                       2388 00105$:
                           000872  2389 	C$main.c$383$2_1$239	= .
                                   2390 	.globl	C$main.c$383$2_1$239
                                   2391 ;main.c:383: dpad();
      000872 CDr49r00         [24] 2392 	call	_dpad
                           000875  2393 	C$main.c$384$2_1$239	= .
                                   2394 	.globl	C$main.c$384$2_1$239
                                   2395 ;main.c:384: if (joypad_input & J_A) {
      000875 FAr00r00         [16] 2396 	ld	a, (#_joypad_input)
      000878 CB 67            [ 8] 2397 	bit	4, a
      00087A CAr0Cr09         [16] 2398 	jp	Z,00135$
                           00087D  2399 	C$main.c$385$3_1$242	= .
                                   2400 	.globl	C$main.c$385$3_1$242
                                   2401 ;main.c:385: if (pieceSelected == false) {
      00087D 21r0Ar00         [12] 2402 	ld	hl, #_pieceSelected
      000880 CB 46            [12] 2403 	bit	0, (hl)
      000882 C2r0Cr09         [16] 2404 	jp	NZ, 00135$
                           000885  2405 	C$main.c$386$4_1$243	= .
                                   2406 	.globl	C$main.c$386$4_1$243
                                   2407 ;main.c:386: checkCollision(cursorx, cursory, currentPlayer);
      000885 21r07r00         [12] 2408 	ld	hl, #_currentPlayer
      000888 4E               [ 8] 2409 	ld	c, (hl)
      000889 06 00            [ 8] 2410 	ld	b, #0x00
      00088B C5               [16] 2411 	push	bc
      00088C 21r06r00         [12] 2412 	ld	hl, #_cursory
      00088F 5E               [ 8] 2413 	ld	e, (hl)
      000890 FAr05r00         [16] 2414 	ld	a, (#_cursorx)
      000893 CDr0Fr07         [24] 2415 	call	_checkCollision
                           000896  2416 	C$main.c$388$1_1$237	= .
                                   2417 	.globl	C$main.c$388$1_1$237
                                   2418 ;main.c:388: if (selectedPieceIndex >= 4 && selectedPieceIndex < 16){
      000896 21r03r00         [12] 2419 	ld	hl, #_selectedPieceIndex
      000899 2A               [ 8] 2420 	ld	a, (hl+)
      00089A D6 10            [ 8] 2421 	sub	a, #0x10
      00089C 7E               [ 8] 2422 	ld	a, (hl)
      00089D DE 00            [ 8] 2423 	sbc	a, #0x00
      00089F 56               [ 8] 2424 	ld	d, (hl)
      0008A0 3E 00            [ 8] 2425 	ld	a, #0x00
      0008A2 CB 7F            [ 8] 2426 	bit	7,a
      0008A4 28 07            [12] 2427 	jr	Z, 00236$
      0008A6 CB 7A            [ 8] 2428 	bit	7, d
      0008A8 20 08            [12] 2429 	jr	NZ, 00237$
      0008AA BF               [ 4] 2430 	cp	a, a
      0008AB 18 05            [12] 2431 	jr	00237$
      0008AD                       2432 00236$:
      0008AD CB 7A            [ 8] 2433 	bit	7, d
      0008AF 28 01            [12] 2434 	jr	Z, 00237$
      0008B1 37               [ 4] 2435 	scf
      0008B2                       2436 00237$:
      0008B2 3E 00            [ 8] 2437 	ld	a, #0x00
      0008B4 17               [ 4] 2438 	rla
      0008B5 4F               [ 4] 2439 	ld	c, a
                           0008B6  2440 	C$main.c$387$4_1$243	= .
                                   2441 	.globl	C$main.c$387$4_1$243
                                   2442 ;main.c:387: if (currentPlayer == BLACK_PLAYER) {
      0008B6 FAr07r00         [16] 2443 	ld	a, (#_currentPlayer)
      0008B9 B7               [ 4] 2444 	or	a, a
      0008BA 20 29            [12] 2445 	jr	NZ, 00113$
                           0008BC  2446 	C$main.c$388$5_1$244	= .
                                   2447 	.globl	C$main.c$388$5_1$244
                                   2448 ;main.c:388: if (selectedPieceIndex >= 4 && selectedPieceIndex < 16){
      0008BC 21r03r00         [12] 2449 	ld	hl, #_selectedPieceIndex
      0008BF 2A               [ 8] 2450 	ld	a, (hl+)
      0008C0 D6 04            [ 8] 2451 	sub	a, #0x04
      0008C2 7E               [ 8] 2452 	ld	a, (hl)
      0008C3 DE 00            [ 8] 2453 	sbc	a, #0x00
      0008C5 56               [ 8] 2454 	ld	d, (hl)
      0008C6 3E 00            [ 8] 2455 	ld	a, #0x00
      0008C8 CB 7F            [ 8] 2456 	bit	7,a
      0008CA 28 07            [12] 2457 	jr	Z, 00238$
      0008CC CB 7A            [ 8] 2458 	bit	7, d
      0008CE 20 08            [12] 2459 	jr	NZ, 00239$
      0008D0 BF               [ 4] 2460 	cp	a, a
      0008D1 18 05            [12] 2461 	jr	00239$
      0008D3                       2462 00238$:
      0008D3 CB 7A            [ 8] 2463 	bit	7, d
      0008D5 28 01            [12] 2464 	jr	Z, 00239$
      0008D7 37               [ 4] 2465 	scf
      0008D8                       2466 00239$:
      0008D8 38 32            [12] 2467 	jr	C, 00135$
      0008DA 79               [ 4] 2468 	ld	a, c
      0008DB B7               [ 4] 2469 	or	a, a
      0008DC 28 2E            [12] 2470 	jr	Z, 00135$
                           0008DE  2471 	C$main.c$389$6_1$245	= .
                                   2472 	.globl	C$main.c$389$6_1$245
                                   2473 ;main.c:389: pieceSelected = true;
      0008DE 21r0Ar00         [12] 2474 	ld	hl, #_pieceSelected
      0008E1 36 01            [12] 2475 	ld	(hl), #0x01
      0008E3 18 27            [12] 2476 	jr	00135$
      0008E5                       2477 00113$:
                           0008E5  2478 	C$main.c$391$4_1$243	= .
                                   2479 	.globl	C$main.c$391$4_1$243
                                   2480 ;main.c:391: } else if (selectedPieceIndex >= 16 && selectedPieceIndex < 28) {
      0008E5 CB 41            [ 8] 2481 	bit	0, c
      0008E7 20 23            [12] 2482 	jr	NZ, 00135$
      0008E9 21r03r00         [12] 2483 	ld	hl, #_selectedPieceIndex
      0008EC 2A               [ 8] 2484 	ld	a, (hl+)
      0008ED D6 1C            [ 8] 2485 	sub	a, #0x1c
      0008EF 7E               [ 8] 2486 	ld	a, (hl)
      0008F0 DE 00            [ 8] 2487 	sbc	a, #0x00
      0008F2 56               [ 8] 2488 	ld	d, (hl)
      0008F3 3E 00            [ 8] 2489 	ld	a, #0x00
      0008F5 CB 7F            [ 8] 2490 	bit	7,a
      0008F7 28 07            [12] 2491 	jr	Z, 00240$
      0008F9 CB 7A            [ 8] 2492 	bit	7, d
      0008FB 20 08            [12] 2493 	jr	NZ, 00241$
      0008FD BF               [ 4] 2494 	cp	a, a
      0008FE 18 05            [12] 2495 	jr	00241$
      000900                       2496 00240$:
      000900 CB 7A            [ 8] 2497 	bit	7, d
      000902 28 01            [12] 2498 	jr	Z, 00241$
      000904 37               [ 4] 2499 	scf
      000905                       2500 00241$:
      000905 30 05            [12] 2501 	jr	NC, 00135$
                           000907  2502 	C$main.c$392$5_1$246	= .
                                   2503 	.globl	C$main.c$392$5_1$246
                                   2504 ;main.c:392: pieceSelected = true;
      000907 21r0Ar00         [12] 2505 	ld	hl, #_pieceSelected
      00090A 36 01            [12] 2506 	ld	(hl), #0x01
                           00090C  2507 	C$main.c$396$2_1$239	= .
                                   2508 	.globl	C$main.c$396$2_1$239
                                   2509 ;main.c:396: while (pieceSelected == true) {
      00090C                       2510 00135$:
      00090C 21r0Ar00         [12] 2511 	ld	hl, #_pieceSelected
      00090F CB 46            [12] 2512 	bit	0, (hl)
      000911 CArE0r09         [16] 2513 	jp	Z, 00137$
                           000914  2514 	C$main.c$397$3_1$247	= .
                                   2515 	.globl	C$main.c$397$3_1$247
                                   2516 ;main.c:397: delay(100);
      000914 11 64 00         [12] 2517 	ld	de, #0x0064
      000917 CDr00r00         [24] 2518 	call	_delay
                           00091A  2519 	C$main.c$398$3_1$247	= .
                                   2520 	.globl	C$main.c$398$3_1$247
                                   2521 ;main.c:398: joypad_input = joypad(); // Update the input inside the loop
      00091A CDr00r00         [24] 2522 	call	_joypad
      00091D EAr00r00         [16] 2523 	ld	(#_joypad_input),a
                           000920  2524 	C$main.c$399$3_1$247	= .
                                   2525 	.globl	C$main.c$399$3_1$247
                                   2526 ;main.c:399: dpad();
      000920 CDr49r00         [24] 2527 	call	_dpad
                                   2528 ;main.c:400: move_sprite(selectedPieceIndex, cursorx, cursory);
      000923 21r06r00         [12] 2529 	ld	hl, #_cursory
      000926 46               [ 8] 2530 	ld	b, (hl)
      000927 21r05r00         [12] 2531 	ld	hl, #_cursorx
      00092A 4E               [ 8] 2532 	ld	c, (hl)
      00092B 21r03r00         [12] 2533 	ld	hl, #_selectedPieceIndex
                                   2534 ;c:/gbdk/include/gb/gb.h:1675: OAM_item_t * itm = &shadow_OAM[nb];
      00092E 6E               [ 8] 2535 	ld	l, (hl)
                                   2536 ;	spillPairReg hl
                                   2537 ;	spillPairReg hl
      00092F 26 00            [ 8] 2538 	ld	h, #0x00
                                   2539 ;	spillPairReg hl
                                   2540 ;	spillPairReg hl
      000931 29               [ 8] 2541 	add	hl, hl
      000932 29               [ 8] 2542 	add	hl, hl
      000933 11r00r00         [12] 2543 	ld	de, #_shadow_OAM
      000936 19               [ 8] 2544 	add	hl, de
                                   2545 ;c:/gbdk/include/gb/gb.h:1676: itm->y=y, itm->x=x;
      000937 78               [ 4] 2546 	ld	a, b
      000938 22               [ 8] 2547 	ld	(hl+), a
      000939 71               [ 8] 2548 	ld	(hl), c
                           00093A  2549 	C$main.c$377$1_1$237	= .
                                   2550 	.globl	C$main.c$377$1_1$237
                                   2551 ;main.c:377: lastButtonState = joypad_input;
      00093A FAr00r00         [16] 2552 	ld	a, (#_joypad_input)
                           00093D  2553 	C$main.c$401$3_1$247	= .
                                   2554 	.globl	C$main.c$401$3_1$247
                                   2555 ;main.c:401: if (joypad_input & J_A) {
      00093D CB 67            [ 8] 2556 	bit	4, a
      00093F CArD0r09         [16] 2557 	jp	Z,00132$
                           000942  2558 	C$main.c$402$4_1$248	= .
                                   2559 	.globl	C$main.c$402$4_1$248
                                   2560 ;main.c:402: if (currentPlayer == BLACK_PLAYER){
      000942 FAr07r00         [16] 2561 	ld	a, (#_currentPlayer)
      000945 B7               [ 4] 2562 	or	a, a
      000946 20 09            [12] 2563 	jr	NZ, 00120$
                           000948  2564 	C$main.c$403$5_1$249	= .
                                   2565 	.globl	C$main.c$403$5_1$249
                                   2566 ;main.c:403: input = blackPieces;
      000948 F8 00            [12] 2567 	ldhl	sp,	#0
      00094A 36r43            [12] 2568 	ld	(hl), #<(_blackPieces)
      00094C 23               [ 8] 2569 	inc	hl
      00094D 36s02            [12] 2570 	ld	(hl), #>(_blackPieces)
      00094F 18 07            [12] 2571 	jr	00121$
      000951                       2572 00120$:
                           000951  2573 	C$main.c$405$5_1$250	= .
                                   2574 	.globl	C$main.c$405$5_1$250
                                   2575 ;main.c:405: input = whitePieces;
      000951 F8 00            [12] 2576 	ldhl	sp,	#0
      000953 3Er67            [ 8] 2577 	ld	a, #<(_whitePieces)
      000955 22               [ 8] 2578 	ld	(hl+), a
      000956 36s02            [12] 2579 	ld	(hl), #>(_whitePieces)
      000958                       2580 00121$:
                           000958  2581 	C$main.c$407$4_1$248	= .
                                   2582 	.globl	C$main.c$407$4_1$248
                                   2583 ;main.c:407: if (cursorx == input[selectedCoords].x && cursory == input[selectedCoords].y){
      000958 21r08r00         [12] 2584 	ld	hl, #_selectedCoords
      00095B 2A               [ 8] 2585 	ld	a, (hl+)
      00095C 4F               [ 4] 2586 	ld	c, a
      00095D 46               [ 8] 2587 	ld	b, (hl)
      00095E 69               [ 4] 2588 	ld	l, c
      00095F 60               [ 4] 2589 	ld	h, b
      000960 29               [ 8] 2590 	add	hl, hl
      000961 09               [ 8] 2591 	add	hl, bc
      000962 4D               [ 4] 2592 	ld	c, l
      000963 44               [ 4] 2593 	ld	b, h
      000964 E1               [12] 2594 	pop	hl
      000965 E5               [16] 2595 	push	hl
      000966 09               [ 8] 2596 	add	hl, bc
      000967 4D               [ 4] 2597 	ld	c, l
      000968 44               [ 4] 2598 	ld	b, h
      000969 0A               [ 8] 2599 	ld	a, (bc)
      00096A 5F               [ 4] 2600 	ld	e, a
      00096B FAr05r00         [16] 2601 	ld	a, (#_cursorx)
      00096E 93               [ 4] 2602 	sub	a, e
      00096F 20 09            [12] 2603 	jr	NZ, 00128$
      000971 03               [ 8] 2604 	inc	bc
      000972 0A               [ 8] 2605 	ld	a, (bc)
      000973 4F               [ 4] 2606 	ld	c, a
      000974 FAr06r00         [16] 2607 	ld	a, (#_cursory)
      000977 91               [ 4] 2608 	sub	a, c
      000978 28 51            [12] 2609 	jr	Z, 00129$
      00097A                       2610 00128$:
                           00097A  2611 	C$main.c$410$5_1$252	= .
                                   2612 	.globl	C$main.c$410$5_1$252
                                   2613 ;main.c:410: if (isValidMove(cursorx, cursory, currentPlayer, selectedCoords)) {
      00097A 21r08r00         [12] 2614 	ld	hl, #_selectedCoords
      00097D 2A               [ 8] 2615 	ld	a, (hl+)
      00097E 5F               [ 4] 2616 	ld	e, a
      00097F 56               [ 8] 2617 	ld	d, (hl)
      000980 D5               [16] 2618 	push	de
      000981 FAr07r00         [16] 2619 	ld	a, (#_currentPlayer)
      000984 F5               [16] 2620 	push	af
      000985 33               [ 8] 2621 	inc	sp
      000986 21r06r00         [12] 2622 	ld	hl, #_cursory
      000989 5E               [ 8] 2623 	ld	e, (hl)
      00098A FAr05r00         [16] 2624 	ld	a, (#_cursorx)
      00098D CDr5Cr04         [24] 2625 	call	_isValidMove
      000990 CB 47            [ 8] 2626 	bit	0,a
      000992 28 37            [12] 2627 	jr	Z, 00129$
                           000994  2628 	C$main.c$411$6_1$253	= .
                                   2629 	.globl	C$main.c$411$6_1$253
                                   2630 ;main.c:411: modifyCoordinates(input, selectedCoords, cursorx, cursory);
      000994 21r06r00         [12] 2631 	ld	hl, #_cursory
      000997 4E               [ 8] 2632 	ld	c, (hl)
      000998 06 00            [ 8] 2633 	ld	b, #0x00
      00099A 21r05r00         [12] 2634 	ld	hl, #_cursorx
      00099D 5E               [ 8] 2635 	ld	e, (hl)
      00099E 16 00            [ 8] 2636 	ld	d, #0x00
      0009A0 C5               [16] 2637 	push	bc
      0009A1 D5               [16] 2638 	push	de
      0009A2 21r08r00         [12] 2639 	ld	hl, #_selectedCoords
      0009A5 2A               [ 8] 2640 	ld	a, (hl+)
      0009A6 4F               [ 4] 2641 	ld	c, a
      0009A7 46               [ 8] 2642 	ld	b, (hl)
      0009A8 F8 04            [12] 2643 	ldhl	sp,	#4
      0009AA 2A               [ 8] 2644 	ld	a, (hl+)
      0009AB 5F               [ 4] 2645 	ld	e, a
      0009AC 56               [ 8] 2646 	ld	d, (hl)
      0009AD CDr31r03         [24] 2647 	call	_modifyCoordinates
                           0009B0  2648 	C$main.c$412$6_1$253	= .
                                   2649 	.globl	C$main.c$412$6_1$253
                                   2650 ;main.c:412: pieceSelected = false;
      0009B0 21r0Ar00         [12] 2651 	ld	hl, #_pieceSelected
      0009B3 36 00            [12] 2652 	ld	(hl), #0x00
                           0009B5  2653 	C$main.c$413$6_1$253	= .
                                   2654 	.globl	C$main.c$413$6_1$253
                                   2655 ;main.c:413: if (currentPlayer == BLACK_PLAYER) {
      0009B5 21r07r00         [12] 2656 	ld	hl, #_currentPlayer
      0009B8 7E               [ 8] 2657 	ld	a, (hl)
      0009B9 B7               [ 4] 2658 	or	a, a
      0009BA 20 04            [12] 2659 	jr	NZ, 00123$
                           0009BC  2660 	C$main.c$414$7_1$254	= .
                                   2661 	.globl	C$main.c$414$7_1$254
                                   2662 ;main.c:414: currentPlayer = WHITE_PLAYER;
      0009BC 36 01            [12] 2663 	ld	(hl), #0x01
      0009BE 18 05            [12] 2664 	jr	00124$
      0009C0                       2665 00123$:
                           0009C0  2666 	C$main.c$416$7_1$255	= .
                                   2667 	.globl	C$main.c$416$7_1$255
                                   2668 ;main.c:416: currentPlayer = BLACK_PLAYER;
      0009C0 21r07r00         [12] 2669 	ld	hl, #_currentPlayer
      0009C3 36 00            [12] 2670 	ld	(hl), #0x00
      0009C5                       2671 00124$:
                           0009C5  2672 	C$main.c$418$6_1$253	= .
                                   2673 	.globl	C$main.c$418$6_1$253
                                   2674 ;main.c:418: printBlack();
      0009C5 CDr47r01         [24] 2675 	call	_printBlack
                           0009C8  2676 	C$main.c$419$6_1$253	= .
                                   2677 	.globl	C$main.c$419$6_1$253
                                   2678 ;main.c:419: printWhite();
      0009C8 CDr3Cr02         [24] 2679 	call	_printWhite
      0009CB                       2680 00129$:
                           0009CB  2681 	C$main.c$422$4_1$248	= .
                                   2682 	.globl	C$main.c$422$4_1$248
                                   2683 ;main.c:422: printTurn();
      0009CB CDr8Er00         [24] 2684 	call	_printTurn
                           0009CE  2685 	C$main.c$423$4_1$248	= .
                                   2686 	.globl	C$main.c$423$4_1$248
                                   2687 ;main.c:423: break; // Exit the loop after a piece has been moved
      0009CE 18 10            [12] 2688 	jr	00137$
      0009D0                       2689 00132$:
                           0009D0  2690 	C$main.c$425$3_1$247	= .
                                   2691 	.globl	C$main.c$425$3_1$247
                                   2692 ;main.c:425: if (joypad_input & J_B) {
      0009D0 CB 6F            [ 8] 2693 	bit	5, a
      0009D2 CAr0Cr09         [16] 2694 	jp	Z,00135$
                           0009D5  2695 	C$main.c$426$4_1$256	= .
                                   2696 	.globl	C$main.c$426$4_1$256
                                   2697 ;main.c:426: pieceSelected = false;
      0009D5 21r0Ar00         [12] 2698 	ld	hl, #_pieceSelected
      0009D8 36 00            [12] 2699 	ld	(hl), #0x00
                           0009DA  2700 	C$main.c$427$4_1$256	= .
                                   2701 	.globl	C$main.c$427$4_1$256
                                   2702 ;main.c:427: printBlack();
      0009DA CDr47r01         [24] 2703 	call	_printBlack
                           0009DD  2704 	C$main.c$428$4_1$256	= .
                                   2705 	.globl	C$main.c$428$4_1$256
                                   2706 ;main.c:428: printWhite();
      0009DD CDr3Cr02         [24] 2707 	call	_printWhite
                           0009E0  2708 	C$main.c$429$2_1$239	= .
                                   2709 	.globl	C$main.c$429$2_1$239
                                   2710 ;main.c:429: break;
      0009E0                       2711 00137$:
                           0009E0  2712 	C$main.c$432$2_1$239	= .
                                   2713 	.globl	C$main.c$432$2_1$239
                                   2714 ;main.c:432: delay(100);
      0009E0 11 64 00         [12] 2715 	ld	de, #0x0064
      0009E3 CDr00r00         [24] 2716 	call	_delay
      0009E6 C3r40r08         [16] 2717 	jp	00139$
                           0009E9  2718 	C$main.c$434$1_1$237	= .
                                   2719 	.globl	C$main.c$434$1_1$237
                                   2720 ;main.c:434: }
      0009E9 33               [ 8] 2721 	inc	sp
      0009EA 33               [ 8] 2722 	inc	sp
                           0009EB  2723 	C$main.c$434$1_1$237	= .
                                   2724 	.globl	C$main.c$434$1_1$237
                           0009EB  2725 	XG$main$0$0	= .
                                   2726 	.globl	XG$main$0$0
      0009EB C9               [16] 2727 	ret
                                   2728 	.area _CODE
                                   2729 	.area _INITIALIZER
                           000000  2730 Fmain$__xinit_lastButtonState$0_0$0 == .
      000000                       2731 __xinit__lastButtonState:
      000000 00                    2732 	.db #0x00	; 0
                           000001  2733 Fmain$__xinit_debounceTimer$0_0$0 == .
      000001                       2734 __xinit__debounceTimer:
      000001 00 00                 2735 	.dw #0x0000
                           000003  2736 Fmain$__xinit_selectedPieceIndex$0_0$0 == .
      000003                       2737 __xinit__selectedPieceIndex:
      000003 FF FF                 2738 	.dw #0xffff
                           000005  2739 Fmain$__xinit_cursorx$0_0$0 == .
      000005                       2740 __xinit__cursorx:
      000005 1C                    2741 	.db #0x1c	; 28
                           000006  2742 Fmain$__xinit_cursory$0_0$0 == .
      000006                       2743 __xinit__cursory:
      000006 1C                    2744 	.db #0x1c	; 28
                           000007  2745 Fmain$__xinit_currentPlayer$0_0$0 == .
      000007                       2746 __xinit__currentPlayer:
      000007 00                    2747 	.db #0x00	; 0
                           000008  2748 Fmain$__xinit_selectedCoords$0_0$0 == .
      000008                       2749 __xinit__selectedCoords:
      000008 00 00                 2750 	.dw #0x0000
                           00000A  2751 Fmain$__xinit_pieceSelected$0_0$0 == .
      00000A                       2752 __xinit__pieceSelected:
      00000A 00                    2753 	.db #0x00	;  0
                           00000B  2754 Fmain$__xinit_tile1$0_0$0 == .
      00000B                       2755 __xinit__tile1:
      00000B FF                    2756 	.db #0xff	; 255
      00000C FF                    2757 	.db #0xff	; 255
      00000D FF                    2758 	.db #0xff	; 255
      00000E FF                    2759 	.db #0xff	; 255
      00000F FF                    2760 	.db #0xff	; 255
      000010 FF                    2761 	.db #0xff	; 255
      000011 FF                    2762 	.db #0xff	; 255
      000012 FF                    2763 	.db #0xff	; 255
      000013 FF                    2764 	.db #0xff	; 255
      000014 FF                    2765 	.db #0xff	; 255
      000015 FF                    2766 	.db #0xff	; 255
      000016 FF                    2767 	.db #0xff	; 255
      000017 FF                    2768 	.db #0xff	; 255
      000018 FF                    2769 	.db #0xff	; 255
      000019 FF                    2770 	.db #0xff	; 255
      00001A FF                    2771 	.db #0xff	; 255
                           00001B  2772 Fmain$__xinit_tile2$0_0$0 == .
      00001B                       2773 __xinit__tile2:
      00001B FF                    2774 	.db #0xff	; 255
      00001C 00                    2775 	.db #0x00	; 0
      00001D FF                    2776 	.db #0xff	; 255
      00001E 00                    2777 	.db #0x00	; 0
      00001F FF                    2778 	.db #0xff	; 255
      000020 00                    2779 	.db #0x00	; 0
      000021 FF                    2780 	.db #0xff	; 255
      000022 00                    2781 	.db #0x00	; 0
      000023 FF                    2782 	.db #0xff	; 255
      000024 00                    2783 	.db #0x00	; 0
      000025 FF                    2784 	.db #0xff	; 255
      000026 00                    2785 	.db #0x00	; 0
      000027 FF                    2786 	.db #0xff	; 255
      000028 00                    2787 	.db #0x00	; 0
      000029 FF                    2788 	.db #0xff	; 255
      00002A 00                    2789 	.db #0x00	; 0
                           00002B  2790 Fmain$__xinit_tile3$0_0$0 == .
      00002B                       2791 __xinit__tile3:
      00002B 00                    2792 	.db #0x00	; 0
      00002C FF                    2793 	.db #0xff	; 255
      00002D 00                    2794 	.db #0x00	; 0
      00002E FF                    2795 	.db #0xff	; 255
      00002F 00                    2796 	.db #0x00	; 0
      000030 FF                    2797 	.db #0xff	; 255
      000031 00                    2798 	.db #0x00	; 0
      000032 FF                    2799 	.db #0xff	; 255
      000033 00                    2800 	.db #0x00	; 0
      000034 FF                    2801 	.db #0xff	; 255
      000035 00                    2802 	.db #0x00	; 0
      000036 FF                    2803 	.db #0xff	; 255
      000037 00                    2804 	.db #0x00	; 0
      000038 FF                    2805 	.db #0xff	; 255
      000039 00                    2806 	.db #0x00	; 0
      00003A FF                    2807 	.db #0xff	; 255
                           00003B  2808 Fmain$__xinit_map$0_0$0 == .
      00003B                       2809 __xinit__map:
      00003B 01                    2810 	.db #0x01	; 1
      00003C 01                    2811 	.db #0x01	; 1
      00003D 01                    2812 	.db #0x01	; 1
      00003E 01                    2813 	.db #0x01	; 1
      00003F 01                    2814 	.db #0x01	; 1
      000040 01                    2815 	.db #0x01	; 1
      000041 01                    2816 	.db #0x01	; 1
      000042 01                    2817 	.db #0x01	; 1
      000043 01                    2818 	.db #0x01	; 1
      000044 01                    2819 	.db #0x01	; 1
      000045 01                    2820 	.db #0x01	; 1
      000046 01                    2821 	.db #0x01	; 1
      000047 01                    2822 	.db #0x01	; 1
      000048 01                    2823 	.db #0x01	; 1
      000049 01                    2824 	.db #0x01	; 1
      00004A 01                    2825 	.db #0x01	; 1
      00004B 01                    2826 	.db #0x01	; 1
      00004C 01                    2827 	.db #0x01	; 1
      00004D 01                    2828 	.db #0x01	; 1
      00004E 01                    2829 	.db #0x01	; 1
      00004F 01                    2830 	.db #0x01	; 1
      000050 01                    2831 	.db #0x01	; 1
      000051 02                    2832 	.db #0x02	; 2
      000052 02                    2833 	.db #0x02	; 2
      000053 03                    2834 	.db #0x03	; 3
      000054 03                    2835 	.db #0x03	; 3
      000055 02                    2836 	.db #0x02	; 2
      000056 02                    2837 	.db #0x02	; 2
      000057 03                    2838 	.db #0x03	; 3
      000058 03                    2839 	.db #0x03	; 3
      000059 02                    2840 	.db #0x02	; 2
      00005A 02                    2841 	.db #0x02	; 2
      00005B 03                    2842 	.db #0x03	; 3
      00005C 03                    2843 	.db #0x03	; 3
      00005D 02                    2844 	.db #0x02	; 2
      00005E 02                    2845 	.db #0x02	; 2
      00005F 03                    2846 	.db #0x03	; 3
      000060 03                    2847 	.db #0x03	; 3
      000061 01                    2848 	.db #0x01	; 1
      000062 01                    2849 	.db #0x01	; 1
      000063 01                    2850 	.db #0x01	; 1
      000064 01                    2851 	.db #0x01	; 1
      000065 02                    2852 	.db #0x02	; 2
      000066 02                    2853 	.db #0x02	; 2
      000067 03                    2854 	.db #0x03	; 3
      000068 03                    2855 	.db #0x03	; 3
      000069 02                    2856 	.db #0x02	; 2
      00006A 02                    2857 	.db #0x02	; 2
      00006B 03                    2858 	.db #0x03	; 3
      00006C 03                    2859 	.db #0x03	; 3
      00006D 02                    2860 	.db #0x02	; 2
      00006E 02                    2861 	.db #0x02	; 2
      00006F 03                    2862 	.db #0x03	; 3
      000070 03                    2863 	.db #0x03	; 3
      000071 02                    2864 	.db #0x02	; 2
      000072 02                    2865 	.db #0x02	; 2
      000073 03                    2866 	.db #0x03	; 3
      000074 03                    2867 	.db #0x03	; 3
      000075 01                    2868 	.db #0x01	; 1
      000076 01                    2869 	.db #0x01	; 1
      000077 01                    2870 	.db #0x01	; 1
      000078 01                    2871 	.db #0x01	; 1
      000079 03                    2872 	.db #0x03	; 3
      00007A 03                    2873 	.db #0x03	; 3
      00007B 02                    2874 	.db #0x02	; 2
      00007C 02                    2875 	.db #0x02	; 2
      00007D 03                    2876 	.db #0x03	; 3
      00007E 03                    2877 	.db #0x03	; 3
      00007F 02                    2878 	.db #0x02	; 2
      000080 02                    2879 	.db #0x02	; 2
      000081 03                    2880 	.db #0x03	; 3
      000082 03                    2881 	.db #0x03	; 3
      000083 02                    2882 	.db #0x02	; 2
      000084 02                    2883 	.db #0x02	; 2
      000085 03                    2884 	.db #0x03	; 3
      000086 03                    2885 	.db #0x03	; 3
      000087 02                    2886 	.db #0x02	; 2
      000088 02                    2887 	.db #0x02	; 2
      000089 01                    2888 	.db #0x01	; 1
      00008A 01                    2889 	.db #0x01	; 1
      00008B 01                    2890 	.db #0x01	; 1
      00008C 01                    2891 	.db #0x01	; 1
      00008D 03                    2892 	.db #0x03	; 3
      00008E 03                    2893 	.db #0x03	; 3
      00008F 02                    2894 	.db #0x02	; 2
      000090 02                    2895 	.db #0x02	; 2
      000091 03                    2896 	.db #0x03	; 3
      000092 03                    2897 	.db #0x03	; 3
      000093 02                    2898 	.db #0x02	; 2
      000094 02                    2899 	.db #0x02	; 2
      000095 03                    2900 	.db #0x03	; 3
      000096 03                    2901 	.db #0x03	; 3
      000097 02                    2902 	.db #0x02	; 2
      000098 02                    2903 	.db #0x02	; 2
      000099 03                    2904 	.db #0x03	; 3
      00009A 03                    2905 	.db #0x03	; 3
      00009B 02                    2906 	.db #0x02	; 2
      00009C 02                    2907 	.db #0x02	; 2
      00009D 01                    2908 	.db #0x01	; 1
      00009E 01                    2909 	.db #0x01	; 1
      00009F 01                    2910 	.db #0x01	; 1
      0000A0 01                    2911 	.db #0x01	; 1
      0000A1 02                    2912 	.db #0x02	; 2
      0000A2 02                    2913 	.db #0x02	; 2
      0000A3 03                    2914 	.db #0x03	; 3
      0000A4 03                    2915 	.db #0x03	; 3
      0000A5 02                    2916 	.db #0x02	; 2
      0000A6 02                    2917 	.db #0x02	; 2
      0000A7 03                    2918 	.db #0x03	; 3
      0000A8 03                    2919 	.db #0x03	; 3
      0000A9 02                    2920 	.db #0x02	; 2
      0000AA 02                    2921 	.db #0x02	; 2
      0000AB 03                    2922 	.db #0x03	; 3
      0000AC 03                    2923 	.db #0x03	; 3
      0000AD 02                    2924 	.db #0x02	; 2
      0000AE 02                    2925 	.db #0x02	; 2
      0000AF 03                    2926 	.db #0x03	; 3
      0000B0 03                    2927 	.db #0x03	; 3
      0000B1 01                    2928 	.db #0x01	; 1
      0000B2 01                    2929 	.db #0x01	; 1
      0000B3 01                    2930 	.db #0x01	; 1
      0000B4 01                    2931 	.db #0x01	; 1
      0000B5 02                    2932 	.db #0x02	; 2
      0000B6 02                    2933 	.db #0x02	; 2
      0000B7 03                    2934 	.db #0x03	; 3
      0000B8 03                    2935 	.db #0x03	; 3
      0000B9 02                    2936 	.db #0x02	; 2
      0000BA 02                    2937 	.db #0x02	; 2
      0000BB 03                    2938 	.db #0x03	; 3
      0000BC 03                    2939 	.db #0x03	; 3
      0000BD 02                    2940 	.db #0x02	; 2
      0000BE 02                    2941 	.db #0x02	; 2
      0000BF 03                    2942 	.db #0x03	; 3
      0000C0 03                    2943 	.db #0x03	; 3
      0000C1 02                    2944 	.db #0x02	; 2
      0000C2 02                    2945 	.db #0x02	; 2
      0000C3 03                    2946 	.db #0x03	; 3
      0000C4 03                    2947 	.db #0x03	; 3
      0000C5 01                    2948 	.db #0x01	; 1
      0000C6 01                    2949 	.db #0x01	; 1
      0000C7 01                    2950 	.db #0x01	; 1
      0000C8 01                    2951 	.db #0x01	; 1
      0000C9 03                    2952 	.db #0x03	; 3
      0000CA 03                    2953 	.db #0x03	; 3
      0000CB 02                    2954 	.db #0x02	; 2
      0000CC 02                    2955 	.db #0x02	; 2
      0000CD 03                    2956 	.db #0x03	; 3
      0000CE 03                    2957 	.db #0x03	; 3
      0000CF 02                    2958 	.db #0x02	; 2
      0000D0 02                    2959 	.db #0x02	; 2
      0000D1 03                    2960 	.db #0x03	; 3
      0000D2 03                    2961 	.db #0x03	; 3
      0000D3 02                    2962 	.db #0x02	; 2
      0000D4 02                    2963 	.db #0x02	; 2
      0000D5 03                    2964 	.db #0x03	; 3
      0000D6 03                    2965 	.db #0x03	; 3
      0000D7 02                    2966 	.db #0x02	; 2
      0000D8 02                    2967 	.db #0x02	; 2
      0000D9 01                    2968 	.db #0x01	; 1
      0000DA 01                    2969 	.db #0x01	; 1
      0000DB 01                    2970 	.db #0x01	; 1
      0000DC 01                    2971 	.db #0x01	; 1
      0000DD 03                    2972 	.db #0x03	; 3
      0000DE 03                    2973 	.db #0x03	; 3
      0000DF 02                    2974 	.db #0x02	; 2
      0000E0 02                    2975 	.db #0x02	; 2
      0000E1 03                    2976 	.db #0x03	; 3
      0000E2 03                    2977 	.db #0x03	; 3
      0000E3 02                    2978 	.db #0x02	; 2
      0000E4 02                    2979 	.db #0x02	; 2
      0000E5 03                    2980 	.db #0x03	; 3
      0000E6 03                    2981 	.db #0x03	; 3
      0000E7 02                    2982 	.db #0x02	; 2
      0000E8 02                    2983 	.db #0x02	; 2
      0000E9 03                    2984 	.db #0x03	; 3
      0000EA 03                    2985 	.db #0x03	; 3
      0000EB 02                    2986 	.db #0x02	; 2
      0000EC 02                    2987 	.db #0x02	; 2
      0000ED 01                    2988 	.db #0x01	; 1
      0000EE 01                    2989 	.db #0x01	; 1
      0000EF 01                    2990 	.db #0x01	; 1
      0000F0 01                    2991 	.db #0x01	; 1
      0000F1 02                    2992 	.db #0x02	; 2
      0000F2 02                    2993 	.db #0x02	; 2
      0000F3 03                    2994 	.db #0x03	; 3
      0000F4 03                    2995 	.db #0x03	; 3
      0000F5 02                    2996 	.db #0x02	; 2
      0000F6 02                    2997 	.db #0x02	; 2
      0000F7 03                    2998 	.db #0x03	; 3
      0000F8 03                    2999 	.db #0x03	; 3
      0000F9 02                    3000 	.db #0x02	; 2
      0000FA 02                    3001 	.db #0x02	; 2
      0000FB 03                    3002 	.db #0x03	; 3
      0000FC 03                    3003 	.db #0x03	; 3
      0000FD 02                    3004 	.db #0x02	; 2
      0000FE 02                    3005 	.db #0x02	; 2
      0000FF 03                    3006 	.db #0x03	; 3
      000100 03                    3007 	.db #0x03	; 3
      000101 01                    3008 	.db #0x01	; 1
      000102 01                    3009 	.db #0x01	; 1
      000103 01                    3010 	.db #0x01	; 1
      000104 01                    3011 	.db #0x01	; 1
      000105 02                    3012 	.db #0x02	; 2
      000106 02                    3013 	.db #0x02	; 2
      000107 03                    3014 	.db #0x03	; 3
      000108 03                    3015 	.db #0x03	; 3
      000109 02                    3016 	.db #0x02	; 2
      00010A 02                    3017 	.db #0x02	; 2
      00010B 03                    3018 	.db #0x03	; 3
      00010C 03                    3019 	.db #0x03	; 3
      00010D 02                    3020 	.db #0x02	; 2
      00010E 02                    3021 	.db #0x02	; 2
      00010F 03                    3022 	.db #0x03	; 3
      000110 03                    3023 	.db #0x03	; 3
      000111 02                    3024 	.db #0x02	; 2
      000112 02                    3025 	.db #0x02	; 2
      000113 03                    3026 	.db #0x03	; 3
      000114 03                    3027 	.db #0x03	; 3
      000115 01                    3028 	.db #0x01	; 1
      000116 01                    3029 	.db #0x01	; 1
      000117 01                    3030 	.db #0x01	; 1
      000118 01                    3031 	.db #0x01	; 1
      000119 03                    3032 	.db #0x03	; 3
      00011A 03                    3033 	.db #0x03	; 3
      00011B 02                    3034 	.db #0x02	; 2
      00011C 02                    3035 	.db #0x02	; 2
      00011D 03                    3036 	.db #0x03	; 3
      00011E 03                    3037 	.db #0x03	; 3
      00011F 02                    3038 	.db #0x02	; 2
      000120 02                    3039 	.db #0x02	; 2
      000121 03                    3040 	.db #0x03	; 3
      000122 03                    3041 	.db #0x03	; 3
      000123 02                    3042 	.db #0x02	; 2
      000124 02                    3043 	.db #0x02	; 2
      000125 03                    3044 	.db #0x03	; 3
      000126 03                    3045 	.db #0x03	; 3
      000127 02                    3046 	.db #0x02	; 2
      000128 02                    3047 	.db #0x02	; 2
      000129 01                    3048 	.db #0x01	; 1
      00012A 01                    3049 	.db #0x01	; 1
      00012B 01                    3050 	.db #0x01	; 1
      00012C 01                    3051 	.db #0x01	; 1
      00012D 03                    3052 	.db #0x03	; 3
      00012E 03                    3053 	.db #0x03	; 3
      00012F 02                    3054 	.db #0x02	; 2
      000130 02                    3055 	.db #0x02	; 2
      000131 03                    3056 	.db #0x03	; 3
      000132 03                    3057 	.db #0x03	; 3
      000133 02                    3058 	.db #0x02	; 2
      000134 02                    3059 	.db #0x02	; 2
      000135 03                    3060 	.db #0x03	; 3
      000136 03                    3061 	.db #0x03	; 3
      000137 02                    3062 	.db #0x02	; 2
      000138 02                    3063 	.db #0x02	; 2
      000139 03                    3064 	.db #0x03	; 3
      00013A 03                    3065 	.db #0x03	; 3
      00013B 02                    3066 	.db #0x02	; 2
      00013C 02                    3067 	.db #0x02	; 2
      00013D 01                    3068 	.db #0x01	; 1
      00013E 01                    3069 	.db #0x01	; 1
      00013F 01                    3070 	.db #0x01	; 1
      000140 01                    3071 	.db #0x01	; 1
      000141 02                    3072 	.db #0x02	; 2
      000142 02                    3073 	.db #0x02	; 2
      000143 03                    3074 	.db #0x03	; 3
      000144 03                    3075 	.db #0x03	; 3
      000145 02                    3076 	.db #0x02	; 2
      000146 02                    3077 	.db #0x02	; 2
      000147 03                    3078 	.db #0x03	; 3
      000148 03                    3079 	.db #0x03	; 3
      000149 02                    3080 	.db #0x02	; 2
      00014A 02                    3081 	.db #0x02	; 2
      00014B 03                    3082 	.db #0x03	; 3
      00014C 03                    3083 	.db #0x03	; 3
      00014D 02                    3084 	.db #0x02	; 2
      00014E 02                    3085 	.db #0x02	; 2
      00014F 03                    3086 	.db #0x03	; 3
      000150 03                    3087 	.db #0x03	; 3
      000151 01                    3088 	.db #0x01	; 1
      000152 01                    3089 	.db #0x01	; 1
      000153 01                    3090 	.db #0x01	; 1
      000154 01                    3091 	.db #0x01	; 1
      000155 02                    3092 	.db #0x02	; 2
      000156 02                    3093 	.db #0x02	; 2
      000157 03                    3094 	.db #0x03	; 3
      000158 03                    3095 	.db #0x03	; 3
      000159 02                    3096 	.db #0x02	; 2
      00015A 02                    3097 	.db #0x02	; 2
      00015B 03                    3098 	.db #0x03	; 3
      00015C 03                    3099 	.db #0x03	; 3
      00015D 02                    3100 	.db #0x02	; 2
      00015E 02                    3101 	.db #0x02	; 2
      00015F 03                    3102 	.db #0x03	; 3
      000160 03                    3103 	.db #0x03	; 3
      000161 02                    3104 	.db #0x02	; 2
      000162 02                    3105 	.db #0x02	; 2
      000163 03                    3106 	.db #0x03	; 3
      000164 03                    3107 	.db #0x03	; 3
      000165 01                    3108 	.db #0x01	; 1
      000166 01                    3109 	.db #0x01	; 1
      000167 01                    3110 	.db #0x01	; 1
      000168 01                    3111 	.db #0x01	; 1
      000169 03                    3112 	.db #0x03	; 3
      00016A 03                    3113 	.db #0x03	; 3
      00016B 02                    3114 	.db #0x02	; 2
      00016C 02                    3115 	.db #0x02	; 2
      00016D 03                    3116 	.db #0x03	; 3
      00016E 03                    3117 	.db #0x03	; 3
      00016F 02                    3118 	.db #0x02	; 2
      000170 02                    3119 	.db #0x02	; 2
      000171 03                    3120 	.db #0x03	; 3
      000172 03                    3121 	.db #0x03	; 3
      000173 02                    3122 	.db #0x02	; 2
      000174 02                    3123 	.db #0x02	; 2
      000175 03                    3124 	.db #0x03	; 3
      000176 03                    3125 	.db #0x03	; 3
      000177 02                    3126 	.db #0x02	; 2
      000178 02                    3127 	.db #0x02	; 2
      000179 01                    3128 	.db #0x01	; 1
      00017A 01                    3129 	.db #0x01	; 1
      00017B 01                    3130 	.db #0x01	; 1
      00017C 01                    3131 	.db #0x01	; 1
      00017D 03                    3132 	.db #0x03	; 3
      00017E 03                    3133 	.db #0x03	; 3
      00017F 02                    3134 	.db #0x02	; 2
      000180 02                    3135 	.db #0x02	; 2
      000181 03                    3136 	.db #0x03	; 3
      000182 03                    3137 	.db #0x03	; 3
      000183 02                    3138 	.db #0x02	; 2
      000184 02                    3139 	.db #0x02	; 2
      000185 03                    3140 	.db #0x03	; 3
      000186 03                    3141 	.db #0x03	; 3
      000187 02                    3142 	.db #0x02	; 2
      000188 02                    3143 	.db #0x02	; 2
      000189 03                    3144 	.db #0x03	; 3
      00018A 03                    3145 	.db #0x03	; 3
      00018B 02                    3146 	.db #0x02	; 2
      00018C 02                    3147 	.db #0x02	; 2
      00018D 01                    3148 	.db #0x01	; 1
      00018E 01                    3149 	.db #0x01	; 1
      00018F 01                    3150 	.db #0x01	; 1
      000190 01                    3151 	.db #0x01	; 1
      000191 01                    3152 	.db #0x01	; 1
      000192 01                    3153 	.db #0x01	; 1
      000193 01                    3154 	.db #0x01	; 1
      000194 01                    3155 	.db #0x01	; 1
      000195 01                    3156 	.db #0x01	; 1
      000196 01                    3157 	.db #0x01	; 1
      000197 01                    3158 	.db #0x01	; 1
      000198 01                    3159 	.db #0x01	; 1
      000199 01                    3160 	.db #0x01	; 1
      00019A 01                    3161 	.db #0x01	; 1
      00019B 01                    3162 	.db #0x01	; 1
      00019C 01                    3163 	.db #0x01	; 1
      00019D 01                    3164 	.db #0x01	; 1
      00019E 01                    3165 	.db #0x01	; 1
      00019F 01                    3166 	.db #0x01	; 1
      0001A0 01                    3167 	.db #0x01	; 1
      0001A1 01                    3168 	.db #0x01	; 1
      0001A2 01                    3169 	.db #0x01	; 1
                           0001A3  3170 Fmain$__xinit_squareTL$0_0$0 == .
      0001A3                       3171 __xinit__squareTL:
      0001A3 FF                    3172 	.db #0xff	; 255
      0001A4 FF                    3173 	.db #0xff	; 255
      0001A5 80                    3174 	.db #0x80	; 128
      0001A6 80                    3175 	.db #0x80	; 128
      0001A7 80                    3176 	.db #0x80	; 128
      0001A8 80                    3177 	.db #0x80	; 128
      0001A9 80                    3178 	.db #0x80	; 128
      0001AA 80                    3179 	.db #0x80	; 128
      0001AB 80                    3180 	.db #0x80	; 128
      0001AC 80                    3181 	.db #0x80	; 128
      0001AD 80                    3182 	.db #0x80	; 128
      0001AE 80                    3183 	.db #0x80	; 128
      0001AF 80                    3184 	.db #0x80	; 128
      0001B0 80                    3185 	.db #0x80	; 128
      0001B1 80                    3186 	.db #0x80	; 128
      0001B2 80                    3187 	.db #0x80	; 128
                           0001B3  3188 Fmain$__xinit_squareTR$0_0$0 == .
      0001B3                       3189 __xinit__squareTR:
      0001B3 FF                    3190 	.db #0xff	; 255
      0001B4 FF                    3191 	.db #0xff	; 255
      0001B5 01                    3192 	.db #0x01	; 1
      0001B6 01                    3193 	.db #0x01	; 1
      0001B7 01                    3194 	.db #0x01	; 1
      0001B8 01                    3195 	.db #0x01	; 1
      0001B9 01                    3196 	.db #0x01	; 1
      0001BA 01                    3197 	.db #0x01	; 1
      0001BB 01                    3198 	.db #0x01	; 1
      0001BC 01                    3199 	.db #0x01	; 1
      0001BD 01                    3200 	.db #0x01	; 1
      0001BE 01                    3201 	.db #0x01	; 1
      0001BF 01                    3202 	.db #0x01	; 1
      0001C0 01                    3203 	.db #0x01	; 1
      0001C1 01                    3204 	.db #0x01	; 1
      0001C2 01                    3205 	.db #0x01	; 1
                           0001C3  3206 Fmain$__xinit_squareBL$0_0$0 == .
      0001C3                       3207 __xinit__squareBL:
      0001C3 80                    3208 	.db #0x80	; 128
      0001C4 80                    3209 	.db #0x80	; 128
      0001C5 80                    3210 	.db #0x80	; 128
      0001C6 80                    3211 	.db #0x80	; 128
      0001C7 80                    3212 	.db #0x80	; 128
      0001C8 80                    3213 	.db #0x80	; 128
      0001C9 80                    3214 	.db #0x80	; 128
      0001CA 80                    3215 	.db #0x80	; 128
      0001CB 80                    3216 	.db #0x80	; 128
      0001CC 80                    3217 	.db #0x80	; 128
      0001CD 80                    3218 	.db #0x80	; 128
      0001CE 80                    3219 	.db #0x80	; 128
      0001CF 80                    3220 	.db #0x80	; 128
      0001D0 80                    3221 	.db #0x80	; 128
      0001D1 FF                    3222 	.db #0xff	; 255
      0001D2 FF                    3223 	.db #0xff	; 255
                           0001D3  3224 Fmain$__xinit_squareBR$0_0$0 == .
      0001D3                       3225 __xinit__squareBR:
      0001D3 01                    3226 	.db #0x01	; 1
      0001D4 01                    3227 	.db #0x01	; 1
      0001D5 01                    3228 	.db #0x01	; 1
      0001D6 01                    3229 	.db #0x01	; 1
      0001D7 01                    3230 	.db #0x01	; 1
      0001D8 01                    3231 	.db #0x01	; 1
      0001D9 01                    3232 	.db #0x01	; 1
      0001DA 01                    3233 	.db #0x01	; 1
      0001DB 01                    3234 	.db #0x01	; 1
      0001DC 01                    3235 	.db #0x01	; 1
      0001DD 01                    3236 	.db #0x01	; 1
      0001DE 01                    3237 	.db #0x01	; 1
      0001DF 01                    3238 	.db #0x01	; 1
      0001E0 01                    3239 	.db #0x01	; 1
      0001E1 FF                    3240 	.db #0xff	; 255
      0001E2 FF                    3241 	.db #0xff	; 255
                           0001E3  3242 Fmain$__xinit_black_piece$0_0$0 == .
      0001E3                       3243 __xinit__black_piece:
      0001E3 FF                    3244 	.db #0xff	; 255
      0001E4 FF                    3245 	.db #0xff	; 255
      0001E5 FF                    3246 	.db #0xff	; 255
      0001E6 FF                    3247 	.db #0xff	; 255
      0001E7 FF                    3248 	.db #0xff	; 255
      0001E8 FF                    3249 	.db #0xff	; 255
      0001E9 FF                    3250 	.db #0xff	; 255
      0001EA FF                    3251 	.db #0xff	; 255
      0001EB FF                    3252 	.db #0xff	; 255
      0001EC FF                    3253 	.db #0xff	; 255
      0001ED FF                    3254 	.db #0xff	; 255
      0001EE FF                    3255 	.db #0xff	; 255
      0001EF FF                    3256 	.db #0xff	; 255
      0001F0 FF                    3257 	.db #0xff	; 255
      0001F1 FF                    3258 	.db #0xff	; 255
      0001F2 FF                    3259 	.db #0xff	; 255
                           0001F3  3260 Fmain$__xinit_white_piece$0_0$0 == .
      0001F3                       3261 __xinit__white_piece:
      0001F3 FF                    3262 	.db #0xff	; 255
      0001F4 00                    3263 	.db #0x00	; 0
      0001F5 FF                    3264 	.db #0xff	; 255
      0001F6 00                    3265 	.db #0x00	; 0
      0001F7 FF                    3266 	.db #0xff	; 255
      0001F8 00                    3267 	.db #0x00	; 0
      0001F9 FF                    3268 	.db #0xff	; 255
      0001FA 00                    3269 	.db #0x00	; 0
      0001FB FF                    3270 	.db #0xff	; 255
      0001FC 00                    3271 	.db #0x00	; 0
      0001FD FF                    3272 	.db #0xff	; 255
      0001FE 00                    3273 	.db #0x00	; 0
      0001FF FF                    3274 	.db #0xff	; 255
      000200 00                    3275 	.db #0x00	; 0
      000201 FF                    3276 	.db #0xff	; 255
      000202 00                    3277 	.db #0x00	; 0
                           000203  3278 Fmain$__xinit_currentPlayerBlackText$0_0$0 == .
      000203                       3279 __xinit__currentPlayerBlackText:
      000203 00                    3280 	.db #0x00	; 0
      000204 00                    3281 	.db #0x00	; 0
      000205 50                    3282 	.db #0x50	; 80	'P'
      000206 6C                    3283 	.db #0x6c	; 108	'l'
      000207 61                    3284 	.db #0x61	; 97	'a'
      000208 79                    3285 	.db #0x79	; 121	'y'
      000209 65                    3286 	.db #0x65	; 101	'e'
      00020A 72                    3287 	.db #0x72	; 114	'r'
      00020B 00                    3288 	.db #0x00	; 0
      00020C 42                    3289 	.db #0x42	; 66	'B'
      00020D 6C                    3290 	.db #0x6c	; 108	'l'
      00020E 61                    3291 	.db #0x61	; 97	'a'
      00020F 63                    3292 	.db #0x63	; 99	'c'
      000210 6B                    3293 	.db #0x6b	; 107	'k'
      000211 00                    3294 	.db #0x00	; 0
      000212 00                    3295 	.db #0x00	; 0
                           000213  3296 Fmain$__xinit_currentPlayerWhiteText$0_0$0 == .
      000213                       3297 __xinit__currentPlayerWhiteText:
      000213 00                    3298 	.db #0x00	; 0
      000214 00                    3299 	.db #0x00	; 0
      000215 50                    3300 	.db #0x50	; 80	'P'
      000216 6C                    3301 	.db #0x6c	; 108	'l'
      000217 61                    3302 	.db #0x61	; 97	'a'
      000218 79                    3303 	.db #0x79	; 121	'y'
      000219 65                    3304 	.db #0x65	; 101	'e'
      00021A 72                    3305 	.db #0x72	; 114	'r'
      00021B 00                    3306 	.db #0x00	; 0
      00021C 57                    3307 	.db #0x57	; 87	'W'
      00021D 68                    3308 	.db #0x68	; 104	'h'
      00021E 69                    3309 	.db #0x69	; 105	'i'
      00021F 74                    3310 	.db #0x74	; 116	't'
      000220 65                    3311 	.db #0x65	; 101	'e'
      000221 00                    3312 	.db #0x00	; 0
      000222 00                    3313 	.db #0x00	; 0
                           000223  3314 Fmain$__xinit_blackKing$0_0$0 == .
      000223                       3315 __xinit__blackKing:
      000223 FF                    3316 	.db #0xff	; 255
      000224 FF                    3317 	.db #0xff	; 255
      000225 DB                    3318 	.db #0xdb	; 219
      000226 FF                    3319 	.db #0xff	; 255
      000227 66                    3320 	.db #0x66	; 102	'f'
      000228 FF                    3321 	.db #0xff	; 255
      000229 81                    3322 	.db #0x81	; 129
      00022A FF                    3323 	.db #0xff	; 255
      00022B 81                    3324 	.db #0x81	; 129
      00022C FF                    3325 	.db #0xff	; 255
      00022D C3                    3326 	.db #0xc3	; 195
      00022E FF                    3327 	.db #0xff	; 255
      00022F FF                    3328 	.db #0xff	; 255
      000230 FF                    3329 	.db #0xff	; 255
      000231 FF                    3330 	.db #0xff	; 255
      000232 FF                    3331 	.db #0xff	; 255
                           000233  3332 Fmain$__xinit_whiteKing$0_0$0 == .
      000233                       3333 __xinit__whiteKing:
      000233 FF                    3334 	.db #0xff	; 255
      000234 00                    3335 	.db #0x00	; 0
      000235 DB                    3336 	.db #0xdb	; 219
      000236 24                    3337 	.db #0x24	; 36
      000237 66                    3338 	.db #0x66	; 102	'f'
      000238 99                    3339 	.db #0x99	; 153
      000239 81                    3340 	.db #0x81	; 129
      00023A 7E                    3341 	.db #0x7e	; 126
      00023B 81                    3342 	.db #0x81	; 129
      00023C 7E                    3343 	.db #0x7e	; 126
      00023D C3                    3344 	.db #0xc3	; 195
      00023E 3C                    3345 	.db #0x3c	; 60
      00023F FF                    3346 	.db #0xff	; 255
      000240 00                    3347 	.db #0x00	; 0
      000241 FF                    3348 	.db #0xff	; 255
      000242 00                    3349 	.db #0x00	; 0
                           000243  3350 Fmain$__xinit_blackPieces$0_0$0 == .
      000243                       3351 __xinit__blackPieces:
      000243 2C                    3352 	.db #0x2c	; 44
      000244 1C                    3353 	.db #0x1c	; 28
      000245 00                    3354 	.db #0x00	;  0
      000246 4C                    3355 	.db #0x4c	; 76	'L'
      000247 1C                    3356 	.db #0x1c	; 28
      000248 00                    3357 	.db #0x00	;  0
      000249 6C                    3358 	.db #0x6c	; 108	'l'
      00024A 1C                    3359 	.db #0x1c	; 28
      00024B 00                    3360 	.db #0x00	;  0
      00024C 8C                    3361 	.db #0x8c	; 140
      00024D 1C                    3362 	.db #0x1c	; 28
      00024E 00                    3363 	.db #0x00	;  0
      00024F 1C                    3364 	.db #0x1c	; 28
      000250 2C                    3365 	.db #0x2c	; 44
      000251 00                    3366 	.db #0x00	;  0
      000252 3C                    3367 	.db #0x3c	; 60
      000253 2C                    3368 	.db #0x2c	; 44
      000254 00                    3369 	.db #0x00	;  0
      000255 5C                    3370 	.db #0x5c	; 92
      000256 2C                    3371 	.db #0x2c	; 44
      000257 00                    3372 	.db #0x00	;  0
      000258 7C                    3373 	.db #0x7c	; 124
      000259 2C                    3374 	.db #0x2c	; 44
      00025A 00                    3375 	.db #0x00	;  0
      00025B 2C                    3376 	.db #0x2c	; 44
      00025C 3C                    3377 	.db #0x3c	; 60
      00025D 00                    3378 	.db #0x00	;  0
      00025E 4C                    3379 	.db #0x4c	; 76	'L'
      00025F 3C                    3380 	.db #0x3c	; 60
      000260 00                    3381 	.db #0x00	;  0
      000261 6C                    3382 	.db #0x6c	; 108	'l'
      000262 3C                    3383 	.db #0x3c	; 60
      000263 00                    3384 	.db #0x00	;  0
      000264 8C                    3385 	.db #0x8c	; 140
      000265 3C                    3386 	.db #0x3c	; 60
      000266 00                    3387 	.db #0x00	;  0
                           000267  3388 Fmain$__xinit_whitePieces$0_0$0 == .
      000267                       3389 __xinit__whitePieces:
      000267 1C                    3390 	.db #0x1c	; 28
      000268 8C                    3391 	.db #0x8c	; 140
      000269 00                    3392 	.db #0x00	;  0
      00026A 3C                    3393 	.db #0x3c	; 60
      00026B 8C                    3394 	.db #0x8c	; 140
      00026C 00                    3395 	.db #0x00	;  0
      00026D 5C                    3396 	.db #0x5c	; 92
      00026E 8C                    3397 	.db #0x8c	; 140
      00026F 00                    3398 	.db #0x00	;  0
      000270 7C                    3399 	.db #0x7c	; 124
      000271 8C                    3400 	.db #0x8c	; 140
      000272 00                    3401 	.db #0x00	;  0
      000273 2C                    3402 	.db #0x2c	; 44
      000274 7C                    3403 	.db #0x7c	; 124
      000275 00                    3404 	.db #0x00	;  0
      000276 4C                    3405 	.db #0x4c	; 76	'L'
      000277 7C                    3406 	.db #0x7c	; 124
      000278 00                    3407 	.db #0x00	;  0
      000279 6C                    3408 	.db #0x6c	; 108	'l'
      00027A 7C                    3409 	.db #0x7c	; 124
      00027B 00                    3410 	.db #0x00	;  0
      00027C 8C                    3411 	.db #0x8c	; 140
      00027D 7C                    3412 	.db #0x7c	; 124
      00027E 00                    3413 	.db #0x00	;  0
      00027F 1C                    3414 	.db #0x1c	; 28
      000280 6C                    3415 	.db #0x6c	; 108	'l'
      000281 00                    3416 	.db #0x00	;  0
      000282 3C                    3417 	.db #0x3c	; 60
      000283 6C                    3418 	.db #0x6c	; 108	'l'
      000284 00                    3419 	.db #0x00	;  0
      000285 5C                    3420 	.db #0x5c	; 92
      000286 6C                    3421 	.db #0x6c	; 108	'l'
      000287 00                    3422 	.db #0x00	;  0
      000288 7C                    3423 	.db #0x7c	; 124
      000289 6C                    3424 	.db #0x6c	; 108	'l'
      00028A 00                    3425 	.db #0x00	;  0
                                   3426 	.area _CABS (ABS)
